{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to MkDocs","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"error/","title":"Ej tillg\u00e4ngligt","text":"<p>Inneh\u00e5llet du s\u00f6ker har inte lagts upp \u00e4n. </p> <p>Jag t\u00e4nker v\u00e4l att jag g\u00f6r det n\u00e5gon g\u00e5ng.</p>"},{"location":"content/modul-1/1-datorer-och-programmering/","title":"Datorer och Programmering","text":""},{"location":"content/modul-1/1-datorer-och-programmering/#datorprogram","title":"Datorprogram","text":"<p>N\u00e4r man talar om datorer, inkluderar detta inte bara vanliga persondatorer eller b\u00e4rbara datorer, utan ocks\u00e5 mobiler och surfplattor. Datorer anv\u00e4nds \u00e4ven som komponenter i olika tekniska apparater s\u00e5som mikrov\u00e5gsugnar, tv\u00e4ttmaskiner, leksaker, bilar, trafikljus, hissar och robotgr\u00e4sklippare.</p> <p>Datorer \u00e4r numera en sj\u00e4lvklar del av v\u00e5ra liv och f\u00f6r att dessa ska fungera beh\u00f6ver de programmeras av m\u00e4nniskor. Programmering handlar om att skriva instruktioner som en dator kan f\u00f6rst\u00e5 och utf\u00f6ra. Instruktionerna kallas k\u00e4llkod (kod) eller program (datorprogram) och skrivs i ett programmeringsspr\u00e5k.</p> <p>N\u00e4r ett program utf\u00f6rs (k\u00f6rs) i en dator s\u00e4ger man att programmet exekveras.</p>"},{"location":"content/modul-1/1-datorer-och-programmering/#hur-fungerar-en-dator","title":"Hur fungerar en dator?","text":"<p>Enkelt uttryckt \u00e4r en dator en \"maskin\" som f\u00f6ljer tydliga instruktioner och har till uppgift att: Ta in information (indata), behandla och lagra informationen samt presentera informationen igen (utdata).</p> <p>En dator kan egentligen bara en sak, n\u00e4mligen skilja p\u00e5 tv\u00e5 tillst\u00e5nd, str\u00f6m p\u00e5 och av. Dessa tillst\u00e5nd brukar kallas f\u00f6r ettor och nollor. All information i en dator lagras som ettor och nollor.</p> <p>En dator kan f\u00f6renklat ses som att den \u00e4r uppbyggd av f\u00f6ljande delar: </p>"},{"location":"content/modul-1/1-datorer-och-programmering/#indata","title":"Indata","text":"<p>Att ge information till en dator kan ske med t.ex. tangentbord, mus eller mikrofon. En dator i en robotgr\u00e4sklippare kan f\u00e5 information fr\u00e5n olika sensorer som t.ex. k\u00e4nner av om n\u00e5got \u00e4r i v\u00e4gen.  </p>"},{"location":"content/modul-1/1-datorer-och-programmering/#processor","title":"Processor","text":"<p>\u00c4ven k\u00e4nt som CPU (Central Processing Unit), datorns \"hj\u00e4rna\", d\u00e4r alla instruktioner utf\u00f6rs, dvs d\u00e4r programmet k\u00f6rs (exekveras). Den kan hantera ett visst antal instruktioner. Olika datorer kan ha olika typer av processorer.  </p>"},{"location":"content/modul-1/1-datorer-och-programmering/#minne","title":"Minne","text":"<p>Programmet som ska k\u00f6ras l\u00e4ggs i datorns minne. Det \u00e4r h\u00e4rifr\u00e5n processorn h\u00e4mtar instruktioner. Processorn kan \u00e4ven anv\u00e4nda minnet f\u00f6r att lagra information medans programmet k\u00f6rs.  </p>"},{"location":"content/modul-1/1-datorer-och-programmering/#utdata","title":"Utdata","text":"<p>Att visa information fr\u00e5n en dator kan ske till t.ex. en sk\u00e4rm, h\u00f6gtalare eller skrivare. En dator i en robotgr\u00e4sklippare kan ha t.ex. en lite sk\u00e4rm (display) eller blinkade lysdioder.  </p>"},{"location":"content/modul-1/1-datorer-och-programmering/#program","title":"Program","text":"<p>Ett program \u00e4r en f\u00f6ljd av instruktioner, d\u00e4r varje instruktion representeras av ett antal ettor och nollor. Datorn \u00e4r oerh\u00f6rt snabb p\u00e5 att skilja p\u00e5 dessa ettor och nollor, vilket m\u00f6jligg\u00f6r skapandet av olika typer av program.</p> <p>N\u00e4r ett program \u00e4r skrivet som en serie av ettor och nollor kallas det f\u00f6r maskinkod. Ett program m\u00e5ste vara i maskinkod f\u00f6r att datorns h\u00e5rdvara (t.ex. processor, minne) ska kunna f\u00f6rst\u00e5 programmet och k\u00f6ra det. Maskinkoden ser olika ut beroende p\u00e5 vilken typ av processor datorn har och d\u00e4rf\u00f6r kan inte maskinkod flyttas till en dator med en annan processortyp. Ordet h\u00e5rdvara (fr\u00e5n engelskans hardware) \u00e4r ett samlingsnamn f\u00f6r datorns fysiska delar, dvs alla de saker man kan ta p\u00e5. </p> <p>Datorn f\u00f6rst\u00e5r ju bara maskinkod (ettor och nollor), men det \u00e4r ett spr\u00e5k som \u00e4r sv\u00e5rt f\u00f6r oss m\u00e4nniskor. D\u00e4rf\u00f6r har programmeringsspr\u00e5k skapats som \u00e4r enklare f\u00f6r oss m\u00e4nniskor att skriva och l\u00e4sa, och som sedan kan \u00f6vers\u00e4ttas till maskinkod. </p> <p>Program som skrivs med hj\u00e4lp av ett programmeringsspr\u00e5k kallas f\u00f6r k\u00e4llkod. Ofta anv\u00e4nds det f\u00f6rkortade kod, n\u00e4r man menar k\u00e4llkod. </p>"},{"location":"content/modul-1/1-datorer-och-programmering/#kompilering-interpretering","title":"Kompilering &amp; Interpretering","text":"<p>N\u00e4r man skriver k\u00e4llkod m\u00e5ste man anv\u00e4nda ett specifikt programmeringsspr\u00e5k och f\u00f6lja dess syntax, som \u00e4r reglerna f\u00f6r hur koden ska skrivas. De flesta programmeringsspr\u00e5k \u00e4r p\u00e5 engelska.</p> <p>F\u00f6r att datorn ska kunna k\u00f6ra koden m\u00e5ste den \u00f6vers\u00e4ttas till maskinkod. Det finns tv\u00e5 s\u00e4tt att g\u00f6ra detta: kompilering och interpretering. Kompilerade spr\u00e5k \u00f6vers\u00e4tter koden i f\u00f6rv\u00e4g, medan interpreterade spr\u00e5k \u00f6vers\u00e4tter den i realtid n\u00e4r programmet k\u00f6rs.</p>"},{"location":"content/modul-1/1-datorer-och-programmering/#kompilerade-sprak","title":"Kompilerade spr\u00e5k","text":"<p>Exempel p\u00e5 kompilerade spr\u00e5k \u00e4r C#, Java, C, C++ och Objective-C. Kompilatorn \u00f6vers\u00e4tter koden till maskinkod innan den k\u00f6rs.</p> <p>F\u00f6rdelar:</p> <ul> <li>Snabb exekvering.</li> <li>Tidiga uppt\u00e4ckter av syntaxfel.</li> </ul> <p>Nackdelar:</p> <ul> <li>Extra steg med kompilering.</li> <li>Krav p\u00e5 specifik processortyp.</li> </ul> <p>Kompilerade spr\u00e5k anv\u00e4nds n\u00e4r effektivitet och fels\u00e4kerhet \u00e4r viktigt.</p>"},{"location":"content/modul-1/1-datorer-och-programmering/#interpreterade-sprak","title":"Interpreterade spr\u00e5k","text":"<p>Exempel p\u00e5 interpreterade spr\u00e5k \u00e4r Python, JavaScript, PHP och Ruby. Interpreteraren \u00f6vers\u00e4tter och tolkar koden under exekvering.</p> <p>F\u00f6rdelar:</p> <ul> <li>Portabilitet.</li> <li>Ingen kompileringsprocess.</li> </ul> <p>Nackdelar:</p> <ul> <li>L\u00e5ngsammare exekvering.</li> <li>Risk f\u00f6r syntaxfel vid k\u00f6rning.</li> </ul>"},{"location":"content/modul-1/1-datorer-och-programmering/#lag-och-hognivasprak","title":"L\u00e5g- och h\u00f6gniv\u00e5spr\u00e5k","text":"<p>Det finns m\u00e5nga olika programmeringsspr\u00e5k att v\u00e4lja mellan, som till exempel Python, C#, C++, Java, Javascript och C. </p> <p>Varje spr\u00e5k har sina egna f\u00f6rdelar och \u00e4r bra p\u00e5 olika saker. Till exempel \u00e4r C ofta anv\u00e4ndbart f\u00f6r att styra maskiner och apparater, medan Java \u00e4r k\u00e4nt f\u00f6r att vara bra f\u00f6r att skapa stora datorprogram. N\u00e4r det g\u00e4ller spelutveckling \u00e4r C++ ett popul\u00e4rt val, medan C# anv\u00e4nds f\u00f6r att utveckla olika typer av applikationer och spel, och HTML, CSS och Javascript ofta anv\u00e4nds f\u00f6r att skapa webbsidor p\u00e5 n\u00e4tet.</p>"},{"location":"content/modul-1/1-datorer-och-programmering/#lagnivasprak","title":"L\u00e5gniv\u00e5spr\u00e5k","text":"<p>Historiskt sett n\u00e4r datorer programmerades anv\u00e4ndes l\u00e5gniv\u00e5spr\u00e5k, d\u00e4r koden var mycket detaljerad och v\u00e4ldigt n\u00e4ra det spr\u00e5k som datorn pratar (maskinkod). Det kr\u00e4vde exakt specificerade instruktioner, vilket gav full kontroll \u00f6ver programmet. L\u00e5gniv\u00e5spr\u00e5k anv\u00e4nds idag fr\u00e4mst f\u00f6r sm\u00e5 inbyggda system, exempelvis mikrov\u00e5gsugnar. Exempel p\u00e5 l\u00e5gniv\u00e5spr\u00e5k \u00e4r assembler.</p>"},{"location":"content/modul-1/1-datorer-och-programmering/#hognivasprak","title":"H\u00f6gniv\u00e5spr\u00e5k","text":"<p>N\u00e4sta steg i utvecklingen var mer avancerade programmeringsspr\u00e5k, s.k. h\u00f6gniv\u00e5spr\u00e5k. I dessa skrivs programmet p\u00e5 ett s\u00e4tt som \u00e4r l\u00e4ttare att f\u00f6rst\u00e5 f\u00f6r m\u00e4nniskor.  I h\u00f6gniv\u00e5spr\u00e5k fokuserar man p\u00e5 att beskriva vad som ska g\u00f6ras ist\u00e4llet f\u00f6r exakt hur det ska g\u00f6ras. \u00a0H\u00f6gniv\u00e5spr\u00e5k m\u00e5ste konverteras till maskinkod med hj\u00e4lp av en interpretator eller kompilator, beroende p\u00e5 vilket programmeringsspr\u00e5k som anv\u00e4nds. Det \u00e4r kompilatorn eller interpretatorn som styr hur koden utf\u00f6rs p\u00e5 detaljniv\u00e5.</p> <p>De vanligaste spr\u00e5ken har fler likheter \u00e4n olikheter, och alla inneh\u00e5ller instruktioner f\u00f6r:</p> <ul> <li>Sekvens - Instruktioner som sker i tur och ordning.</li> <li>Villkor - Styr vilka instruktioner som ska utf\u00f6ras.</li> <li>Repetition - Upprepning av instruktioner.</li> </ul>"},{"location":"content/modul-1/1-datorer-och-programmering/#vad-ar-c","title":"Vad \u00e4r C#?","text":"<p>C# (uttalas \"C sharp\") \u00e4r ett programmeringsspr\u00e5k som utvecklats av Microsoft och introducerades \u00e5r 2000.</p> <p>C# skapades med m\u00e5let att vara ett modernt, kraftfullt och l\u00e4ttanv\u00e4nt spr\u00e5k f\u00f6r att utveckla olika typer av program och applikationer f\u00f6r Microsoft-plattformar som Windows. Men med tiden har spr\u00e5ket blivit alltmer plattformsoberoende och numer kan man skriva och k\u00f6ra sina program p\u00e5 olika operativsystem som Windows, Linux och macOS. </p> <p>Ett av de mest intressanta dragen med C# \u00e4r dess n\u00e4ra koppling till Microsofts .NET-plattform. Detta betyder att C#-program kan dra nytta av .NET:s stora ekosystem av bibliotek och verktyg f\u00f6r att snabbt och effektivt bygga robusta och skalbara applikationer.</p> <p>C# har blivit ett popul\u00e4rt programmeringsspr\u00e5k tack vare dess anv\u00e4ndarv\u00e4nlighet, kraftfulla funktioner och breda anv\u00e4ndningsomr\u00e5den, vilket inkluderar allt fr\u00e5n desktopapplikationer till webbutveckling och spelprogrammering. F\u00f6r nyb\u00f6rjare \u00e4r C# ett utm\u00e4rkt val f\u00f6r att l\u00e4ra sig grunderna i programmering samtidigt som det erbjuder tillr\u00e4ckligt med funktionalitet f\u00f6r att hantera mer avancerade projekt.</p>"},{"location":"content/modul-1/1-datorer-och-programmering/#c-jamfort-med-cc","title":"C# j\u00e4mf\u00f6rt med C/C++","text":"<p>C# \u00e4r ett h\u00f6gniv\u00e5spr\u00e5k med moderna funktioner och starkt st\u00f6d f\u00f6r objektorienterad programmering, vilket g\u00f6r det enklare att utveckla och underh\u00e5lla program j\u00e4mf\u00f6rt med C och C++. Medan C och C++ \u00e4r n\u00e4rmare knutna till datorns h\u00e5rdvara och erbjuder mer direkt kontroll, ger C# en h\u00f6gre abstraktionsniv\u00e5 och plattformsoberoende genom Microsofts .NET-plattform.</p>"},{"location":"content/modul-1/1-datorer-och-programmering/#ide-integrated-development-environment","title":"IDE - Integrated Development Environment","text":"<p>\u00c4ven k\u00e4nt som \"programmet som man skriver kod i.\"</p> <p>En IDE, eller Integrated Development Environment, \u00e4r en programvara som erbjuder utvecklare en komplett milj\u00f6 f\u00f6r att skriva, testa, fels\u00f6ka och distribuera program. Den kombinerar vanligtvis textredigerare med andra funktioner s\u00e5som kodkomplettering och fels\u00f6kning.</p> <p>Vi kommer att anv\u00e4nda Visual Studio Community Edition f\u00f6r att skriva och utveckla C#-program. Visual Studio \u00e4r en kraftfull och popul\u00e4r IDE utvecklad av Microsoft och erbjuder ett brett utbud av funktioner och verktyg som underl\u00e4ttar utvecklingsprocessen. Community Edition \u00e4r gratis f\u00f6r studenter och enskilda utvecklare.</p> <p>F\u00f6rutom Visual Studio finns det ocks\u00e5 andra popul\u00e4ra IDE:er s\u00e5som Rider och Visual Studio Code. Ut\u00f6ver detta kan man ocks\u00e5 hitta webbaserade IDE:er online, exempelvis Replit. </p>"},{"location":"content/modul-1/2-variabler/","title":"Variabler","text":"<p>Ibland n\u00e4r man r\u00e4knar ut n\u00e5got kan man inte utf\u00f6ra hela ber\u00e4kningen p\u00e5 en g\u00e5ng, utan g\u00f6r det i steg, r\u00e4knar ut en sak i taget och skriver ned sina delresultat f\u00f6r att sedan kunna ber\u00e4kna slutresultatet.</p> <p>P\u00e5 motsvarande s\u00e4tt kan ber\u00e4kningar i ett datorprogram utf\u00f6ras stegvis, och information m\u00e5ste sparas f\u00f6r att kunna anv\u00e4ndas senare. Informationen sparas i variabler, namngivna objekt vars v\u00e4rde kan variera. </p> <p>Ett s\u00e4tt att t\u00e4nka p\u00e5 en variabel \u00e4r som en l\u00e5da som man kan l\u00e4gga v\u00e4rden i. Ett program kan inneh\u00e5lla m\u00e5nga variabler s\u00e5 varje variabel har ett eget namn. </p> <p>N\u00e4r man deklarerar (skapar) en variabel beh\u00f6ver man ange dess datatyp och dess namn. Om man sedan ger variabeln ett v\u00e4rde kallas det f\u00f6r tilldelning. Man tilldelar variabeln ett v\u00e4rde med hj\u00e4lp av ett likhetstecken, variabeln \u00e4r alltid p\u00e5 v\u00e4nster sida.</p> <p><pre><code>// Deklarerar en variabel av datatypen int.\nint age;  \n// Tilldelar v\u00e4rdet 18 till variabeln age.\nage = 18;\n</code></pre> </p> <p>Detta kan utf\u00f6ras p\u00e5 en rad, om man redan fr\u00e5n b\u00f6rjan vet vad v\u00e4rdet ska vara. Detta kallas f\u00f6r initiering. <pre><code>// Initierar variabeln myName.\nstring myName = \"Emil\"; \n</code></pre></p> <p>Flera variabler av samma datatyp kan deklareras i samma sats (p\u00e5 samma rad). Detta g\u00e4ller \u00e4ven tilldelning. <pre><code>// Deklarerar tre variabler av typen int.\nint a, b, c; \n\n// Tilldelar de tre variablerna v\u00e4rdet 5.\na = b = c = 5; \n</code></pre></p> <p>Variablers v\u00e4rde kan \u00e4ndras under programmets k\u00f6rtid. <pre><code>string myName = \"Emil\";\n\n// Tilldelar variabeln ett nytt v\u00e4rde.\nmyName = \"Anna\"; \n\n// Skriver ut variabelns v\u00e4rde.\nConsole.WriteLine(myName); // Ger utskriften Anna.\n</code></pre></p> <p>Variabler kan tilldelas v\u00e4rden fr\u00e5n andra variabler. <pre><code>// Initierar a till 2. Tilldelar b v\u00e4rdet fr\u00e5n a, allts\u00e5 tv\u00e5.\nint a = 2;\nint b = a; \n\n// Tilldelar b sitt eget v\u00e4rde plus 10, allts\u00e5 12.\nb = b + 10; \n</code></pre></p>"},{"location":"content/modul-1/2-variabler/#variabelnamn","title":"Variabelnamn","text":"<p>Ge alltid variabler tydliga f\u00f6rklarande namn, s\u00e5 att det tydligt framg\u00e5r vad variabeln ska anv\u00e4ndas till. Ett namn kan inneh\u00e5lla bokst\u00e4ver och siffror, men inte b\u00f6rja p\u00e5 en siffra. Det \u00e4r skillnad p\u00e5 sm\u00e5 och stora bokst\u00e4ver. </p> <p>Det finns m\u00e5nga olika s\u00e4tt att namnge variabler. I C# anv\u00e4nds camelCase f\u00f6r vanliga variabler. Inledande gemen (liten bokstav), d\u00e4r varje nytt ord i variabeln inleds med versal (stor bokstav). Inga mellanslag eller understreck. </p> <p>Det finns \u00e4ven en del ord som \u00e4r reserverade av C#, som inte kan anv\u00e4ndas som variabelnamn, dessa kallas nyckelord.</p> <pre><code>int maxValue;  // JA\nint MaxValue;  // NEJ, stor bokstav i b\u00f6rjan\nint maxvalue;  // NEJ, saknar stor bokstav p\u00e5 andra ordet\nint max_value; // NEJ, understreck\nint max value; // ERROR, inga mellanslag\nint int;       // ERROR, int \u00e4r ett reserverat nyckelord\n</code></pre> <p>Riktlinjer f\u00f6r namngivning av variabler:</p> <ul> <li> <p>I den h\u00e4r kursen f\u00e5r du v\u00e4lja sj\u00e4lv om du anv\u00e4nder svenska eller engelska variabelnamn. Men var konsekvent genom ditt projekt. Antingen \u00e4r alla variabelnamn i projektet p\u00e5 svenska, eller p\u00e5 engelska.</p> </li> <li> <p>Ha hellre ett lite l\u00e4ngre och beskrivande namn \u00e4n en mer eller mindre obegriplig f\u00f6rkortning. Ditt framtida jag kommer tacka dig n\u00e4r denne  l\u00e4ser kod du skrivit.</p> </li> <li> <p>Anv\u00e4nd camelCase.</p> </li> </ul>"},{"location":"content/modul-1/3-datatyper/","title":"Datatyper","text":"<p>Olika typer av variabler kan lagra olika typer av v\u00e4rden. Det \u00e4r lite som att man inte b\u00f6r t\u00f6mma saft i kakburken, eller f\u00f6rs\u00f6ka l\u00e4gga kakorna i saftflaskan. Dessa typer kallas datatyper.\u00a0</p> <p>Variablers datatyp talar om f\u00f6r kompilatorn vilka operationer som kan utf\u00f6ras f\u00f6r den aktuella variabeln. Olika datatyper tar ocks\u00e5 olika stor plats i minnet, s\u00e5 genom korrekt anv\u00e4ndande av datatyper kan man optimera minnesanv\u00e4ndningen. </p>"},{"location":"content/modul-1/3-datatyper/#primitiva-datatyper-i-c","title":"Primitiva datatyper i C#","text":"<p>Primitiva datatyper \u00e4r de grundl\u00e4ggande datatyperna som anv\u00e4nds f\u00f6r att lagra v\u00e4rden i ett program, och utg\u00f6r grunden f\u00f6r att skapa mer komplexa datatyper. Dessa kan skilja sig \u00e5t lite beroende p\u00e5 programmeringsspr\u00e5k. </p> <p>Tabellen nedan tar upp vanligt f\u00f6rekommande primitiva datatyper i C#.</p> Datatyp Beskrivning Storlek Intervall int Heltal 32 bits \u22122\u00b3\u00b9 till 2\u00b3\u00b9\u22121 long Heltal 64 bits \u22122\u2076\u00b3 till 2\u2076\u00b3\u22121 float Flyttal 32 bits \u22123,4\u00b710\u00b3\u2078 till 3,4\u00b710\u00b3\u2078 double Flyttal, dubbel precision 64 bits \u00b15,0\u00b710\u00b3\u00b2\u2074 till \u00b11,7\u00b710\u00b3\u2070\u2078 decimal Flyttal, h\u00f6g precision 128 bits 28 g\u00e4llande siffror string Sekvens av tecken 16 bits/tecken Ej applicerbart char Enskilt tecken 16 bits Ett enskilt tecken bool Boolean 8 bits Sant eller falskt"},{"location":"content/modul-1/3-datatyper/#flyttal","title":"Flyttal","text":"<p>Ett flyttal \u00e4r en datatyp som anv\u00e4nds f\u00f6r att representera decimaltal. Till skillnad fr\u00e5n heltal \u00e4r flyttal en approximation av ett decimaltal och kan d\u00e4rf\u00f6r inte representera alla decimaler exakt, utan ger en uppskattning av det verkliga v\u00e4rdet. Detta inneb\u00e4r att flyttal kan ha begr\u00e4nsad precision, vilket kan leda till avrundningsfel i ber\u00e4kningar. </p> <p>Nedan f\u00f6ljer ett exempel p\u00e5 s\u00e5dant avrundningsfel, som i grund och botten \u00e4r baserat p\u00e5 att datorn inte f\u00f6rst\u00e5r o\u00e4ndlig decimalutveckling. <pre><code>// V\u00e4rdet p\u00e5 variablen num borde vara 0,3.\ndouble num = 0.1 + 0.2; \n// Det kommer skrivas ut som 0,30000000000000004.\nConsole.WriteLine(num);\n</code></pre></p>"},{"location":"content/modul-1/3-datatyper/#char","title":"char","text":"<p>Namnet kommer fr\u00e5n engelskans character, och datatypen anv\u00e4nds f\u00f6r att representera enskilda tecken, exempelvis en bokstav. </p> <p>Datorn lagrar som bekant bara ettor och nollor, s\u00e5 varje tecken har en egen sifferkod, enligt en given teckentabell. Exempelvis ASCII och Unicode. </p> <p>Allts\u00e5 \u00e4r varje bokstav egentligen bara ett heltal f\u00f6r datorn. Exempelvis enligt b\u00e5da ovan n\u00e4mnda exempel s\u00e5 \u00e4r sifferkoden f\u00f6r lilla a lika med 97. Notera att f\u00f6r stora A \u00e4r den 65. <pre><code>// Man kan direkt spara en char som en integer\nint myInt = 'A';\nConsole.WriteLine(myInt); // Ger utskriften \"65\".\n\n// Sifferkoden kan anv\u00e4ndas f\u00f6r att \"casta\" en int till char.\nchar myChar = (char)97;\nConsole.WriteLine(myChar); // Ger utskriften \"a\".\n</code></pre></p>"},{"location":"content/modul-1/3-datatyper/#string","title":"string","text":"<p>En string \u00e4r en serie tecken, chars, efter varandra. Man kan komma \u00e5t enskilda tecken via dess index. <pre><code>string myString = \"Hejsan!\";\nConsole.WriteLine(myString[1]); // Ger utskriften \"e\".\n</code></pre></p>"},{"location":"content/modul-1/4-operatorer/","title":"Operatorer","text":"<p>Operatorer inom programmering fungerar som inom matematiken, ett skrivs\u00e4tt som symboliserar en viss funktion. Ett exempel p\u00e5 en operator \u00e4r plustecknet. I exemplet \"2 + 3\" inneb\u00e4r plustecknet att man ska addera v\u00e4rdet av de tv\u00e5 operanderna, allts\u00e5 tv\u00e5 och tre. </p> <p>Operatorer inom programmering kan delas in i olika kategorier baserat p\u00e5 deras funktion. </p>"},{"location":"content/modul-1/4-operatorer/#matematiska-operatorer","title":"Matematiska operatorer","text":"<p>\u00c4ven k\u00e4nt som aritmetiska operatorer.</p>"},{"location":"content/modul-1/4-operatorer/#addition-eller-konkatenering","title":"+\u2003Addition eller konkatenering","text":"<p>Plustecknet fungerar olika i olika situationer.  <pre><code>// Addition, l\u00e4gga ihop tal\nint a = 3 + 4; // a f\u00e5r v\u00e4rdet 7.\n\n// Konkatenering, om en eller fler av operanderna \u00e4r string \nstring b = \"Hej\" + \"d\u00e5\";  // b f\u00e5r v\u00e4rdet \"Hejd\u00e5\".\nstring c = \"Hej\" + 19;    // c f\u00e5r v\u00e4rdet \"Hej19\".\nstring d = \"3\" + 4;       // d f\u00e5r v\u00e4rdet 34.\n</code></pre></p>"},{"location":"content/modul-1/4-operatorer/#-subtraktion","title":"-\u2003Subtraktion","text":"<pre><code>int a = 10 - 7; // a f\u00e5r v\u00e4rdet 3.\n\n// Minustecknet kan ocks\u00e5 anv\u00e4ndas f\u00f6r att multiplicera med -1.\nint b = -a; // b f\u00e5r v\u00e4rdet -3.\n</code></pre>"},{"location":"content/modul-1/4-operatorer/#multiplikation","title":"*\u2003Multiplikation","text":"<pre><code>int a = 3 * 2; // a f\u00e5r v\u00e4rdet 6.\n</code></pre>"},{"location":"content/modul-1/4-operatorer/#division","title":"/\u2003Division","text":"<p>Om man utf\u00f6r heltalsdivision, allts\u00e5 man delar ett heltal med ett annat heltal blir resultatet alltid ett heltal, decimalerna trunkeras(sk\u00e4rs) bort. <pre><code>int a = 12 / 3;    // a f\u00e5r v\u00e4rdet 4.\ndouble b = 5 / 2;  // b f\u00e5r v\u00e4rdet 2. \u00c4ven om det sparas i en double.\n\n// Om EN av operanderna \u00e4r i decimalform blir ocks\u00e5 svaret med decimaler.\ndouble c = 5.0 / 2; // c f\u00e5r v\u00e4rdet 2.5 \n</code></pre></p>"},{"location":"content/modul-1/4-operatorer/#modulus","title":"%\u2003Modulus","text":"<p>Modulusber\u00e4kning ger resten vid division.  <pre><code>int a = 7 % 3; // a f\u00e5r v\u00e4rdet 1. Eftersom 3 g\u00e5r tv\u00e5 g\u00e5nger i 7.\nint b = 8 % 4; // b f\u00e5r v\u00e4rdet 0. D\u00e5 divisionen g\u00e5r j\u00e4mnt ut.\n</code></pre></p>"},{"location":"content/modul-1/4-operatorer/#tilldelande-operatorer","title":"Tilldelande operatorer","text":""},{"location":"content/modul-1/4-operatorer/#tilldelning","title":"=\u2003Tilldelning","text":"<p>Likhetstecknet anv\u00e4nds som tilldelningsoperator, allts\u00e5 att s\u00e4tta ett v\u00e4rde p\u00e5 en variabel. <pre><code>int a = 5;\nstring b = \"Hej\";\nbool c = True;\n</code></pre></p>"},{"location":"content/modul-1/4-operatorer/#addera-och-tilldela","title":"+=\u2003Addera och tilldela","text":"<pre><code>int a = 12; // a tilldelas v\u00e4rdet 12 fr\u00e5n b\u00f6rjan.\n\n// \u00d6ka v\u00e4rdet p\u00e5 a med 8, vanlig tilldelning.\na = a + 8; // a f\u00e5r v\u00e4rdet 20. \n\n// \u00d6kar ocks\u00e5 v\u00e4rdet p\u00e5 variabeln a med 8, f\u00f6rkortat skrivs\u00e4tt.\na += 8; // a f\u00e5r v\u00e4rdet 28.\n</code></pre>"},{"location":"content/modul-1/4-operatorer/#-subtrahera-och-tilldela","title":"-=\u2003Subtrahera och tilldela","text":"<pre><code>int a = 12; // a tilldelas v\u00e4rdet 12 fr\u00e5n b\u00f6rjan.\n\na -= 10; // a f\u00e5r v\u00e4rdet 2. a = a - 10.\n</code></pre>"},{"location":"content/modul-1/4-operatorer/#-oka-eller-minska-med-ett","title":"++, --\u2003\u00d6ka eller minska med ett","text":"<p>Det \u00e4r vanligt f\u00f6rekommande att man beh\u00f6ver \u00f6ka eller minska variabelns v\u00e4rde med ett, det finns d\u00e5 en ytterligare f\u00f6rkortad tilldelningsoperator.  <pre><code>int a = 12; // a tilldelas v\u00e4rdet 12 fr\u00e5n b\u00f6rjan.\n\na++; // a f\u00e5r v\u00e4rdet 13. F\u00f6rtkortning av a = a + 1;\na--; // a f\u00e5r v\u00e4rdet 12 igen. F\u00f6rtkortning av a = a - 1;\n</code></pre> \u00d6kning respektive minskning med ett kan anv\u00e4nds antingen f\u00f6re eller efter variabeln vars v\u00e4rde ska p\u00e5verkas, detta avg\u00f6r vilket v\u00e4rde som returneras. <pre><code>int a = 10;\n\n// Skriver ut v\u00e4rdet p\u00e5 a, SEN \u00f6ka med 1.\nConsole.WriteLine(a++); // Ger utskriften 10. \n\n// \u00d6kar v\u00e4rdet p\u00e5 a med 1 F\u00d6RST, sen skriver ut v\u00e4rdet.\nConsole.WriteLine(++a); // Ger utskriften 12.\n</code></pre></p>"},{"location":"content/modul-1/4-operatorer/#multiplicera-och-tilldela","title":"*=\u2003Multiplicera och tilldela","text":"<pre><code>int a = 12; // a tilldelas v\u00e4rdet 12 fr\u00e5n b\u00f6rjan.\n\na *= 2; // a f\u00e5r v\u00e4rdet 24. a = 12 * 2.\n</code></pre>"},{"location":"content/modul-1/4-operatorer/#dividera-och-tilldela","title":"/=\u2003Dividera och tilldela","text":"<pre><code>int a = 12; // a tilldelas v\u00e4rdet 12 fr\u00e5n b\u00f6rjan.\n\na /= 2; // a f\u00e5r v\u00e4rdet 6. a = 12 / 2.\n</code></pre>"},{"location":"content/modul-1/4-operatorer/#modulus-och-tilldela","title":"%=\u2003Modulus och tilldela","text":"<pre><code>int a = 12; // a tilldelas v\u00e4rdet 12 fr\u00e5n b\u00f6rjan.\n\na %= 2; // a f\u00e5r v\u00e4rdet 0. Eftersom 12 % 2 = 0.\n</code></pre>"},{"location":"content/modul-1/4-operatorer/#jamforandeboolska-operatorer","title":"J\u00e4mf\u00f6rande/Boolska operatorer","text":"<p>J\u00e4mf\u00f6rande operatorer ger upphov till en boolskt v\u00e4rde, sant eller falskt. Dessa anv\u00e4nds oftast i villkorssatser, exempelvis if-satser, snarare \u00e4n att tilldelas eller skrivas ut direkt som i vissa exempel nedan.</p>"},{"location":"content/modul-1/4-operatorer/#mindre-an-storre-an","title":"&lt;,&gt;\u2003Mindre \u00e4n, st\u00f6rre \u00e4n","text":"<pre><code>bool a = 10 &gt; 6; // a f\u00e5r v\u00e4rdet true.\n\nint b = 5;\nConsole.WriteLine(b &lt; 3); // Ger utskriften False.\n</code></pre>"},{"location":"content/modul-1/4-operatorer/#mindre-an-eller-lika-med-storre-an-eller-lika-med","title":"&lt;=, &gt;=\u2003Mindre \u00e4n eller lika med, st\u00f6rre \u00e4n eller lika med","text":"<pre><code>bool a = 6 &gt;= 6; // a f\u00e5r v\u00e4rdet true.\n\nint b = 5;\nConsole.WriteLine(b &lt;= 3); // Ger utskriften False.\n</code></pre>"},{"location":"content/modul-1/4-operatorer/#lika-med","title":"==\u2003Lika med","text":"<pre><code>bool a = 3 == 4; // a f\u00e5r v\u00e4rdet False, eftersom 3 inte \u00e4r 4.\n</code></pre>"},{"location":"content/modul-1/4-operatorer/#skiljt-fran","title":"!=\u2003Skiljt fr\u00e5n","text":"<pre><code>Console.WriteLine(5 != 20); // Ger utskriften True.\n</code></pre>"},{"location":"content/modul-1/4-operatorer/#logiska-operatorer","title":"Logiska operatorer","text":""},{"location":"content/modul-1/4-operatorer/#and-och","title":"&amp;&amp;\u2003And (Och)","text":"<p>Och-operatorn ger resultatet True om b\u00e5da operanderna \u00e4r True, allts\u00e5 om det \u00e4r True p\u00e5 b\u00e5da sidorna om &amp;&amp;. <pre><code>int a = 12;\n\n// 5 \u00e4r st\u00f6rre \u00e4n 2 OCH 8 \u00e4r mindre \u00e4n a.\nConsole.WriteLine(5 &gt; 2 &amp;&amp; 8 &lt; a); // Ger utskriften True.\n\nConsole.WriteLine(a == 12 &amp;&amp; a &lt; 10); // ger utskriften False.\n</code></pre></p>"},{"location":"content/modul-1/4-operatorer/#or-eller","title":"||\u2003Or (Eller)","text":"<p>Eller-operatorn ger resultatet True om minst en av operanderna \u00e4r True. <pre><code>bool a = True; \n\n// a \u00e4r True ELLER 5 \u00e4r lika med 19. Beh\u00f6ver inte skriva a == true.\nConsole.WriteLine(a || 5 == 19); // Ger utskriften True. a \u00e4r true.\n\n// H\u00e4r anv\u00e4nds det boolska v\u00e4rdet false direkt \nConsole.WriteLine(false || 6 &gt; 0 ); // Ger utskriften False. B\u00e5da \u00e4r falska.\n\n//V\u00e4rdet fr\u00e5n en logisk operator kan ocks\u00e5 sparas i en variabel\nbool b = 5 &lt; 10 || a; // b f\u00e5r v\u00e4rdet true, b\u00e5da \u00e4r true.\n</code></pre></p>"},{"location":"content/modul-1/4-operatorer/#prioriteringsordning","title":"Prioriteringsordning","text":"<p>Inom programmering fungerar prioriteringsordning ganska likt matematiken, olika operatorer har olika prioritet, och de med h\u00f6gst prioritet utv\u00e4rderas f\u00f6rst. Ut\u00f6ver detta kan parenteser anv\u00e4ndas f\u00f6r att styra ordningen.</p> <p>Lite f\u00f6renklat kan prioriteringsordningen s\u00e4gas vara:</p>"},{"location":"content/modul-1/4-operatorer/#1-raknesatt","title":"1. R\u00e4knes\u00e4tt","text":"<p>R\u00e4knes\u00e4tten har ocks\u00e5 en inb\u00f6rdes prioriteringsordning precis som i matematiken. 1. Postfix ++ och -- 2. Prefix ++ och --, \u00e4ven andra unit\u00e4ra operatorer s\u00e5som - och ! 3. Multiplikation, Division och Modulus 4. Addition och Subtraktion</p> <pre><code>int a = 3 + 4 * 5; // a f\u00e5r v\u00e4rdet 23. Multiplikation h\u00f6gre prioritet.\n\nint b = 10;\nConsole.WriteLine(b++ * 2); // Ger utskriften 20. b blir 11 n\u00e4sta rad och fram\u00e5t.\n\nConsole.WriteLine(++b * 2); // Ger utskriften 24. b blir 12, sen g\u00e5nger 2.\n</code></pre>"},{"location":"content/modul-1/4-operatorer/#2-jamforelser","title":"2. J\u00e4mf\u00f6relser","text":"<p>Mindre \u00e4n, st\u00f6rre \u00e4n, lika med, etc.</p>"},{"location":"content/modul-1/4-operatorer/#3-logiska-operatorer","title":"3. Logiska operatorer","text":"<p>Innefattar AND och OR. Notera att AND har h\u00f6gre prioritet \u00e4n OR. <pre><code>// H\u00e4r utv\u00e4rderas \"false &amp;&amp; true\" till false, sen \"false || true\" till true. \nConsole.WriteLine(false &amp;&amp; true || true); // Ger utskriften True.\n</code></pre></p>"},{"location":"content/modul-1/4-operatorer/#4-tilldelningar","title":"4. Tilldelningar","text":"<p>B\u00e5de vanlig tilldelning med =, men ocks\u00e5 de tilldelande aritmetiska operatornerna exempelvis +=.</p>"},{"location":"content/modul-1/5-typkonvertering/","title":"Typkonvertering","text":"<p>Att omvandla information fr\u00e5n en datatyp till en annan kan kallas f\u00f6r att typkonvertera, att byta typ.</p>"},{"location":"content/modul-1/5-typkonvertering/#implicit-konvertering","title":"Implicit konvertering","text":"<p>I vissa situationer kan typkonvertering ske utan att en specifik operator anv\u00e4nds, bara genom att tilldela informationen till en variabel med den \u00f6nskade datatypen. Detta \u00e4r generellt genomf\u00f6rbart n\u00e4r ingen information eller precision g\u00e5r f\u00f6rlorad.</p> <p>Heltalsv\u00e4rdet 3 kan utan vidare g\u00f6ras om till flyttal. Fr\u00e5n en datatyp med mindre information/precision till en med mer. <pre><code>int a = 3;\n\n// V\u00e4rdet fr\u00e5n integer a sparas som flyttal\nfloat b = a;\ndouble c = a;\n</code></pre></p> <p>Att implicit konvertera \u00e5t andra h\u00e5llet, fr\u00e5n en datatyp med mer information/precision, g\u00e5r inte att g\u00f6ra implicit. Exempelvis kan inte 4,3 utan vidare skrivas som ett heltal. <pre><code>double a = 4.3;\n\n// B\u00e5da f\u00f6ljande rader ger upphov till kompileringsfel\nint b = a; // ERROR\nfloat c = a; // ERROR, notera att float har l\u00e4gre precision \u00e4n double\n</code></pre></p>"},{"location":"content/modul-1/5-typkonvertering/#explicit-konvertering-casting","title":"Explicit konvertering - Casting","text":"<p>N\u00e4r en typkonvertering inneb\u00e4r f\u00f6rlust av precision, exempelvis fr\u00e5n float till int, kan ibland casting, eller type casting, anv\u00e4ndas. Jag har inte hittat ett fint svenskt ord. </p> <p>Detta inneb\u00e4r att man i k\u00e4llkoden skriver den datatyp som informationen ska konverteras till inom parenteser innan v\u00e4rdet som ska konverteras <pre><code>float a = 9.8f;\n\n// Konvertera v\u00e4rdet i \"a\" till int, tilldela till b.\nint b = (int)a\n\n// Notera, avrundar INTE. Trunkerar, allts\u00e5 sk\u00e4r bort decimaler.\nConsole.WriteLine(b) // Ger utskriften 9.\n</code></pre></p>"},{"location":"content/modul-1/5-typkonvertering/#hjalpmetoder","title":"Hj\u00e4lpmetoder","text":"<p>Det finns lite hj\u00e4lpmetoder som kan l\u00f6sa konvertering n\u00e4r inte casting fungerar, ofta handlar det om att konvertera en str\u00e4ng till ett tal.</p>"},{"location":"content/modul-1/5-typkonvertering/#parse","title":"Parse()","text":"<p>Parse \u00e4r en metod som finns i de flesta numeriska datatyper, s\u00e5som int, float, double och s\u00e5 vidare. Denna tar emot en str\u00e4ng och f\u00f6rs\u00f6ker konvertera till ett tal. Om konverteringen misslyckas ger det upphov till ett exekveringsfel, och programmet \"kraschar\".</p> <p>Exempelvis kan str\u00e4ngen \"19\" konverteras till ett heltal via metoden int.Parse(). <pre><code>// Notera att detta \u00e4r en str\u00e4ng med 1 och 9, inte ett tal.\nstring text = \"19\"; \n\n// Anropar Parse via datatypen int f\u00f6r att konvertera till int.\nint number = int.Parse(text);\n\n// Parse finns \u00e4ven tillg\u00e4nglig f\u00f6r double.\ndouble number2 = double.Parse(\"12,34\");\n\n// Om man skickar in trams uppst\u00e5r exekveringsfel.\nfloat number3 = float.Parse(\"Trams\"); //ERROR\n</code></pre></p> <p>Tips</p> <p>Ett annat klassiskt s\u00e4tt att uppn\u00e5 exekveringsfel med metoden int.Parse() \u00e4r genom att skriva in \"2147483648\", allts\u00e5 dryga tv\u00e5 miljarder.</p> <p>Detta f\u00f6r att v\u00e4rdet \u00f6verskrider den maximala storleken f\u00f6r en int.</p>"},{"location":"content/modul-1/5-typkonvertering/#tryparse","title":"TryParse()","text":"<p>F\u00f6r att hantera situationer d\u00e4r trams kan uppst\u00e5, se k\u00e4llkoden ovan, kan metoden TryParse() anv\u00e4ndas. Den \u00e4r precis som Parse() men ger inga exekveringsfel om den tar emot felaktiga argument, s\u00e5som \"Trams\". </p> <p>I Likhet med Parse() finns TryParse() tillg\u00e4nglig i numeriska datatyper. D\u00e4remot \u00e4r syntaxen lite annorlunda, eftersom TryParse() g\u00f6r tv\u00e5 saker, ber\u00e4ttar om det gick att konvertera, och ger oss det konverterade v\u00e4rdet.</p> <p>Exempelvis s\u00e5 kan str\u00e4ngen \"19\" konverteras, igen. <pre><code>string text = \"19\";\nint number; // H\u00e4r ska resultatet av konverteringen sparas\nbool isNumber = int.TryParse(text, out number);\n\nConsole.WriteLine(number); // Ger utskriften 19.\nConsole.WriteLine(isNumber); // Ger utskriften True.\n</code></pre> Notera hur vi f\u00e5r ut resultatet fr\u00e5n konverteringen, allts\u00e5 heltalet 19, via \"out number\" i exemplet. Metoden i sig returnerar en bool som talar om huruvida konverteringen var framg\u00e5ngsrik, i ovanst\u00e5ende exempel blir den True. </p> <p>Om konvertering misslyckas returneras ist\u00e4llet False. Resultatet fr\u00e5n konverteringen, som d\u00e5 inte kunde g\u00f6ras, blir v\u00e4rdet 0. Se nedan. <pre><code>string text = \"Trams\";\nint number; // H\u00e4r ska resultatet av konverteringen sparas\nbool isNumber = int.TryParse(text, out number);\n\nConsole.WriteLine(number); // Ger utskriften 0.\nConsole.WriteLine(isNumber); // Ger utskriften False.\n</code></pre></p>"},{"location":"content/modul-1/5-typkonvertering/#tostring","title":"ToString()","text":"<p>I vissa situationer har man behov av att konvertera n\u00e5got till en str\u00e4ng, metoden ToString() kan appliceras p\u00e5 det mesta.</p> <p>Notera hur den anropas genom att skriva \".ToString()\" efter det som ska konverteras. <pre><code>double a = 123.456;\nstring b = a.ToString(); // b tilldelas str\u00e4ngen \"123,456\".\n</code></pre></p>"},{"location":"content/modul-1/5-typkonvertering/#hjalpklassen-convert","title":"Hj\u00e4lpklassen Convert","text":"<p>Klassen Convert \u00e4r som en samlingsklass som inneh\u00e5ller flertalet konverteringsmetoder p\u00e5 samma st\u00e4lle. Dessa anropar egentligen bara Parse utan att vi ser det.</p> <p>\u00d6verlag rekommenderas Parse() eller TryParse(). </p> <p>Med hj\u00e4lp av metoder fr\u00e5n klassen Convert kan liknande konverteringar som ovan genomf\u00f6ras. <pre><code>// G\u00e5r alldels utm\u00e4rkt.\nint a = Convert.ToInt32(\"19\"); \n\n// Notera att namngivningen f\u00f6r float \u00e4r lite annorlunda\nfloat b = Convert.ToSingle(\"1,2\"); \n</code></pre></p>"},{"location":"content/modul-1/6-slump/","title":"Slumptal","text":"<p>F\u00f6r att generera slumpade tal i C# kan den f\u00e4rdiga klassen Random med tillh\u00f6rande metoder anv\u00e4ndas. Det \u00e4r v\u00e4rt att notera att det s\u00e5klart inte \u00e4r sann slump i strikt mening. </p> <p>Enligt Microsoft representerar klassen Random en pseudo-random nummergenerator som ger en f\u00f6ljd av nummer som uppfyller vissa statistiska krav f\u00f6r slumpm\u00e4ssighet. Torrt och bra.</p>"},{"location":"content/modul-1/6-slump/#slumpgenerator","title":"Slumpgenerator","text":"<p>F\u00f6r att komma \u00e5t metoderna beh\u00f6ver man starta en \"slumpgenerator\", i exemplet nedan namnges den till \"generator\", denna anv\u00e4nds sen f\u00f6r att generera slumptal. <pre><code>Random generator = new Random();\n</code></pre></p>"},{"location":"content/modul-1/6-slump/#heltal","title":"Heltal","text":"<p>Metoden Next() returnerar heltal.</p> <p>Metoden kan anv\u00e4ndas antingen utan argument, med ett argument f\u00f6r \u00f6vre gr\u00e4ns, eller med tv\u00e5 argument som s\u00e4tter b\u00e5de undre och \u00f6vre gr\u00e4ns. Notera att den undre gr\u00e4nsen ing\u00e5r i intervallet, men inte den \u00f6vre.</p> <pre><code>// Slumpar ett heltal som \u00e4r mellan 0 och maxv\u00e4rdet f\u00f6r int.\nint a = generator.Next();\n\n// Slumpar ett heltal som \u00e4r 0, 1, 2 eller 3. \nint b = generator.Next(4);\n\n// Slumpar ett heltal som \u00e4r 2, 3, eller 4.\nint c = generator.Next(2, 5);\n</code></pre>"},{"location":"content/modul-1/6-slump/#decimaltal","title":"Decimaltal","text":"<p>Metoden NextDouble() ger ett decimaltal som \u00e4r lika med eller st\u00f6rre \u00e4n noll, men mindre \u00e4n ett. Beh\u00f6ver man ett decimaltal som \u00e4r st\u00f6rre \u00e4n ett kan man multiplicera. <pre><code>// Slumpar en double mellan 0 och 1.\ndouble d = generator.NextDouble();\n\n// Ex. 0,3456... blir 34,56... \ndouble e = generator.NextDouble() * 100;\n</code></pre></p>"},{"location":"content/modul-1/begrepp1/","title":"Begrepp - Modul 1","text":""},{"location":"content/modul-1/begrepp1/#datorer-och-programmering","title":"Datorer och programmering","text":"<p>Exekvera: Att k\u00f6ra ett datorprogram.</p> <p>Indata: Information till datorn fr\u00e5n t.ex. tangentbord och mus.</p> <p>Utdata: Information fr\u00e5n datorn fr\u00e5n t.ex. sk\u00e4rm och h\u00f6gtalare.</p> <p>Processor: \u00c4ven k\u00e4nt som CPU, datorns \"hj\u00e4rna\", exekverar programmet.</p> <p>Minne: Lagrar information under programmets k\u00f6rtid.</p> <p>K\u00e4llkod: Instruktioner till en dator, skrivna med ett programmeringsspr\u00e5k.</p> <p>Maskinkod: Instruktioner till dator skrivet som en serie av ettor och nollor.</p> <p>H\u00e5rdvara: Samlingsnamn f\u00f6r en dators fysiska delar.</p> <p>Syntax: Regler f\u00f6r hur ett programmeringsspr\u00e5k ska skrivas.</p> <p>Kompilering: K\u00e4llkoden \u00f6vers\u00e4tts till maskinkod innan programmet exekveras.</p> <p>Interpretering: K\u00e4llkoden \u00f6vers\u00e4tts till maskinkod medans programmet exekveras.</p> <p>L\u00e5gniv\u00e5spr\u00e5k: Programmeringsspr\u00e5k n\u00e4ra maskinkod som ger detaljerad kontroll \u00f6ver h\u00e5rdvaran, till exempel assembler.</p> <p>H\u00f6gniv\u00e5spr\u00e5k: Programmeringsspr\u00e5k n\u00e4rmare m\u00e4nskligt spr\u00e5k som \u00e4r l\u00e4ttare att l\u00e4sa och skriva, till exempel Python, Java och C#.</p> <p>IDE (Integrated Development Environment): En programvara som kombinerar verktyg som kodredigerare, kompilator och debugger f\u00f6r att underl\u00e4tta programmering.</p>"},{"location":"content/modul-1/begrepp1/#variabler","title":"Variabler","text":"<p>Variabel: Har ett namn och anv\u00e4nds f\u00f6r att lagra v\u00e4rden.</p> <p>Deklarera: Att skapa en variabel, med namn och datatyp.</p> <p>Tilldelning: Att ge en variabel ett v\u00e4rde.</p> <p>Initiering: Deklaration och tilldelning i samma sats (p\u00e5 samma rad).</p> <p>Sats: En instruktion som utf\u00f6r n\u00e5got, vanligtvis en rad, avslutas med semikolon.</p> <p>Camel case: Variabelnamn som best\u00e5r av flera ord, f\u00f6rsta ordet har liten bokstav, efterf\u00f6ljande ord har stor begynnelsebokstav, t.ex. minFinaVariabel.</p> <p>Nyckelord: F\u00f6rdefinierade ord i ett programmeringsspr\u00e5k som har en speciell betydelse och inte kan anv\u00e4ndas till n\u00e5got annat, t.ex. if, while och for.</p>"},{"location":"content/modul-1/begrepp1/#datatyper","title":"Datatyper","text":"<p>Datatyp: Kategorisering av data som anger vilken typ av v\u00e4rde en variabel kan inneh\u00e5lla, till exempel heltal eller text.</p> <p>Primitiv datatyp: En grundl\u00e4ggande datatyp som st\u00f6ds direkt av programmeringsspr\u00e5ket, till exempel int, float och char.</p> <p>Flyttal: En datatyp f\u00f6r tal med decimaler, till exempel 3.14 eller -0.001.</p> <p>Char: En datatyp som representerar ett enskilt tecken, till exempel 'A' eller '5'.</p> <p>Bool: En datatyp som representerar tv\u00e5 m\u00f6jliga v\u00e4rden: sant (true) eller falskt (false).</p>"},{"location":"content/modul-1/begrepp1/#typkonvertering","title":"Typkonvertering","text":"<p>Typkonvertering: Att omvandla en variabel fr\u00e5n en datatyp till en annan.</p> <p>Implicit konvertering: Automatisk omvandling av en datatyp till en annan utan n\u00e5gon syntax.</p> <p>Explicit konvertering/Casting/Type casting: Att manuellt omvandla en variabel fr\u00e5n en datatyp till en annan med hj\u00e4lp av en specifik syntax.</p> <p>Parse(): En metod som omvandlar en str\u00e4ng till en annan datatyp, till exempel fr\u00e5n text till ett tal.</p> <p>TryParse(): En metod som f\u00f6rs\u00f6ker omvandla en str\u00e4ng till en annan datatyp och returnerar ett boolskt v\u00e4rde som indikerar om konverteringen lyckades.</p> <p>Exekveringsfel: Ett fel som uppst\u00e5r n\u00e4r ett program k\u00f6rs, till exempel en division med noll.</p>"},{"location":"content/modul-1/begrepp1/#operatorer","title":"Operatorer","text":"<p>Operator: Ett tecken eller en symbol som utf\u00f6r en operation p\u00e5 en eller flera operander, till exempel +.</p> <p>Operand: Ett v\u00e4rde eller en variabel som en operator utf\u00f6r en operation p\u00e5.</p> <p>Konkatenering: Att sl\u00e5 samman tv\u00e5 eller flera str\u00e4ngar till en enda str\u00e4ng.</p> <p>Trunkering: Att ta bort decimaldelen av ett flyttal, vilket resulterar i ett heltal.</p>"},{"location":"content/modul-1/l%C3%B6sn1/","title":"L\u00f6sningsf\u00f6rslag - Modul 1","text":""},{"location":"content/modul-1/l%C3%B6sn1/#uppgift-1","title":"Uppgift 1","text":"<pre><code>static void Main(string[] args)\n{\n    Console.WriteLine(\"Hello World!\");\n}\n</code></pre>"},{"location":"content/modul-1/l%C3%B6sn1/#uppgift-2","title":"Uppgift 2","text":"<pre><code>static void Main(string[] args)\n{\n    Console.WriteLine(\"Det h\u00e4r programmet skriver ut text.\");\n    Console.WriteLine(\"Men p\u00e5 flera rader.\");\n    Console.WriteLine();\n    Console.WriteLine(\"Och ibland med helt tomma rader.\");\n}\n</code></pre>"},{"location":"content/modul-1/l%C3%B6sn1/#uppgift-3","title":"Uppgift 3","text":"<pre><code>static void Main(string[] args)\n{\n    Console.WriteLine(\"Vissa tecken \u00e4r \\\"reserverade\\\" av programspr\u00e5ket.\");\n}\n</code></pre>"},{"location":"content/modul-1/l%C3%B6sn1/#uppgift-4","title":"Uppgift 4","text":"<pre><code>static void Main(string[] args)\n{\n    Console.WriteLine(\"  / \\\\\");\n    Console.WriteLine(\" /   \\\\\");\n    Console.WriteLine(\"/_____\\\\\");\n}\n</code></pre>"},{"location":"content/modul-1/l%C3%B6sn1/#uppgift-5","title":"Uppgift 5","text":"<pre><code>static void Main(string[] args)\n{\n    Console.ForegroundColor = ConsoleColor.Blue;\n    Console.BackgroundColor = ConsoleColor.Yellow;\n    Console.Clear();\n    Console.WriteLine(\"Bl\u00e5 text med gul bakgrund.\");\n\n    Console.ResetColor();\n    Console.WriteLine(\"Tryck Enter f\u00f6r att \u00e4ndra f\u00e4rg.\");\n    Console.ReadLine();\n\n    Console.ForegroundColor = ConsoleColor.Red;\n    Console.BackgroundColor = ConsoleColor.White;\n    Console.Clear();\n    Console.WriteLine(\"R\u00f6d text med vit bakgrund.\");\n    Console.ResetColor();\n}\n</code></pre>"},{"location":"content/modul-1/l%C3%B6sn1/#uppgift-6","title":"Uppgift 6","text":"<pre><code>static void Main(string[] args)\n{\n    Console.Beep(440, 500); // A\n    Console.Beep(494, 500); // B\n    Console.Beep(523, 500); // C\n    Console.Beep(587, 500); // D\n}\n</code></pre>"},{"location":"content/modul-1/l%C3%B6sn1/#uppgift-7","title":"Uppgift 7","text":"<pre><code>static void Main(string[] args)\n{\n    int wait = 600; //V\u00e4nta i 0,6 sekunder mellan varje ord\n    Console.Write(\"Hej \");\n    Thread.Sleep(wait);\n    Console.Write(\"p\u00e5 \");\n    Thread.Sleep(wait);\n    Console.Write(\"dig!\");\n}\n</code></pre>"},{"location":"content/modul-1/l%C3%B6sn1/#uppgift-8","title":"Uppgift 8","text":"<pre><code>static void Main(string[] args)\n{\n    Console.Write(\"Vad heter du? \");\n    string namn = Console.ReadLine();\n\n    Console.Write(\"Hur gammal \u00e4r du? \");\n    string \u00e5lder = Console.ReadLine();\n\n    Console.Write(\"Vad \u00e4r din favoritmat? \");\n    string favoritmat = Console.ReadLine();\n\n    Console.WriteLine($\"Hej vad trevligt att tr\u00e4ffas {namn}, du \u00e4r {\u00e5lder} \u00e5r gammal och gillar {favoritmat}. Hoppas du f\u00e5r en trevlig dag!\");\n}\n</code></pre>"},{"location":"content/modul-1/l%C3%B6sn1/#uppgift-9","title":"Uppgift 9","text":"<pre><code>static void Main(string[] args)\n{\n    Console.Write(\"Vilket \u00e5r \u00e4r det nu? \");\n    int nuvarande\u00c5r = int.Parse(Console.ReadLine());\n\n    int f\u00f6rra\u00c5ret = nuvarande\u00c5r - 1;\n    int omTio\u00c5r = nuvarande\u00c5r + 10;\n\n    Console.WriteLine($\"F\u00f6rra \u00e5ret var det {f\u00f6rra\u00c5ret}, och om tio \u00e5r \u00e4r det {omTio\u00c5r}.\");\n}\n</code></pre>"},{"location":"content/modul-1/l%C3%B6sn1/#uppgift-10","title":"Uppgift 10","text":"<pre><code>static void Main(string[] args)\n{\n    Console.Write(\"Skriv in f\u00f6rsta talet: \");\n    double tal1 = double.Parse(Console.ReadLine());\n\n    Console.Write(\"Skriv in andra talet: \");\n    double tal2 = double.Parse(Console.ReadLine());\n\n    double differens = tal1 - tal2;\n    double tal1Upph\u00f6jtTillTal2 = Math.Pow(tal1, tal2);\n    double tal2Upph\u00f6jtTillTal1 = Math.Pow(tal2, tal1);\n\n    Console.WriteLine($\"Differensen mellan talen \u00e4r {differens}.\");\n    Console.WriteLine($\"{tal1} upph\u00f6jt till {tal2} \u00e4r {tal1Upph\u00f6jtTillTal2}.\");\n    Console.WriteLine($\"{tal2} upph\u00f6jt till {tal1} \u00e4r {tal2Upph\u00f6jtTillTal1}.\");\n}\n</code></pre>"},{"location":"content/modul-1/l%C3%B6sn1/#uppgift-11","title":"Uppgift 11","text":"<pre><code>static void Main(string[] args)\n{\n    Console.Write(\"Skriv in f\u00f6rsta talet: \");\n    double tal1 = double.Parse(Console.ReadLine());\n\n    Console.Write(\"Skriv in andra talet: \");\n    double tal2 = double.Parse(Console.ReadLine());\n\n    Console.Write(\"Skriv in tredje talet: \");\n    double tal3 = double.Parse(Console.ReadLine());\n\n    double summa = tal1 + tal2 + tal3;\n    double produkt = tal1 * tal2 * tal3;\n    double medelv\u00e4rde = summa / 3;\n\n    Console.WriteLine($\"Summan av talen \u00e4r {Math.Round(summa,3)}.\");\n    Console.WriteLine($\"Produkten av talen \u00e4r {Math.Round(produkt, 3)}.\");\n    Console.WriteLine($\"Medelv\u00e4rdet av talen \u00e4r {Math.Round(medelv\u00e4rde, 3)}.\");\n}\n</code></pre>"},{"location":"content/modul-1/l%C3%B6sn1/#uppgift-12","title":"Uppgift 12","text":"<pre><code>Console.Write(\"Skriv in f\u00f6rsta talet: \");\ndouble tal1 = double.Parse(Console.ReadLine());\n\nConsole.Write(\"Skriv in andra talet: \");\ndouble tal2 = double.Parse(Console.ReadLine());\n\ndouble addition = tal1 + tal2;\ndouble subtraktion1 = tal1 - tal2;\ndouble subtraktion2 = tal2 - tal1;\ndouble multiplikation = tal1 * tal2;\ndouble division1 = tal1 / tal2;\ndouble division2 = tal2 / tal1;\n\nConsole.WriteLine($\"Addition: {tal1} + {tal2} = {addition}\");\nConsole.WriteLine($\"Subtraktion (tal1 - tal2): {tal1} - {tal2} = {subtraktion1}\");\nConsole.WriteLine($\"Subtraktion (tal2 - tal1): {tal2} - {tal1} = {subtraktion2}\");\nConsole.WriteLine($\"Multiplikation: {tal1} * {tal2} = {multiplikation}\");\nConsole.WriteLine($\"Division (tal1 / tal2): {tal1} / {tal2} = {division1}\");\nConsole.WriteLine($\"Division (tal2 / tal1): {tal2} / {tal1} = {division2}\");\n</code></pre>"},{"location":"content/modul-1/l%C3%B6sn1/#uppgift-13","title":"Uppgift 13","text":"<pre><code>static void Main(string[] args)\n{\n    Console.Write(\"Ange radien p\u00e5 cirkeln: \");\n    bool giltigtTal = false;\n    giltigtTal = double.TryParse(Console.ReadLine(), out double radie);\n\n    if (giltigtTal)\n    {\n        double area = Math.PI * Math.Pow(radie, 2);\n        double omkrets = 2 * Math.PI * radie;\n\n        Console.WriteLine($\"Arean p\u00e5 cirkeln \u00e4r {area:F2}.\");\n        Console.WriteLine($\"Omkretsen p\u00e5 cirkeln \u00e4r {omkrets:F2}.\");\n    }\n    else\n    {\n        Console.WriteLine(\"Felaktig inmatning, f\u00f6rs\u00f6k igen.\");\n    }\n}\n</code></pre>"},{"location":"content/modul-1/l%C3%B6sn1/#uppgift-14","title":"Uppgift 14","text":"<pre><code>static void Main(string[] args)\n{\n    Console.Write(\"Hur mycket pengar s\u00e4tter du in? \");\n    double startKapital = double.Parse(Console.ReadLine());\n\n    Console.Write(\"Vad \u00e4r r\u00e4ntan (i procent)? \");\n    double r\u00e4nta = double.Parse(Console.ReadLine()) / 100;\n\n    Console.Write(\"Hur m\u00e5nga \u00e5r ska pengarna st\u00e5? \");\n    int tid = int.Parse(Console.ReadLine());\n\n    double slutKapital = startKapital * Math.Pow(1 + r\u00e4nta, tid);\n\n    Console.WriteLine($\"Efter {tid} \u00e5r kommer du att ha {slutKapital} kr p\u00e5 kontot.\");\n}\n</code></pre>"},{"location":"content/modul-1/l%C3%B6sn1/#uppgift-15","title":"Uppgift 15","text":"<pre><code>static void Main(string[] args)\n{\n    Console.Write(\"Ange v\u00e4rdet p\u00e5 p: \");\n    double p = double.Parse(Console.ReadLine());\n\n    Console.Write(\"Ange v\u00e4rdet p\u00e5 q: \");\n    double q = double.Parse(Console.ReadLine());\n\n    double diskriminant = Math.Pow(p / 2, 2) - q;\n\n    if (diskriminant &lt; 0)\n    {\n        Console.WriteLine(\"Det finns inga reella r\u00f6tter.\");\n    }\n    else\n    {\n        double x1 = -(p / 2) + Math.Sqrt(diskriminant);\n        double x2 = -(p / 2) - Math.Sqrt(diskriminant);\n\n        Console.WriteLine($\"L\u00f6sningarna \u00e4r x1 = {x1} och x2 = {x2}.\");\n    }\n}\n</code></pre>"},{"location":"content/modul-1/uppg1/","title":"\u00d6vningar - Modul 1","text":""},{"location":"content/modul-1/uppg1/#uppgift-1","title":"Uppgift 1","text":"<p>Skriv ett program som skriver ut valfri text \u201dHello World!\u201d. Valfrihet \u00e4r \u00f6verskattat...</p>"},{"location":"content/modul-1/uppg1/#uppgift-2","title":"Uppgift 2","text":"<p>Skriv ett program som skriver ut text p\u00e5 minst tre rader. Med minst en blank rad n\u00e5gonstans. Se nedanst\u00e5ende exempel. <pre><code>Det h\u00e4r programmet skriver ut text.\nMen p\u00e5 flera rader.\n\nOch ibland med helt tomma rader.\n</code></pre></p>"},{"location":"content/modul-1/uppg1/#uppgift-3","title":"Uppgift 3","text":"<p>Skriv ett program som skriver ut f\u00f6ljande text, eller vilken text du vill, s\u00e5 l\u00e4nge den har citattecken. <pre><code>Vissa tecken \u00e4r \"reserverade\" av programspr\u00e5ket.\n</code></pre></p>"},{"location":"content/modul-1/uppg1/#uppgift-4","title":"Uppgift 4","text":"<p>Vi ska inte l\u00e5ta v\u00e5rt anv\u00e4ndargr\u00e4nssnitt begr\u00e4nsa oss, sl\u00e4pp l\u00f6s din konstn\u00e4rliga sida och skriv ett program som ritar ut en  tjusig pyramid. Se exempel. <pre><code>  / \\\n /   \\\n/_____\\\n</code></pre></p>"},{"location":"content/modul-1/uppg1/#uppgift-5","title":"Uppgift 5","text":"<p>Skriv ett program som skriver ut valfri text, men med en annan f\u00e4rg \u00e4n standard, programmet ska \u00e4ven ha en annan bakgrundsf\u00e4rg. Kanske f\u00f6rs\u00f6ka matcha en flagga, t.ex. bl\u00e5 och gul.</p> <p>N\u00e4r anv\u00e4ndaren trycker p\u00e5 enter ska en ny text dyka upp, i \u00e4nnu en annan f\u00e4rg.</p>"},{"location":"content/modul-1/uppg1/#uppgift-6","title":"Uppgift 6","text":"<p>Console.Beep() \u00e4r en underskattad metod. Skriv ett program som anv\u00e4nder minst 4 olika rader med Beep(), raderna ska ha olika frekvens och l\u00e4ngd. </p> <p>F\u00f6rs\u00f6k att f\u00e5 till en liten melodi eller dylikt.</p>"},{"location":"content/modul-1/uppg1/#uppgift-7","title":"Uppgift 7","text":"<p>Skriv ett program som skriver ut en valfri mening, men ist\u00e4llet f\u00f6r att skriva ut allt p\u00e5 en g\u00e5ng s\u00e5 ska varje ord skrivas ut ett i taget, men fortfarande p\u00e5 en rad.</p>"},{"location":"content/modul-1/uppg1/#uppgift-8","title":"Uppgift 8","text":"<ol> <li> <p>Skriv ett program som fr\u00e5gar vad anv\u00e4ndaren heter och l\u00e5ter anv\u00e4ndaren svara. Programmet ska sen skriva ut en h\u00e4lsning till anv\u00e4ndaren, n\u00e5got i stil med \u201dHej vad trevligt att tr\u00e4ffas [namn], hoppas du f\u00e5r en trevlig dag!\u201d  </p> </li> <li> <p>Utveckla programmet genom att ocks\u00e5 l\u00e5ta programmet fr\u00e5ga efter tv\u00e5 andra valfria saker, exempelvis \u00e5lder och favoritmat, inkluderas \u00e4ven denna information i programmets svar till anv\u00e4ndaren.</p> </li> </ol>"},{"location":"content/modul-1/uppg1/#uppgift-9","title":"Uppgift 9","text":"<p>Skriv ett program som fr\u00e5gar anv\u00e4ndaren vilket \u00e5r det \u00e4r nu, sen ska programmet svara B\u00c5DE vilket \u00e5r det var f\u00f6rra \u00e5ret, men ocks\u00e5 vilket \u00e5r det \u00e4r om 10 \u00e5r.</p>"},{"location":"content/modul-1/uppg1/#uppgift-10","title":"Uppgift 10","text":"<p>Skriv ett program som fr\u00e5gar anv\u00e4ndaren efter tv\u00e5 tal. 1. Programmet ska ber\u00e4kna och skriva ut differensen av talen. 2. Utveckla programmet s\u00e5 att det ocks\u00e5 ber\u00e4knar och skriver ut talen upph\u00f6jt till varandra. Tips: Klassen Math.</p>"},{"location":"content/modul-1/uppg1/#uppgift-11","title":"Uppgift 11","text":"<p>Skriv ett program som l\u00e5ter anv\u00e4ndaren skriva in 3 tal och returnerar talens summa, produkt och medelv\u00e4rde.</p> <p>Programmet ska kunna hantera decimaltal och avrunda utskrifter till 3 decimaler.</p>"},{"location":"content/modul-1/uppg1/#uppgift-12","title":"Uppgift 12","text":"<p>Skriv ett program som tar in 2 tal fr\u00e5n anv\u00e4ndaren och sedan utf\u00f6r de fyra r\u00e4knes\u00e4tten p\u00e5 dem. Addition, subtraktion, multiplikation och division. Programmet ska skriva ut ber\u00e4kning och svar.</p> <p>Utveckla ditt program s\u00e5 att subtraktionen och divisionen utf\u00f6rs p\u00e5 \u201db\u00e5da h\u00e5ll\u201d, allts\u00e5 b\u00e5de x/y och y/x.  </p> <p>Utveckla ditt program s\u00e5 att det ocks\u00e5 hanterar decimaltal.</p>"},{"location":"content/modul-1/uppg1/#uppgift-13","title":"Uppgift 13","text":"<p>Skriv ett program som ber\u00e4knar och presenterar area och omkrets av en cirkel, baserat p\u00e5 relevant information som programmet fr\u00e5gar anv\u00e4ndaren om.</p> <p>Utveckla programmet s\u00e5 att det inte kraschar vid ov\u00e4ntad input.</p>"},{"location":"content/modul-1/uppg1/#uppgift-14","title":"Uppgift 14","text":"<p>Skriv ett program som ber\u00e4knar utvecklingen p\u00e5 ett sparkonto med fast r\u00e4nta. Programmet ska fr\u00e5ga anv\u00e4ndaren om hur mycket pengar som s\u00e4tts in, hur stor r\u00e4nta som \u00e4r p\u00e5 kontot och hur m\u00e5nga \u00e5r pengarna ska vara p\u00e5 kontot.  </p> <p>Programmet ska sedan skriva ut hur mycket pengar p\u00e5 kontot som finns efter s\u00e5 m\u00e5nga \u00e5r, enligt y = C * a^x d\u00e4r y \u00e4r v\u00e4rdet, C \u00e4r startv\u00e4rdet, a \u00e4r f\u00f6r\u00e4ndringsfaktorn samt x \u00e4r tiden.</p>"},{"location":"content/modul-1/uppg1/#uppgift-15","title":"Uppgift 15","text":"<p>Skriv ett program som l\u00f6ser andragradsekvationer p\u00e5 formen x^2 + px + q = 0. Programmet ska fr\u00e5ga anv\u00e4ndaren om p och q och med hj\u00e4lp av dem l\u00f6sa ekvationen. </p> <p>Programmet ska hantera decimaltal. Svaret ska avrundas till n\u00e5got l\u00e4mpligt, kanske 2 decimaler. </p>"},{"location":"content/modul-2/1-villkorssatser/","title":"Villkorssatser","text":"<p>Det \u00e4r oftast \u00f6nskv\u00e4rt att ett program kan utv\u00e4rdera givna villkor och v\u00e4lja vilken eller vilka kodrader som ska utf\u00f6ras och i vilken ordning. Ett s\u00e5dant val, att v\u00e4lja, kallas selektion.</p> <p>Nedan presenteras b\u00e5de if-satser och switch-case uttryck, dessa b\u00e5da villkorssatser uppn\u00e5r samma resultat, men ser lite olika ut. Lite f\u00f6renklat kan switchuttryck s\u00e4gas vara effektivare n\u00e4r det finns m\u00e5nga alternativ. </p>"},{"location":"content/modul-2/1-villkorssatser/#if-satser","title":"If-satser","text":""},{"location":"content/modul-2/1-villkorssatser/#if","title":"If","text":"<p>En if-sats \u00e4r ett villkorat kodblock. K\u00e4llkoden som st\u00e5r inne i blocket k\u00f6rs bara om villkoret mellan parenteserna \u00e4r sant. Villkoret mellan parenteserna m\u00e5ste vara ett boolskt uttryck.</p> <pre><code>if (a &gt; 3)\n{\n    Console.WriteLine(\"a \u00e4r st\u00f6rre \u00e4n 3!\");\n}\n\n// ALLA kodrader inne i blocket utf\u00f6rs om villkoret \u00e4r sant.\nif (namn == \"Emil\")\n{\n    Console.WriteLine(\"Personen heter Emil.\");\n    Console.WriteLine(\"I \u00f6vrigt ett v\u00e4ldigt tjusigt namn.\");\n}\n</code></pre> <pre><code>string namn = \"Emil\";\nbool l\u00e4rare = true;\n\n// Villkoret, koden mellan parenteserna, kan vara sammansatt.\nif (namn == \"Emil\" &amp;&amp; l\u00e4rare == true)\n{\n    Console.WriteLine(\"Personen heter Emil och arbetar som l\u00e4rare.\");\n}\n\n// Notera att det r\u00e4cker med enbart den boolska variabeln. \nif (namn == \"Emil\" &amp;&amp; l\u00e4rare) \n{\n    Console.WriteLine(\"Personen heter Emil och arbetar som l\u00e4rare.\");\n}\n</code></pre>"},{"location":"content/modul-2/1-villkorssatser/#else","title":"else","text":"<p>Kompletterar en if-sats. Koden i else-blocket k\u00f6rs om if-satsen INTE \u00e4r sann. Else har inget eget villkor, och kan inte anv\u00e4ndas frist\u00e5ende fr\u00e5n en if-sats. <pre><code>int a = 8;\nint b = 0;\n\nif (a &gt;= 10)\n{\n    b = 100; // Om a \u00e4r st\u00f6rre \u00e4n eller lika med 10.\n}\nelse\n{\n    b = -30; // Om a INTE \u00e4r det.\n}\n\nConsole.WriteLine(b); // Utskriften ger -30.\n</code></pre></p>"},{"location":"content/modul-2/1-villkorssatser/#else-if","title":"else if","text":"<p>Kan anv\u00e4ndas f\u00f6r att skapa en kedja av villkor, d\u00e4r varje villkor utv\u00e4rderas om det f\u00f6reg\u00e5ende villkoret \u00e4r falskt. <pre><code>int a = 1;\n\nif (a &gt; 4) // Falskt.\n{\n    Console.WriteLine(\"H\u00f6gre \u00e4n fyra!\");\n}\nelse if (a &lt; 0) // Falskt.\n{\n    Console.WriteLine(\"L\u00e4gre \u00e4n noll!\");\n}\nelse // Enda kvarvarande alternativet.\n{\n    Console.WriteLine(\"H\u00f6gre \u00e4n noll, l\u00e4gre \u00e4n fem!\");\n}\n</code></pre></p>"},{"location":"content/modul-2/1-villkorssatser/#switch","title":"Switch","text":"<p>Ett switchuttryck j\u00e4mf\u00f6r v\u00e4rdet p\u00e5 en variabel med flera olika alternativ. Det \u00e4r anv\u00e4ndbart om variabeln bara kan anta ett begr\u00e4nsat antal v\u00e4rden, exempelvis veckordagar.</p> <p>Exemplet nedan tar in ett namn fr\u00e5n anv\u00e4ndaren, och sen kan ett av fyra cases intr\u00e4ffa. Notera hur varje case avslutas med nyckeordet break, utan detta kommer n\u00e4sta case ocks\u00e5 exekveras. <pre><code>string namn = Console.ReadLine();\n\nswitch (namn)\n{\n    case \"Arne\":\n        Console.WriteLine(\"Du heter Arne.\");\n        break;\n\n    case \"Bodil\":\n        Console.WriteLine(\"Du heter Bodil.\");\n        break;\n\n    case \"Cecilia\":\n        Console.WriteLine(\"Du heter Cecilia.\");\n        break;\n\n    default: // Om inget av de \u00f6vriga fallen intr\u00e4ffar\n        Console.WriteLine(\"Du heter n\u00e5got som inte k\u00e4nns igen av programmet.\");\n        break;\n}\n</code></pre></p> <p>I nedanst\u00e5ende exempel har case 2 inget inneh\u00e5ll och avslutas inte med break. Detta leder till att case 3 utf\u00f6rs. Anv\u00e4ndbart om flera alternativ ska leda till samma utfall. <pre><code>int a = 2;\nswitch (a)\n{\n    case 1:\n        Console.WriteLine(\"V\u00e4rdet \u00e4r 1\");\n        break;\n\n    case 2:\n        // Om a \u00e4r 2 kommer vi att \"ramla ner\" i case 3.\n\n    case 3:\n        Console.WriteLine(\"V\u00e4rdet kan vara 2 eller 3.\");\n        break;\n\n    default: \n        Console.WriteLine(\"V\u00e4rdet \u00e4r n\u00e5got annat!\");\n        break;\n}\n</code></pre></p> <p>F\u00f6r nyare versioner av C# kan man ocks\u00e5 specificera intervall f\u00f6r numeriska v\u00e4rden i switchuttryck, se nedanst\u00e5ende exempel. <pre><code>int a = 10;\nswitch (a)\n{\n    case &lt;= 5:\n        Console.WriteLine(\"V\u00e4rdet \u00e4r mindre \u00e4n eller lika med 5\");\n        break;\n\n    case &gt; 50 and &lt; 100:\n        Console.WriteLine(\"V\u00e4rdet \u00e4r st\u00f6rre \u00e4n 50 och mindre \u00e4n 100.\");\n        break;\n\n    default:\n        Console.WriteLine(\"V\u00e4rdet \u00e4r n\u00e5got annat!\");\n        break;\n}\n</code></pre></p>"},{"location":"content/modul-2/1-villkorssatser/#nastlade-villkorssatser","title":"N\u00e4stlade villkorssatser","text":"<p>Det g\u00e5r bra att ha en villkorssats inuti en annan villkorssats, dessa kallas d\u00e5 n\u00e4stlade (nested). </p> <p>Exempel p\u00e5 n\u00e4stlade if-satser. <pre><code>if (number &gt; 10)\n{\n    Console.WriteLine(\"Talet \u00e4r st\u00f6rre \u00e4n 10.\");\n\n    if (number &gt; 20)\n    {\n        Console.WriteLine(\"Talet \u00e4r st\u00f6rre \u00e4n 20.\");\n    }\n    else\n    {\n        Console.WriteLine(\"Talet \u00e4r 20 eller mindre.\");\n    }\n}\nelse\n{\n    Console.WriteLine(\"Talet \u00e4r 10 eller mindre.\");\n}\n</code></pre></p> <p>Det g\u00e5r ocks\u00e5 att n\u00e4stla switchuttryck, det fungerar p\u00e5 samma s\u00e4tt som f\u00f6r if-satser, men d\u00e5 syntaxen f\u00f6r switchuttrycken \u00e4r mer omfattande sjunker l\u00e4sbarheten snabbt.</p> <p>Tips</p> <p>Det g\u00e5r att n\u00e4stla m\u00e5nga villkorssatser, men ju fler satser som n\u00e4stlas i varandra desto s\u00e4mre blir l\u00e4sbarheten. </p> <p>Var uppm\u00e4rksam p\u00e5 detta och undvik i m\u00f6jligaste m\u00e5n att gr\u00f6ta till det.</p>"},{"location":"content/modul-2/2-felhantering/","title":"Felhantering","text":"<p>Felhantering \u00e4r en viktig del av programmering eftersom det hj\u00e4lper till att skapa robusta och anv\u00e4ndarv\u00e4nliga applikationer. </p> <p>Genom att f\u00f6rebygga fel redan i planeringsstadiet minskar risken att de intr\u00e4ffar, och h\u00f6jer anv\u00e4ndarv\u00e4nligheten. </p> <p>Det \u00e4r dock ocks\u00e5 viktigt att kunna hantera fel n\u00e4r de uppst\u00e5r f\u00f6r att s\u00e4kerst\u00e4lla att programmet inte kraschar och kan ge anv\u00e4ndbar feedback till anv\u00e4ndaren.</p>"},{"location":"content/modul-2/2-felhantering/#feltyper","title":"Feltyper","text":"<p>Det finns tre huvudsakliga typer av fel inom programmering, baserat p\u00e5 vad de har f\u00f6r effekt.</p>"},{"location":"content/modul-2/2-felhantering/#kompileringsfel","title":"Kompileringsfel","text":"<p>Kompileringsfel uppst\u00e5r n\u00e4r koden bryter mot spr\u00e5kets syntaxregler och kan inte kompileras. </p> <p>Dessa fel uppt\u00e4cks av kompilatorn innan programmet k\u00f6rs, vilket leder till att programmet inte startar.</p> <p>Visual Studio hj\u00e4lper till att hitta dessa genom att markera dem med r\u00f6tt. <pre><code>// Kompileringsfel, kan inte konvertera string till int rakt av\nint myInt = \"Hej\";\n</code></pre></p>"},{"location":"content/modul-2/2-felhantering/#exekveringsfel","title":"Exekveringsfel","text":"<p>Exekveringsfel (runtime errors) uppst\u00e5r under programmets k\u00f6rning, och leder till att programmet \"slutar exekvera\", allts\u00e5 krascha. </p> <p>I C# kallas dessa f\u00f6r undantag (exceptions), och om ett undantag inte hanteras s\u00e5 kraschar programmet.</p> <pre><code>// Ger upphov till ett exekveringsfel f\u00f6r det blir nolldivision\nint num = 10;\nint temp = num / 0;\n</code></pre> <p>Ovanst\u00e5ende exempel ger upphov till ett felmeddelande som kommunicerar \"Exception unhandled\" f\u00f6ljt av namnet p\u00e5 undantaget med tillh\u00f6rande f\u00f6rklaring vad som orsakade det, i det h\u00e4r fallet: \"System.DivideByZeroException: 'Attempted to divide by zero.\"</p>"},{"location":"content/modul-2/2-felhantering/#logiska-fel","title":"Logiska fel","text":"<p>Logiska fel \u00e4r ofta den st\u00f6rsta fienden. Programmet kompilerar och startar upp, det kraschar inte, men om man fr\u00e5gar vilken f\u00e4rg himlen har s\u00e5 svarar programmet \"bacon\". Inte helt \u00f6nskv\u00e4rt.</p> <p>F\u00f6ljande kod \u00e4r ett exempel p\u00e5 ett program som ska summera a och b. <pre><code>int a = 5;\nint b = 10;\nint sum = a - b; // Logiskt fel, fel operator, - ist\u00e4llet f\u00f6r +\nConsole.WriteLine($\"Summan av {a} och {b} \u00e4r {sum}\");\n</code></pre></p> <p>Logiska fel kan vara sv\u00e5ra att uppt\u00e4cka, dels f\u00f6r att man sj\u00e4lv f\u00e5r tunnelseende, men ocks\u00e5 n\u00e4r programmet blir st\u00f6rre och st\u00f6rre.</p> <p>F\u00f6ljande kod \u00e4r ett exempel p\u00e5 ett program som r\u00e4knar antalet vokaler i en str\u00e4ng som anv\u00e4ndaren skriver in. <pre><code>string input = Console.ReadLine();\nint count = 0;\n\nforeach (char c in input)\n{\n    if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == '\u00e5' || c == '\u00e4' || c == '\u00f6')\n    {\n        count++;\n    }\n}\n\nConsole.WriteLine($\"Antalet vokaler i str\u00e4ngen '{input}' \u00e4r: {count}\");\n</code></pre> Skriver man in \"\u00c4ntligen f\u00e5r jag programmera!\" i ovanst\u00e5ende exempel f\u00e5r man utskriften: <pre><code>Antalet vokaler i str\u00e4ngen \"\u00c4ntligen f\u00e5r jag programmera!\" \u00e4r: 8\n</code></pre></p> <p>Programmet missar allts\u00e5 en vokal. Mer specifikt s\u00e5 r\u00e4knar programmet inte versala vokaler (stora bokst\u00e4ver), i det h\u00e4r fallet \"\u00c4\".</p> <p>Det h\u00e4r hade varit sv\u00e5rare att se eller komma p\u00e5 om man inte testat programmet och belyser vikten av att testk\u00f6ra sina program.</p>"},{"location":"content/modul-2/2-felhantering/#undantag-med-try-catch","title":"Undantag med try-catch","text":"<p>Exekveringsfel i C# ger upphov till s\u00e5 kallade undantag. Dessa hanteras s\u00e5klart b\u00e4st genom att helt undvika dem via f\u00f6rebyggande arbete, exempelvis kanske anv\u00e4nda TryParse() ist\u00e4llet f\u00f6r Parse().</p> <p>Ett annat s\u00e4tt att hantera undantag och undvika att programmet kraschar \u00e4r att anv\u00e4nda en lite mer allm\u00e4n l\u00f6sning, try-catch. </p> <p>F\u00f6ljande exempel ger upphov till ett exekveringsfel, System.FormatException, eftersom det inte g\u00e5r att konvertera text till heltal. <pre><code>int myInt = int.Parse(\"Hej\");\n</code></pre></p> <p>Anv\u00e4ndande av try-catch l\u00e5ter programmet \"f\u00f6rs\u00f6ka\" utf\u00f6ra koden, och sen agera om n\u00e5got undantag dyker upp. Ett try-block m\u00e5ste matchas ihop med minst ett catch-block. <pre><code>try\n{\n    // F\u00f6rs\u00f6ker k\u00f6ra koden inne i try-blocket\n    int myInt = int.Parse(\"Hej\");\n}\ncatch\n{\n    // Om n\u00e5got g\u00e5r fel utf\u00f6rs koden i catch-blocket.\n    Console.WriteLine(\"N\u00e5t gick fel!\");\n}\n</code></pre></p> <p>Ovanst\u00e5ende exempel ger dock ingen information till anv\u00e4ndaren, ett s\u00e4tt att \u00e5stadkomma det \u00e4r att anv\u00e4nda det faktiska undantaget som ett argument i catch-blocket, i nedanst\u00e5ende exempel namnges undantaget till error. <pre><code>try\n{\n    int myInt = int.Parse(\"Hej\");\n}\ncatch (Exception error) // Undantaget namnges till error\n{\n    Console.WriteLine(\"N\u00e5t gick fel!\");\n    Console.WriteLine(error.Message); // Skriv ut det inbyggda meddelandet\n}\n</code></pre> Ovanst\u00e5ende kod ger en utskrift inneh\u00e5llande undantagets eget felmeddelande: <pre><code>N\u00e5t gick fel!\nInput string was not in a correct format.\n</code></pre></p> <p>Det g\u00e5r ocks\u00e5 att \"f\u00e5nga\" specifika fel med catch-block, d\u00e5 specificerar man vilken typ av undantag som ska f\u00e5ngas. P\u00e5 s\u00e5 vis kan man l\u00e5ta programmet hantera olika undantag p\u00e5 olika s\u00e4tt. <pre><code>try\n{\n    // F\u00f6rs\u00f6ker omvandla en str\u00e4ng till integer.\n    // Talet ifr\u00e5ga \u00e4r dock f\u00f6r stort f\u00f6r en int32.\n    int myInt = int.Parse(\"99999999999999999999999\");\n}\ncatch (FormatException) //Det h\u00e4r blocket h\u00e4nder ENBART vid fel format.\n{\n    Console.WriteLine(\"Fel format!\");\n}\ncatch //Alla andra fel.\n{\n    Console.WriteLine(\"N\u00e5got annat oklart h\u00e4nde!\");\n}\n</code></pre></p>"},{"location":"content/modul-2/2-felhantering/#felsokning-med-debugger","title":"Fels\u00f6kning med debugger","text":"<p>Att fels\u00f6ka logiska fel kan vara jobbigt, man vet kanske inte vad som \u00e4r problemet eller var i k\u00e4llkoden sagda problem befinner sig.</p> <p>Ett s\u00e4tt att underl\u00e4tta fels\u00f6kningsprocessen \u00e4r att anv\u00e4nda sig av Visual Studios debugger och g\u00e5 igenom koden steg f\u00f6r steg, eller pausa exekveringen vid en viss rad d\u00e4r man misst\u00e4nker att problemet finns,</p>"},{"location":"content/modul-2/2-felhantering/#steg-for-steg","title":"Steg f\u00f6r steg","text":"<p>F\u00f6r att g\u00e5 igenom koden steg f\u00f6r steg anv\u00e4nds knappen \"Step into\" (F11). Ser du inte knappen, h\u00f6gerklicka och visa verktygsf\u00e4ltet \"Debug\".</p> <p>Programmet startar och f\u00f6rsta i k\u00e4llkoden markeras, h\u00e4rifr\u00e5n kan man g\u00e5 fram\u00e5t i programmet genom att trycka p\u00e5 \"Step Into\" (F11) igen, ett tryck inneb\u00e4r en rad fram\u00e5t. </p> <p>Det finns ocks\u00e5 m\u00f6jlighet att se v\u00e4rdet p\u00e5 alla variabler via fliken \"Locals\", nere till v\u00e4nster fr\u00e5n b\u00f6rjan.</p>"},{"location":"content/modul-2/2-felhantering/#breakpoints","title":"Breakpoints","text":"<p>Lek med tanken att ditt program \u00e4r 300 rader kod. Du misst\u00e4nker att problemet finns n\u00e5gonstans runt rad 250. Du skulle kunna klicka p\u00e5 \"Step Into\" (F11) 250 g\u00e5nger f\u00f6r att komma dit, men det vill du inte.</p> <p>En breakpoint kan s\u00e4ttas p\u00e5 en specifik rad i k\u00e4llkoden och fungerar precis som namnet antyder, n\u00e4r programmet kommer till raden ifr\u00e5ga s\u00e5 kommer programmet att pausa och g\u00e5 in i debug l\u00e4ge.</p> <p>F\u00f6r att s\u00e4tta ut en breakpoint kan man v\u00e4nsterklicka l\u00e4ngst ut till v\u00e4nster om radnumret. Alternativt kan man anv\u00e4nda F9 n\u00e4r mark\u00f6ren \u00e4r p\u00e5 raden ifr\u00e5ga. Funktionaliteten kan ocks\u00e5 kommas \u00e5t fr\u00e5n dropdownen \"Debug\" h\u00f6gst upp.</p> <p>Det g\u00e5r utm\u00e4rkt att s\u00e4tta ut fler breakpoints.</p>"},{"location":"content/modul-2/2-felhantering/#run-to-cursor","title":"Run to cursor","text":"<p>Fungerar som en breakpoint, men bara en g\u00e5ng. H\u00f6gerklicka p\u00e5 raden du vill k\u00f6ra till, v\u00e4lj \"Run To Cursor\", programmet k\u00f6r som vanligt till raden ifr\u00e5ga och g\u00e5r sen in i debug s\u00e5 att du kan unders\u00f6ka. </p>"},{"location":"content/modul-2/3-readkey/","title":"ReadKey","text":"<p>Metoden ReadKey() anv\u00e4nds f\u00f6r att l\u00e4sa ett enskilt tecken fr\u00e5n anv\u00e4ndaren via konsolen. Metoden pausar programmet tills anv\u00e4ndaren trycker p\u00e5 en tangent. J\u00e4mf\u00f6r detta med ReadLine(), d\u00e4r programmet pausas tills anv\u00e4ndaren trycker p\u00e5 enter.</p> <p>ReadKey() kan allts\u00e5 anv\u00e4ndas f\u00f6r att ta inmatning fr\u00e5n anv\u00e4ndaren med bara ETT knapptryck. Det finns ocks\u00e5 m\u00f6jlighet att d\u00f6lja vilken knapp som tryckts ned.</p> <p>ReadKey() returnerar ett objekt av klassen ConsoleKeyInfo, som inneh\u00e5ller information om vilken tangent som trycktes ned, vilket tecken det motsvarar, samt om n\u00e5gra andra modifierare s\u00e5som CTRL, ALT eller SHIFT anv\u00e4nts. </p> <pre><code>// Inmatning fr\u00e5n anv\u00e4ndaren. \nConsole.WriteLine(\"Tryck p\u00e5 valfri tangent f\u00f6r att forts\u00e4tta...\");\nConsoleKeyInfo keyInfo = Console.ReadKey();\n\n// Blankrad.\nConsole.WriteLine();\n\n// Sparar tecknet f\u00f6r senare anv\u00e4ndning eller dylikt.\nchar userinput = keyInfo.KeyChar;\n\n// Skriver ut v\u00e4rdet p\u00e5 keyInfo's egenskaper.\nConsole.WriteLine($\"Key: {keyInfo.Key}\");\nConsole.WriteLine($\"KeyChar: {keyInfo.KeyChar}\");\nConsole.WriteLine($\"Modifiers: {keyInfo.Modifiers}\");\n</code></pre> <p>Ovanst\u00e5ende exempel med inskrivet procenttecken, allts\u00e5 shift + 5, ger f\u00f6ljande utskrift. <pre><code>Tryck p\u00e5 valfri tangent f\u00f6r att forts\u00e4tta...\n%\nKey: D5\nKeyChar: %\nModifiers: Shift\n</code></pre></p> <p>F\u00f6r att d\u00f6lja anv\u00e4ndarens inmatning kan metoden ReadKey() anv\u00e4ndas med argumentet true. Detta resulterar i att anv\u00e4ndarens inmatning inte visas i konsolen. <pre><code>ConsoleKeyInfo keyInfo = Console.ReadKey(true);\n</code></pre></p>"},{"location":"content/modul-2/4-villkorsoperatorn/","title":"Villkorsoperatorn","text":"<p>Villkorsoperatorn fungerar som en  if-sats, men p\u00e5 en rad. Anv\u00e4ndande av denna operator kan allts\u00e5 spara rader och inneb\u00e4ra en mer kompakt kod.</p> <p>Villkorsoperatorn best\u00e5r av tv\u00e5 tecken, ett fr\u00e5getecken och ett kolon, enligt f\u00f6ljande: \u2003?:</p> <p>I nedanst\u00e5ende exempel anv\u00e4nds villkorsoperatorn f\u00f6r att utv\u00e4rdera om variabeln number \u00e4r st\u00f6rre \u00e4n noll, och str\u00e4ngen result tilldelas \"positivt\" eller \"negativt\". <pre><code>int number = 5;\n\nstring result = number &gt; 0 ? \"positivt\" : \"negativt\";\n\nConsole.WriteLine($\"Talet \u00e4r {result}.\"); // Ger utskriften positivt.\n</code></pre></p> <p>Samma sak kan uppn\u00e5s med en vanlig if-sats enligt f\u00f6ljande. <pre><code>int number = 5;\nstring result;\n\nif (number &gt; 0)\n{\n    result = \"positivt\";\n}\nelse\n{\n    result = \"negativt\";\n}\n\nConsole.WriteLine($\"Talet \u00e4r {result}.\");\n</code></pre></p> <p>Ett knep f\u00f6r att komma ih\u00e5g syntaxen f\u00f6r villkorsoperatorn: <pre><code>\u00c4r villkoret sant ? Ja : Nej\n</code></pre></p> <p>J\u00e4mf\u00f6r detta med det f\u00f6reg\u00e5ende exemplet. <pre><code>//              Villkoret  ?     Ja     :    Nej\nstring result = number &gt; 0 ? \"positivt\" : \"negativt\";\n</code></pre></p>"},{"location":"content/modul-2/begrepp2/","title":"Begrepp - Modul 2","text":"<p>Selektion: Val i ett program baserat p\u00e5 villkor, d\u00e4r olika kodblock k\u00f6rs beroende p\u00e5 om villkoret \u00e4r sant eller falskt.</p> <p>If-sats: En villkorsstyrd sats som k\u00f6rs om ett specifikt villkor \u00e4r uppfyllt (sant).</p> <p>Else: En del av en if-sats som k\u00f6rs om villkoret i if-satsen inte \u00e4r uppfyllt (falskt).</p> <p>Else if: En f\u00f6rl\u00e4ngning av en if-sats som testar ett nytt villkor om det f\u00f6rsta villkoret var falskt.</p> <p>Switchuttryck: Ett uttryck som j\u00e4mf\u00f6r ett v\u00e4rde med flera m\u00f6jliga alternativ (cases) och k\u00f6r kod f\u00f6r det matchande fallet.</p> <p>Villkorssats: En sats som styr fl\u00f6det i programmet baserat p\u00e5 ett villkor, t.ex. if, else eller switch.</p> <p>N\u00e4stlad if-sats: En if-sats inuti en annan if-sats, anv\u00e4nds f\u00f6r att skapa fler niv\u00e5er av villkorskontroll.</p> <p>Logiskt uttryck: Ett uttryck som returnerar ett boolskt v\u00e4rde (true eller false).</p> <p>Kompileringsfel: Ett fel som uppst\u00e5r n\u00e4r koden inte kan \u00f6vers\u00e4ttas till maskinkod.</p> <p>Exekveringsfel: Ett fel som intr\u00e4ffar n\u00e4r programmet k\u00f6rs.</p> <p>Logiska fel: Ett fel i programmet d\u00e4r koden k\u00f6rs utan att krascha, men ger felaktiga resultat p\u00e5 grund av felaktig logik.</p> <p>Undantag (Exception): Ett fel som intr\u00e4ffar under k\u00f6rning och som kan leda till exekveringsfel om det inte hanteras.</p> <p>try-catch: Ett kodblock som f\u00e5ngar upp och hanterar undantag under exekvering f\u00f6r att f\u00f6rhindra att programmet kraschar.</p> <p>Breakpoint: En markering i k\u00e4llkoden d\u00e4r programmet tillf\u00e4lligt stoppas under fels\u00f6kning f\u00f6r att unders\u00f6ka programfl\u00f6det eller v\u00e4rden.</p> <p>Villkorsoperator: En operator som returnerar ett v\u00e4rde baserat p\u00e5 ett villkor, fungerar som en kortare if-sats.</p> <p>ReadKey: En metod som l\u00e4ser in ett enskilt tecken fr\u00e5n tangentbordet och v\u00e4ntar p\u00e5 att anv\u00e4ndaren ska trycka p\u00e5 en tangent.</p>"},{"location":"content/modul-2/l%C3%B6sn2/","title":"L\u00f6sningsf\u00f6rslag - Modul 2","text":""},{"location":"content/modul-2/l%C3%B6sn2/#uppgift-1","title":"Uppgift 1","text":"<pre><code>// Be om tv\u00e5 tal fr\u00e5n anv\u00e4ndaren\nConsole.WriteLine(\"Ange det f\u00f6rsta talet:\");\nint tal1 = int.Parse(Console.ReadLine());\n\nConsole.WriteLine(\"Ange det andra talet:\");\nint tal2 = int.Parse(Console.ReadLine());\n\n// J\u00e4mf\u00f6r de tv\u00e5 talen och skriv ut det minsta\nif (tal1 &lt; tal2)\n{\n    Console.WriteLine($\"Det minsta talet \u00e4r: {tal1}\");\n}\nelse if (tal2 &lt; tal1)\n{\n    Console.WriteLine($\"Det minsta talet \u00e4r: {tal2}\");\n}\nelse\n{\n    Console.WriteLine(\"Talen \u00e4r lika stora.\");\n}\n</code></pre>"},{"location":"content/modul-2/l%C3%B6sn2/#uppgift-2","title":"Uppgift 2","text":"<pre><code>// Be anv\u00e4ndaren att ange ett heltal\nConsole.WriteLine(\"Ange ett heltal:\");\nstring input = Console.ReadLine();\n\n// Spara returv\u00e4rdet fr\u00e5n TryParse i en variabel\nbool \u00e4rHeltal = int.TryParse(input, out int tal);\n\n// Anv\u00e4nd variabeln i if-satsen\nif (\u00e4rHeltal)\n{\n    // Kontrollera om talet \u00e4r j\u00e4mnt eller udda\n    if (tal % 2 == 0)\n    {\n        Console.WriteLine(\"Talet \u00e4r j\u00e4mnt.\");\n    }\n    else\n    {\n        Console.WriteLine(\"Talet \u00e4r udda.\");\n    }\n}\nelse\n{\n    // Felmeddelande om inmatningen inte \u00e4r ett heltal\n    Console.WriteLine(\"Fel: Det var inte ett giltigt heltal.\");\n}\n</code></pre>"},{"location":"content/modul-2/l%C3%B6sn2/#uppgift-3","title":"Uppgift 3","text":"<pre><code>int po\u00e4ng = 0;\n\n// Fr\u00e5ga 1\nConsole.WriteLine(\"Vad \u00e4r huvudstaden i Sverige?\");\nstring svar1 = Console.ReadLine().ToLower();\nif (svar1 == \"stockholm\")\n{\n    Console.WriteLine(\"R\u00e4tt svar!\");\n    po\u00e4ng++;\n}\nelse\n{\n    Console.WriteLine(\"Fel svar.\");\n}\n\n// Fr\u00e5ga 2\nConsole.WriteLine(\"Vad \u00e4r 2 + 2?\");\nstring svar2 = Console.ReadLine();\nif (svar2 == \"4\")\n{\n    Console.WriteLine(\"R\u00e4tt svar!\");\n    po\u00e4ng++;\n}\nelse\n{\n    Console.WriteLine(\"Fel svar.\");\n}\n\n// Fr\u00e5ga 3\nConsole.WriteLine(\"Vilket \u00e5r b\u00f6rjade andra v\u00e4rldskriget?\");\nstring svar3 = Console.ReadLine();\nif (svar3 == \"1939\")\n{\n    Console.WriteLine(\"R\u00e4tt svar!\");\n    po\u00e4ng++;\n}\nelse\n{\n    Console.WriteLine(\"Fel svar.\");\n}\n\n// Ge \u00e5terkoppling\nConsole.WriteLine($\"Du fick {po\u00e4ng} av 3 m\u00f6jliga r\u00e4tta svar.\");\n</code></pre>"},{"location":"content/modul-2/l%C3%B6sn2/#uppgift-4","title":"Uppgift 4","text":"<pre><code>// Informera anv\u00e4ndaren om po\u00e4nggr\u00e4nserna\nConsole.WriteLine(\"Po\u00e4nggr\u00e4nser: A = 90-100, B = 80-89, C = 70-79, D = 60-69, E = 50-59, F = under 50\");\n\n// Fr\u00e5ga anv\u00e4ndaren om deras po\u00e4ng\nConsole.WriteLine(\"Hur m\u00e5nga po\u00e4ng fick du?\");\nint po\u00e4ng = int.Parse(Console.ReadLine());\n\n// Kontrollera om po\u00e4ngen \u00e4r inom det till\u00e5tna intervallet\nif (po\u00e4ng &lt; 0 || po\u00e4ng &gt; 100)\n{\n    Console.WriteLine(\"Fel: Ange ett giltigt po\u00e4ng mellan 0 och 100.\");\n}\nelse\n{\n    // Best\u00e4m vilket betyg po\u00e4ngen motsvarar\n    if (po\u00e4ng &gt;= 90)\n    {\n        Console.WriteLine(\"Ditt betyg \u00e4r A.\");\n    }\n    else if (po\u00e4ng &gt;= 80)\n    {\n        Console.WriteLine(\"Ditt betyg \u00e4r B.\");\n    }\n    else if (po\u00e4ng &gt;= 70)\n    {\n        Console.WriteLine(\"Ditt betyg \u00e4r C.\");\n    }\n    else if (po\u00e4ng &gt;= 60)\n    {\n        Console.WriteLine(\"Ditt betyg \u00e4r D.\");\n    }\n    else if (po\u00e4ng &gt;= 50)\n    {\n        Console.WriteLine(\"Ditt betyg \u00e4r E.\");\n    }\n    else\n    {\n        Console.WriteLine(\"Ditt betyg \u00e4r F.\");\n    }\n}\n</code></pre>"},{"location":"content/modul-2/l%C3%B6sn2/#uppgift-5","title":"Uppgift 5","text":"<pre><code>// Fr\u00e5ga anv\u00e4ndaren vilken veckodag det \u00e4r\nConsole.WriteLine(\"Vilken veckodag \u00e4r det?\");\nstring veckodag = Console.ReadLine().ToLower();\n\n// Anv\u00e4nd en switch-sats f\u00f6r att ge f\u00f6rslag p\u00e5 matr\u00e4tt\nswitch (veckodag)\n{\n    case \"m\u00e5ndag\": // Faller igenom till torsdagens matr\u00e4tt\n    case \"torsdag\":\n        Console.WriteLine(\"Matr\u00e4tt: Spaghetti och k\u00f6ttf\u00e4rss\u00e5s.\");\n        break;\n    case \"tisdag\":\n        Console.WriteLine(\"Matr\u00e4tt: Fiskgrat\u00e4ng.\");\n        break;\n    case \"onsdag\":\n        Console.WriteLine(\"Matr\u00e4tt: Kycklingsallad.\");\n        break;\n    case \"fredag\":\n        Console.WriteLine(\"Matr\u00e4tt: Tacos.\");\n        break;\n    case \"l\u00f6rdag\":\n        Console.WriteLine(\"Matr\u00e4tt: Pizza.\");\n        break;\n    case \"s\u00f6ndag\":\n        Console.WriteLine(\"Matr\u00e4tt: Lasagne.\");\n        break;\n    default:\n        Console.WriteLine(\"Fel: Det var inte en giltig veckodag.\");\n        break;\n}\n</code></pre>"},{"location":"content/modul-2/l%C3%B6sn2/#uppgift-6","title":"Uppgift 6","text":"<pre><code>// Ta in tre tal fr\u00e5n anv\u00e4ndaren\nConsole.WriteLine(\"Ange f\u00f6rsta talet:\");\nint tal1 = int.Parse(Console.ReadLine());\n\nConsole.WriteLine(\"Ange andra talet:\");\nint tal2 = int.Parse(Console.ReadLine());\n\nConsole.WriteLine(\"Ange tredje talet:\");\nint tal3 = int.Parse(Console.ReadLine());\n\n// Sortera och skriv ut talen i storleksordning\nif (tal1 &lt;= tal2 &amp;&amp; tal1 &lt;= tal3) // Om tal 1 \u00e4r st\u00f6rst\n{\n    if (tal2 &lt;= tal3)\n    {\n        Console.WriteLine($\"{tal1}, {tal2}, {tal3}\");\n    }\n    else\n    {\n        Console.WriteLine($\"{tal1}, {tal3}, {tal2}\");\n    }\n}\nelse if (tal2 &lt;= tal1 &amp;&amp; tal2 &lt;= tal3) // Om tal 2 \u00e4r st\u00f6rst\n{\n    if (tal1 &lt;= tal3)\n    {\n        Console.WriteLine($\"{tal2}, {tal1}, {tal3}\");\n    }\n    else\n    {\n        Console.WriteLine($\"{tal2}, {tal3}, {tal1}\");\n    }\n}\nelse // H\u00e4r \u00e4r ju automatiskt tal 3 st\u00f6rst\n{\n    if (tal1 &lt;= tal2)\n    {\n        Console.WriteLine($\"{tal3}, {tal1}, {tal2}\");\n    }\n    else\n    {\n        Console.WriteLine($\"{tal3}, {tal2}, {tal1}\");\n    }\n}\n</code></pre>"},{"location":"content/modul-2/l%C3%B6sn2/#uppgift-7","title":"Uppgift 7","text":"<pre><code>// Fr\u00e5ga anv\u00e4ndaren efter f\u00f6rsta talet\nConsole.WriteLine(\"Ange ett tal:\");\ndouble tal1 = double.Parse(Console.ReadLine());\n\n// Fr\u00e5ga efter r\u00e4knes\u00e4tt\nConsole.WriteLine(\"Ange ett r\u00e4knes\u00e4tt (+, -, *, /, ^ f\u00f6r upph\u00f6jt till, sqrt f\u00f6r roten ur):\");\nstring raknesatt = Console.ReadLine();\n\n// Utf\u00f6r operationer beroende p\u00e5 r\u00e4knes\u00e4ttet\nif (raknesatt == \"sqrt\")\n{\n    // Roten ur operation\n    Console.WriteLine($\"Resultatet \u00e4r: {Math.Sqrt(tal1)}\");\n}\nelse\n{\n    // Fr\u00e5ga efter andra talet f\u00f6r \u00f6vriga operationer\n    Console.WriteLine(\"Ange ett tal till:\");\n    double tal2 = double.Parse(Console.ReadLine());\n\n    switch (raknesatt)\n    {\n        case \"+\":\n            Console.WriteLine($\"Resultatet \u00e4r: {tal1 + tal2}\");\n            break;\n        case \"-\":\n            Console.WriteLine($\"Resultatet \u00e4r: {tal1 - tal2}\");\n            break;\n        case \"*\":\n            Console.WriteLine($\"Resultatet \u00e4r: {tal1 * tal2}\");\n            break;\n        case \"/\":\n            if (tal2 != 0) // En kontroll s\u00e5 att det inte blir nolldivision!\n            {\n                Console.WriteLine($\"Resultatet \u00e4r: {tal1 / tal2}\");\n            }\n            else\n            {\n                Console.WriteLine(\"Fel: Division med noll \u00e4r inte till\u00e5ten.\");\n            }\n            break;\n        case \"^\":\n            Console.WriteLine($\"Resultatet \u00e4r: {Math.Pow(tal1, tal2)}\");\n            break;\n        default:\n            Console.WriteLine(\"Fel: Ogiltigt r\u00e4knes\u00e4tt.\");\n            break;\n    }\n}\n</code></pre>"},{"location":"content/modul-2/l%C3%B6sn2/#uppgift-8","title":"Uppgift 8","text":"<pre><code>// Be anv\u00e4ndaren att ange en vinkel\nConsole.WriteLine(\"Ange en vinkel i grader:\");\nint vinkel = int.Parse(Console.ReadLine());\n\n// Om vinkeln \u00e4r negativ, konvertera den till en positiv vinkel\nif (vinkel &lt; 0)\n{\n    vinkel = 360 + vinkel;\n}\n\n// Best\u00e4m vilken typ av vinkel det \u00e4r\nif (vinkel == 90)\n{\n    Console.WriteLine(\"Vinkeln \u00e4r r\u00e4t.\");\n}\nelse if (vinkel == 180)\n{\n    Console.WriteLine(\"Vinkeln \u00e4r rak.\");\n}\nelse if (vinkel == 360)\n{\n    Console.WriteLine(\"Vinkeln \u00e4r en hel vinkel.\");\n}\nelse if (vinkel &lt; 90)\n{\n    Console.WriteLine(\"Vinkeln \u00e4r spetsig.\");\n}\nelse if (vinkel &lt; 180)\n{\n    Console.WriteLine(\"Vinkeln \u00e4r trubbig.\");\n}\nelse\n{\n    // https://sv.wikipedia.org/wiki/Vinkel\n    Console.WriteLine(\"Vinkeln \u00e4r reflex.\");\n}\n</code></pre>"},{"location":"content/modul-2/l%C3%B6sn2/#uppgift-9","title":"Uppgift 9","text":"<pre><code>// Be anv\u00e4ndaren att ange ett \u00e5rtal\nConsole.WriteLine(\"Ange ett \u00e5rtal:\");\nstring input = Console.ReadLine();\n\n// Spara returv\u00e4rdet fr\u00e5n TryParse i en variabel\nbool \u00e4rHeltal = int.TryParse(input, out int \u00e5rtal);\n\n// Anv\u00e4nd variabeln i if-satsen och kontrollera att \u00e5rtalet \u00e4r positivt\nif (\u00e4rHeltal &amp;&amp; \u00e5rtal &gt;= 0)\n{\n    // Kontrollera om \u00e5rtalet \u00e4r nutid, d\u00e5tid eller framtid\n    if (\u00e5rtal &lt; 2023)\n    {\n        Console.WriteLine(\"\u00c5rtalet \u00e4r i d\u00e5tiden.\");\n    }\n    else if (\u00e5rtal &gt; 2023)\n    {\n        Console.WriteLine(\"\u00c5rtalet \u00e4r i framtiden.\");\n    }\n    else\n    {\n        Console.WriteLine(\"\u00c5rtalet \u00e4r i nutiden.\");\n    }\n\n    // Kontrollera om det \u00e4r ett skott\u00e5r\n    if ((\u00e5rtal % 4 == 0 &amp;&amp; \u00e5rtal % 100 != 0) || (\u00e5rtal % 400 == 0))\n    {\n        Console.WriteLine(\"Det \u00e4r ett skott\u00e5r.\");\n    }\n    else\n    {\n        Console.WriteLine(\"Det \u00e4r inte ett skott\u00e5r.\");\n    }\n}\nelse\n{\n    // Felmeddelande om inmatningen inte \u00e4r ett giltigt \u00e5rtal eller om det \u00e4r negativt\n    Console.WriteLine(\"Fel: Det var inte ett giltigt positivt \u00e5rtal.\");\n}\n</code></pre>"},{"location":"content/modul-2/l%C3%B6sn2/#uppgift-10","title":"Uppgift 10","text":"<p>a) <pre><code>// Fr\u00e5ga anv\u00e4ndaren hur m\u00e5nga hg godis de vill k\u00f6pa\nConsole.WriteLine(\"Hur m\u00e5nga hekto godis vill du k\u00f6pa?\");\ndouble vikt = double.Parse(Console.ReadLine());\n\n// Best\u00e4m priset beroende p\u00e5 vikten\nif (vikt &lt;= 10)\n{\n    Console.WriteLine($\"Priset \u00e4r {vikt * 9.90} kr.\");\n}\nelse if (vikt &lt;= 20)\n{\n    Console.WriteLine($\"Priset \u00e4r {vikt * 8.90} kr.\");\n}\nelse\n{\n    Console.WriteLine($\"Priset \u00e4r {vikt * 7.90} kr.\");\n}\n</code></pre></p> <p>b) <pre><code>// Fr\u00e5ga anv\u00e4ndaren hur mycket pengar de har\nConsole.WriteLine(\"Hur mycket pengar har du?\");\ndouble pengar = double.Parse(Console.ReadLine());\n\n// Best\u00e4m hur m\u00e5nga hekto godis anv\u00e4ndaren kan k\u00f6pa\n// F\u00f6r 89 kr kan man precis k\u00f6pa 1 kg godis f\u00f6r det billigare priset 8.90\n// Allts\u00e5 \u00e4r allt under 89 automatiskt priskategori 1, det dyrare\nif (pengar &lt;= 89)\n{\n    Console.WriteLine($\"Du kan k\u00f6pa {Math.Round(pengar / 9.90, 2)} hg godis.\");\n}\nelse if (pengar &lt;= 158) // Samma resonemang som ovan, man kan precis k\u00f6pa 2 kg f\u00f6r billigt pris f\u00f6r 158 kr\n{\n    Console.WriteLine($\"Du kan k\u00f6pa {Math.Round(pengar / 8.90, 2)} hg godis.\");\n}\nelse\n{\n    Console.WriteLine($\"Du kan k\u00f6pa {Math.Round(pengar / 7.90, 2)} hg godis.\");\n}\n</code></pre></p>"},{"location":"content/modul-2/l%C3%B6sn2/#uppgift-11","title":"Uppgift 11","text":"<pre><code>// Instruktioner\nConsole.WriteLine(\"L\u00f6ser ekvationer p\u00e5 formen ax^2 + bx + c = 0\");\nConsole.WriteLine(\"a m\u00e5ste vara skiljt fr\u00e5n 0.\");\n\n// Fr\u00e5ga anv\u00e4ndaren om koefficienterna f\u00f6r andragradsekvationen\nConsole.WriteLine(\"Ange v\u00e4rdet p\u00e5 a:\");\ndouble a = double.Parse(Console.ReadLine());\nConsole.WriteLine(\"Ange v\u00e4rdet p\u00e5 b:\");\ndouble b = double.Parse(Console.ReadLine());\nConsole.WriteLine(\"Ange v\u00e4rdet p\u00e5 c:\");\ndouble c = double.Parse(Console.ReadLine());\n\n// Ber\u00e4kna det som st\u00e5r under rottecknet (diskriminanten)\ndouble p = b / a;\ndouble q = c / a;\ndouble diskriminant = (p / 2) * (p / 2) - q;\n\n// Kontrollera l\u00f6sningar beroende p\u00e5 vad som st\u00e5r under rottecknet (diskriminanten)\nif (diskriminant &gt; 0) // Tv\u00e5 l\u00f6sningar\n{\n    double rot1 = -(p / 2) + Math.Sqrt(diskriminant);\n    double rot2 = -(p / 2) - Math.Sqrt(diskriminant);\n    Console.WriteLine($\"Ekvationen har tv\u00e5 reella l\u00f6sningar: {rot1} och {rot2}\");\n}\nelse if (diskriminant == 0) // En l\u00f6sning\n{\n    double rot = -(p / 2);\n    Console.WriteLine($\"Ekvationen har en reell l\u00f6sning: {rot}\");\n}\nelse // Negativ diskriminant, dela upp i tv\u00e5 delar, en reell och en imagin\u00e4r. a.k.a. \"Inga reella l\u00f6sningar\"\n{\n    double reellDel = -(p / 2); // F\u00f6rsta delen precis som vanligt i PQ\n    // Den andra delen, den som \u00e4r roten ur negativt tal, kan vi kalla imagin\u00e4r\n    // Byt tecken p\u00e5 den negativa diskriminanten och ta roten ur, l\u00e4gg sen till \"i\" i utskriften\n    double imagDel = Math.Sqrt(-diskriminant);\n    Console.WriteLine($\"Ekvationen har tv\u00e5 imagin\u00e4ra l\u00f6sningar: {reellDel} + {imagDel}i och {reellDel} - {imagDel}i\");\n}\n</code></pre>"},{"location":"content/modul-2/uppg2/","title":"\u00d6vningar - Modul 2","text":""},{"location":"content/modul-2/uppg2/#uppgift-1","title":"Uppgift 1","text":"<p>Skriv ett program som tar in tv\u00e5 tal fr\u00e5n anv\u00e4ndaren. Programmet ska sedan skriva ut det minsta talet. </p> <p>L\u00e4gg \u00e4ven till en funktion som hanterar specialfallet d\u00e5 talen \u00e4r lika stora.</p>"},{"location":"content/modul-2/uppg2/#uppgift-2","title":"Uppgift 2","text":"<p>Skriv ett program som tar in ett heltal fr\u00e5n anv\u00e4ndaren. Programmet ska unders\u00f6ka om talet \u00e4r j\u00e4mnt eller udda och \u00e5terkoppla den informationen till anv\u00e4ndaren.</p> <p>Programmet ska \u00e4ven ge ett felmeddelande om anv\u00e4ndaren skriver in n\u00e5got annat \u00e4n ett heltal.</p>"},{"location":"content/modul-2/uppg2/#uppgift-3","title":"Uppgift 3","text":"<p>Skriv ett program som k\u00f6r en enkel fr\u00e5gesport med anv\u00e4ndaren, minst 3 fr\u00e5gor, kan handla om vad som helst. </p> <p>Programmet ska st\u00e4lla fr\u00e5gorna i ordning och ge \u00e5terkoppling f\u00f6r varje svar om man svarat r\u00e4tt eller fel.</p> <p>Utveckla programmet med en po\u00e4ngfunktion som efter en genomf\u00f6rd omg\u00e5ng ger \u00e5terkoppling i stil med \"Du fick 3 av 5 m\u00f6jliga r\u00e4tta svar\" eller dylikt.</p>"},{"location":"content/modul-2/uppg2/#uppgift-4","title":"Uppgift 4","text":"<p>Skriv ett program som \"betygs\u00e4tter prov\", programmet ska informera anv\u00e4ndaren om po\u00e4nggr\u00e4nserna och sen fr\u00e5ga anv\u00e4ndaren vad den fick f\u00f6r po\u00e4ng.</p> <p>Programmet ska sedan \u00e5terkoppla till anv\u00e4ndaren vad f\u00f6r omd\u00f6me F/E/D/C/B/A det motsvarar. Det ska inte g\u00e5 att lura programmet med genom att ange mer \u00e4n maxpo\u00e4ng, eller negativa po\u00e4ng, eller annat oklart.</p>"},{"location":"content/modul-2/uppg2/#uppgift-5","title":"Uppgift 5","text":"<p>Skriv ett program som fr\u00e5gar anv\u00e4ndaren vilken veckodag det \u00e4r.</p> <p>Programmet ska f\u00f6rst\u00e5 vilken veckodag som avses oavsett om man anv\u00e4nder stor bokstav eller inte. </p> <p>Programmet ska sedan f\u00f6resl\u00e5 en matr\u00e4tt baserat p\u00e5 veckodagen. M\u00e5ndag och torsdag ska ha samma f\u00f6rslag. Anv\u00e4nd ett switchuttryck f\u00f6r att l\u00f6sa uppgiften.</p>"},{"location":"content/modul-2/uppg2/#uppgift-6","title":"Uppgift 6","text":"<p>Skriv ett program som tar in tre tal fr\u00e5n anv\u00e4ndaren. </p> <p>Programmet ska sedan skriva ut talen prydligt i storleksordning, med det minsta talet f\u00f6rst, ex. 13, 15, 33.</p>"},{"location":"content/modul-2/uppg2/#uppgift-7","title":"Uppgift 7","text":"<p>Skriv en ut\u00f6kad minir\u00e4knare, anv\u00e4ndaren ska kunna v\u00e4lja vilket r\u00e4knes\u00e4tt som anv\u00e4nds fr\u00e5n de fyra r\u00e4knes\u00e4tten. </p> <p>Programmet ska fr\u00e5ga efter ett tal, sen ett r\u00e4knes\u00e4tt, sen ett tal till.</p> <p>Programmet kan med f\u00f6rdel utvecklas till att hantera decimaltal och operationerna roten ur och upph\u00f6jt till.</p>"},{"location":"content/modul-2/uppg2/#uppgift-8","title":"Uppgift 8","text":"<p>Skriv ett program som tar in en vinkel fr\u00e5n anv\u00e4ndaren. Ett tal allts\u00e5.</p> <p>Programmet ska sedan \u00e5terkoppla med vilken \"typ\" av vinkel som angivits, exempelvis om vinkeln \u00e4r spetsig, r\u00e4t, trubbig, rak eller hel (En hel vinkel \u00e4r 360 grader).</p> <p>Programmet ska hantera negativa vinklar p\u00e5 s\u00e5 vis att de \u00f6vers\u00e4tts till positiva, t\u00e4nk enhetscirkeln. Ex. om anv\u00e4ndaren anger en vinkel -90 grader s\u00e5 ska programmet \u00f6vers\u00e4tta det till 270 grader. (Det handlar allts\u00e5 om att ta 360 + x).</p>"},{"location":"content/modul-2/uppg2/#uppgift-9","title":"Uppgift 9","text":"<p>Skriv ett program som tar in ett \u00e5rtal fr\u00e5n anv\u00e4ndaren. Programmet ska protestera via felmeddelande om anv\u00e4ndaren inte skriver in ett \u00e5rtal. Programmet ska inte acceptera negativa \u00e5rtal.</p> <p>Programmet ska sedan svara p\u00e5 om det givna \u00e5rtalet \u00e4r nutid, d\u00e5tid eller framtid. Programmet ska \u00e4ven \u00e5terkoppla om det \u00e4r ett skott\u00e5r.</p>"},{"location":"content/modul-2/uppg2/#uppgift-10","title":"Uppgift 10","text":"<p>En godisbutik har f\u00f6ljande prisbild:</p> <ul> <li>9.90 kr/hg vid k\u00f6p upp till 1 kg</li> <li>8.90 kr/hg vid k\u00f6p fr\u00e5n 1 till 2 kg</li> <li>7.90 kr/hg vid k\u00f6p \u00f6ver 2 kg</li> </ul> <p>a) Skriv ett program som fr\u00e5gar efter vikten i hg och sedan skriver ut priset till anv\u00e4ndaren. 1 kg = 10 hg.</p> <p>b) Skriv ett program som fr\u00e5gar anv\u00e4ndaren hur mycket pengar den har och sen skriver ut hur m\u00e5nga hg godis denne kan k\u00f6pa f\u00f6r pengarna. </p> <p>Notera att f\u00f6r 95 kr kan man k\u00f6pa cirkus 10,67 hg.</p>"},{"location":"content/modul-2/uppg2/#uppgift-11","title":"Uppgift 11","text":"<p>Uppdaterad PQ-formel. Utveckla ditt tidigare program som l\u00f6ser andragradsekvationer, eller skriv ett nytt.</p> <p>Programmet ska nu f\u00f6rutom den tidigare funktionaliteten ocks\u00e5 hantera ekvationer p\u00e5 formen ax^2 + bx + c = 0. </p> <p>Andragradsekvationer kan sakna reella r\u00f6tter, om diskriminanten (uttrycket under rottecknet) \u00e4r negativ. Programmet ska ge ett felmeddelande om detta intr\u00e4ffar, ex. \"Saknar reella l\u00f6sningar\". </p> <p>Alternativt ska programmet svara med ekvationens imagin\u00e4ra r\u00f6tter, ex. x^2 = -9 ger x = 3i och x = -3i</p>"}]}