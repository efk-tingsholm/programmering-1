{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to MkDocs","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"error/","title":"Ej tillg\u00e4ngligt","text":"<p>Inneh\u00e5llet du s\u00f6ker har inte lagts upp \u00e4n. </p> <p>Jag t\u00e4nker v\u00e4l att jag g\u00f6r det n\u00e5gon g\u00e5ng.</p>"},{"location":"content/modul-1/1-datorer-och-programmering/","title":"Datorer och Programmering","text":""},{"location":"content/modul-1/1-datorer-och-programmering/#datorprogram","title":"Datorprogram","text":"<p>N\u00e4r man talar om datorer, inkluderar detta inte bara vanliga persondatorer eller b\u00e4rbara datorer, utan ocks\u00e5 mobiler och surfplattor. Datorer anv\u00e4nds \u00e4ven som komponenter i olika tekniska apparater s\u00e5som mikrov\u00e5gsugnar, tv\u00e4ttmaskiner, leksaker, bilar, trafikljus, hissar och robotgr\u00e4sklippare.</p> <p>Datorer \u00e4r numera en sj\u00e4lvklar del av v\u00e5ra liv och f\u00f6r att dessa ska fungera beh\u00f6ver de programmeras av m\u00e4nniskor. Programmering handlar om att skriva instruktioner som en dator kan f\u00f6rst\u00e5 och utf\u00f6ra. Instruktionerna kallas k\u00e4llkod (kod) eller program (datorprogram) och skrivs i ett programmeringsspr\u00e5k.</p> <p>N\u00e4r ett program utf\u00f6rs (k\u00f6rs) i en dator s\u00e4ger man att programmet exekveras.</p>"},{"location":"content/modul-1/1-datorer-och-programmering/#hur-fungerar-en-dator","title":"Hur fungerar en dator?","text":"<p>Enkelt uttryckt \u00e4r en dator en \"maskin\" som f\u00f6ljer tydliga instruktioner och har till uppgift att: Ta in information (indata), behandla och lagra informationen samt presentera informationen igen (utdata).</p> <p>En dator kan egentligen bara en sak, n\u00e4mligen skilja p\u00e5 tv\u00e5 tillst\u00e5nd, str\u00f6m p\u00e5 och av. Dessa tillst\u00e5nd brukar kallas f\u00f6r ettor och nollor. All information i en dator lagras som ettor och nollor.</p> <p>En dator kan f\u00f6renklat ses som att den \u00e4r uppbyggd av f\u00f6ljande delar: </p>"},{"location":"content/modul-1/1-datorer-och-programmering/#indata","title":"Indata","text":"<p>Att ge information till en dator kan ske med t.ex. tangentbord, mus eller mikrofon. En dator i en robotgr\u00e4sklippare kan f\u00e5 information fr\u00e5n olika sensorer som t.ex. k\u00e4nner av om n\u00e5got \u00e4r i v\u00e4gen.  </p>"},{"location":"content/modul-1/1-datorer-och-programmering/#processor","title":"Processor","text":"<p>\u00c4ven k\u00e4nt som CPU (Central Processing Unit), datorns \"hj\u00e4rna\", d\u00e4r alla instruktioner utf\u00f6rs, dvs d\u00e4r programmet k\u00f6rs (exekveras). Den kan hantera ett visst antal instruktioner. Olika datorer kan ha olika typer av processorer.  </p>"},{"location":"content/modul-1/1-datorer-och-programmering/#minne","title":"Minne","text":"<p>Programmet som ska k\u00f6ras l\u00e4ggs i datorns minne. Det \u00e4r h\u00e4rifr\u00e5n processorn h\u00e4mtar instruktioner. Processorn kan \u00e4ven anv\u00e4nda minnet f\u00f6r att lagra information medans programmet k\u00f6rs.  </p>"},{"location":"content/modul-1/1-datorer-och-programmering/#utdata","title":"Utdata","text":"<p>Att visa information fr\u00e5n en dator kan ske till t.ex. en sk\u00e4rm, h\u00f6gtalare eller skrivare. En dator i en robotgr\u00e4sklippare kan ha t.ex. en lite sk\u00e4rm (display) eller blinkade lysdioder.  </p>"},{"location":"content/modul-1/1-datorer-och-programmering/#program","title":"Program","text":"<p>Ett program \u00e4r en f\u00f6ljd av instruktioner, d\u00e4r varje instruktion representeras av ett antal ettor och nollor. Datorn \u00e4r oerh\u00f6rt snabb p\u00e5 att skilja p\u00e5 dessa ettor och nollor, vilket m\u00f6jligg\u00f6r skapandet av olika typer av program.</p> <p>N\u00e4r ett program \u00e4r skrivet som en serie av ettor och nollor kallas det f\u00f6r maskinkod. Ett program m\u00e5ste vara i maskinkod f\u00f6r att datorns h\u00e5rdvara (t.ex. processor, minne) ska kunna f\u00f6rst\u00e5 programmet och k\u00f6ra det. Maskinkoden ser olika ut beroende p\u00e5 vilken typ av processor datorn har och d\u00e4rf\u00f6r kan inte maskinkod flyttas till en dator med en annan processortyp. Ordet h\u00e5rdvara (fr\u00e5n engelskans hardware) \u00e4r ett samlingsnamn f\u00f6r datorns fysiska delar, dvs alla de saker man kan ta p\u00e5. </p> <p>Datorn f\u00f6rst\u00e5r ju bara maskinkod (ettor och nollor), men det \u00e4r ett spr\u00e5k som \u00e4r sv\u00e5rt f\u00f6r oss m\u00e4nniskor. D\u00e4rf\u00f6r har programmeringsspr\u00e5k skapats som \u00e4r enklare f\u00f6r oss m\u00e4nniskor att skriva och l\u00e4sa, och som sedan kan \u00f6vers\u00e4ttas till maskinkod. </p> <p>Program som skrivs med hj\u00e4lp av ett programmeringsspr\u00e5k kallas f\u00f6r k\u00e4llkod. Ofta anv\u00e4nds det f\u00f6rkortade kod, n\u00e4r man menar k\u00e4llkod. </p>"},{"location":"content/modul-1/1-datorer-och-programmering/#kompilering-interpretering","title":"Kompilering &amp; Interpretering","text":"<p>N\u00e4r man skriver k\u00e4llkod m\u00e5ste man anv\u00e4nda ett specifikt programmeringsspr\u00e5k och f\u00f6lja dess syntax, som \u00e4r reglerna f\u00f6r hur koden ska skrivas. De flesta programmeringsspr\u00e5k \u00e4r p\u00e5 engelska.</p> <p>F\u00f6r att datorn ska kunna k\u00f6ra koden m\u00e5ste den \u00f6vers\u00e4ttas till maskinkod. Det finns tv\u00e5 s\u00e4tt att g\u00f6ra detta: kompilering och interpretering. Kompilerade spr\u00e5k \u00f6vers\u00e4tter koden i f\u00f6rv\u00e4g, medan interpreterade spr\u00e5k \u00f6vers\u00e4tter den i realtid n\u00e4r programmet k\u00f6rs.</p>"},{"location":"content/modul-1/1-datorer-och-programmering/#kompilerade-sprak","title":"Kompilerade spr\u00e5k","text":"<p>Exempel p\u00e5 kompilerade spr\u00e5k \u00e4r C#, Java, C, C++ och Objective-C. Kompilatorn \u00f6vers\u00e4tter koden till maskinkod innan den k\u00f6rs.</p> <p>F\u00f6rdelar:</p> <ul> <li>Snabb exekvering.</li> <li>Tidiga uppt\u00e4ckter av syntaxfel.</li> </ul> <p>Nackdelar:</p> <ul> <li>Extra steg med kompilering.</li> <li>Krav p\u00e5 specifik processortyp.</li> </ul> <p>Kompilerade spr\u00e5k anv\u00e4nds n\u00e4r effektivitet och fels\u00e4kerhet \u00e4r viktigt.</p>"},{"location":"content/modul-1/1-datorer-och-programmering/#interpreterade-sprak","title":"Interpreterade spr\u00e5k","text":"<p>Exempel p\u00e5 interpreterade spr\u00e5k \u00e4r Python, JavaScript, PHP och Ruby. Interpreteraren \u00f6vers\u00e4tter och tolkar koden under exekvering.</p> <p>F\u00f6rdelar:</p> <ul> <li>Portabilitet.</li> <li>Ingen kompileringsprocess.</li> </ul> <p>Nackdelar:</p> <ul> <li>L\u00e5ngsammare exekvering.</li> <li>Risk f\u00f6r syntaxfel vid k\u00f6rning.</li> </ul>"},{"location":"content/modul-1/1-datorer-och-programmering/#lag-och-hognivasprak","title":"L\u00e5g- och h\u00f6gniv\u00e5spr\u00e5k","text":"<p>Det finns m\u00e5nga olika programmeringsspr\u00e5k att v\u00e4lja mellan, som till exempel Python, C#, C++, Java, Javascript och C. </p> <p>Varje spr\u00e5k har sina egna f\u00f6rdelar och \u00e4r bra p\u00e5 olika saker. Till exempel \u00e4r C ofta anv\u00e4ndbart f\u00f6r att styra maskiner och apparater, medan Java \u00e4r k\u00e4nt f\u00f6r att vara bra f\u00f6r att skapa stora datorprogram. N\u00e4r det g\u00e4ller spelutveckling \u00e4r C++ ett popul\u00e4rt val, medan C# anv\u00e4nds f\u00f6r att utveckla olika typer av applikationer och spel, och HTML, CSS och Javascript ofta anv\u00e4nds f\u00f6r att skapa webbsidor p\u00e5 n\u00e4tet.</p>"},{"location":"content/modul-1/1-datorer-och-programmering/#lagnivasprak","title":"L\u00e5gniv\u00e5spr\u00e5k","text":"<p>Historiskt sett n\u00e4r datorer programmerades anv\u00e4ndes l\u00e5gniv\u00e5spr\u00e5k, d\u00e4r koden var mycket detaljerad och v\u00e4ldigt n\u00e4ra det spr\u00e5k som datorn pratar (maskinkod). Det kr\u00e4vde exakt specificerade instruktioner, vilket gav full kontroll \u00f6ver programmet. L\u00e5gniv\u00e5spr\u00e5k anv\u00e4nds idag fr\u00e4mst f\u00f6r sm\u00e5 inbyggda system, exempelvis mikrov\u00e5gsugnar. Exempel p\u00e5 l\u00e5gniv\u00e5spr\u00e5k \u00e4r assembler.</p>"},{"location":"content/modul-1/1-datorer-och-programmering/#hognivasprak","title":"H\u00f6gniv\u00e5spr\u00e5k","text":"<p>N\u00e4sta steg i utvecklingen var mer avancerade programmeringsspr\u00e5k, s.k. h\u00f6gniv\u00e5spr\u00e5k. I dessa skrivs programmet p\u00e5 ett s\u00e4tt som \u00e4r l\u00e4ttare att f\u00f6rst\u00e5 f\u00f6r m\u00e4nniskor.  I h\u00f6gniv\u00e5spr\u00e5k fokuserar man p\u00e5 att beskriva vad som ska g\u00f6ras ist\u00e4llet f\u00f6r exakt hur det ska g\u00f6ras. \u00a0H\u00f6gniv\u00e5spr\u00e5k m\u00e5ste konverteras till maskinkod med hj\u00e4lp av en interpretator eller kompilator, beroende p\u00e5 vilket programmeringsspr\u00e5k som anv\u00e4nds. Det \u00e4r kompilatorn eller interpretatorn som styr hur koden utf\u00f6rs p\u00e5 detaljniv\u00e5.</p> <p>De vanligaste spr\u00e5ken har fler likheter \u00e4n olikheter, och alla inneh\u00e5ller instruktioner f\u00f6r:</p> <ul> <li>Sekvens - Instruktioner som sker i tur och ordning.</li> <li>Villkor - Styr vilka instruktioner som ska utf\u00f6ras.</li> <li>Repetition - Upprepning av instruktioner.</li> </ul>"},{"location":"content/modul-1/1-datorer-och-programmering/#vad-ar-c","title":"Vad \u00e4r C#?","text":"<p>C# (uttalas \"C sharp\") \u00e4r ett programmeringsspr\u00e5k som utvecklats av Microsoft och introducerades \u00e5r 2000.</p> <p>C# skapades med m\u00e5let att vara ett modernt, kraftfullt och l\u00e4ttanv\u00e4nt spr\u00e5k f\u00f6r att utveckla olika typer av program och applikationer f\u00f6r Microsoft-plattformar som Windows. Men med tiden har spr\u00e5ket blivit alltmer plattformsoberoende och numer kan man skriva och k\u00f6ra sina program p\u00e5 olika operativsystem som Windows, Linux och macOS. </p> <p>Ett av de mest intressanta dragen med C# \u00e4r dess n\u00e4ra koppling till Microsofts .NET-plattform. Detta betyder att C#-program kan dra nytta av .NET:s stora ekosystem av bibliotek och verktyg f\u00f6r att snabbt och effektivt bygga robusta och skalbara applikationer.</p> <p>C# har blivit ett popul\u00e4rt programmeringsspr\u00e5k tack vare dess anv\u00e4ndarv\u00e4nlighet, kraftfulla funktioner och breda anv\u00e4ndningsomr\u00e5den, vilket inkluderar allt fr\u00e5n desktopapplikationer till webbutveckling och spelprogrammering. F\u00f6r nyb\u00f6rjare \u00e4r C# ett utm\u00e4rkt val f\u00f6r att l\u00e4ra sig grunderna i programmering samtidigt som det erbjuder tillr\u00e4ckligt med funktionalitet f\u00f6r att hantera mer avancerade projekt.</p>"},{"location":"content/modul-1/1-datorer-och-programmering/#c-jamfort-med-cc","title":"C# j\u00e4mf\u00f6rt med C/C++","text":"<p>C# \u00e4r ett h\u00f6gniv\u00e5spr\u00e5k med moderna funktioner och starkt st\u00f6d f\u00f6r objektorienterad programmering, vilket g\u00f6r det enklare att utveckla och underh\u00e5lla program j\u00e4mf\u00f6rt med C och C++. Medan C och C++ \u00e4r n\u00e4rmare knutna till datorns h\u00e5rdvara och erbjuder mer direkt kontroll, ger C# en h\u00f6gre abstraktionsniv\u00e5 och plattformsoberoende genom Microsofts .NET-plattform.</p>"},{"location":"content/modul-1/1-datorer-och-programmering/#ide-integrated-development-environment","title":"IDE - Integrated Development Environment","text":"<p>\u00c4ven k\u00e4nt som \"programmet som man skriver kod i.\"</p> <p>En IDE, eller Integrated Development Environment, \u00e4r en programvara som erbjuder utvecklare en komplett milj\u00f6 f\u00f6r att skriva, testa, fels\u00f6ka och distribuera program. Den kombinerar vanligtvis textredigerare med andra funktioner s\u00e5som kodkomplettering och fels\u00f6kning.</p> <p>Vi kommer att anv\u00e4nda Visual Studio Community Edition f\u00f6r att skriva och utveckla C#-program. Visual Studio \u00e4r en kraftfull och popul\u00e4r IDE utvecklad av Microsoft och erbjuder ett brett utbud av funktioner och verktyg som underl\u00e4ttar utvecklingsprocessen. Community Edition \u00e4r gratis f\u00f6r studenter och enskilda utvecklare.</p> <p>F\u00f6rutom Visual Studio finns det ocks\u00e5 andra popul\u00e4ra IDE:er s\u00e5som Rider och Visual Studio Code. Ut\u00f6ver detta kan man ocks\u00e5 hitta webbaserade IDE:er online, exempelvis Replit. </p>"},{"location":"content/modul-1/2-variabler/","title":"Variabler","text":"<p>Ibland n\u00e4r man r\u00e4knar ut n\u00e5got kan man inte utf\u00f6ra hela ber\u00e4kningen p\u00e5 en g\u00e5ng, utan g\u00f6r det i steg, r\u00e4knar ut en sak i taget och skriver ned sina delresultat f\u00f6r att sedan kunna ber\u00e4kna slutresultatet.</p> <p>P\u00e5 motsvarande s\u00e4tt kan ber\u00e4kningar i ett datorprogram utf\u00f6ras stegvis, och information m\u00e5ste sparas f\u00f6r att kunna anv\u00e4ndas senare. Informationen sparas i variabler, namngivna objekt vars v\u00e4rde kan variera. </p> <p>Ett s\u00e4tt att t\u00e4nka p\u00e5 en variabel \u00e4r som en l\u00e5da som man kan l\u00e4gga v\u00e4rden i. Ett program kan inneh\u00e5lla m\u00e5nga variabler s\u00e5 varje variabel har ett eget namn. </p> <p>N\u00e4r man deklarerar (skapar) en variabel beh\u00f6ver man ange dess datatyp och dess namn. Om man sedan ger variabeln ett v\u00e4rde kallas det f\u00f6r tilldelning. Man tilldelar variabeln ett v\u00e4rde med hj\u00e4lp av ett likhetstecken, variabeln \u00e4r alltid p\u00e5 v\u00e4nster sida.</p> <p><pre><code>// Deklarerar en variabel av datatypen int.\nint age;  \n// Tilldelar v\u00e4rdet 18 till variabeln age.\nage = 18;\n</code></pre> </p> <p>Detta kan utf\u00f6ras p\u00e5 en rad, om man redan fr\u00e5n b\u00f6rjan vet vad v\u00e4rdet ska vara. Detta kallas f\u00f6r initiering. <pre><code>// Initierar variabeln myName.\nstring myName = \"Emil\"; \n</code></pre></p> <p>Flera variabler av samma datatyp kan deklareras i samma sats (p\u00e5 samma rad). Detta g\u00e4ller \u00e4ven tilldelning. <pre><code>// Deklarerar tre variabler av typen int.\nint a, b, c; \n\n// Tilldelar de tre variablerna v\u00e4rdet 5.\na = b = c = 5; \n</code></pre></p> <p>Variablers v\u00e4rde kan \u00e4ndras under programmets k\u00f6rtid. <pre><code>string myName = \"Emil\";\n\n// Tilldelar variabeln ett nytt v\u00e4rde.\nmyName = \"Anna\"; \n\n// Skriver ut variabelns v\u00e4rde.\nConsole.WriteLine(myName); // Ger utskriften Anna.\n</code></pre></p> <p>Variabler kan tilldelas v\u00e4rden fr\u00e5n andra variabler. <pre><code>// Initierar a till 2. Tilldelar b v\u00e4rdet fr\u00e5n a, allts\u00e5 tv\u00e5.\nint a = 2;\nint b = a; \n\n// Tilldelar b sitt eget v\u00e4rde plus 10, allts\u00e5 12.\nb = b + 10; \n</code></pre></p>"},{"location":"content/modul-1/2-variabler/#variabelnamn","title":"Variabelnamn","text":"<p>Ge alltid variabler tydliga f\u00f6rklarande namn, s\u00e5 att det tydligt framg\u00e5r vad variabeln ska anv\u00e4ndas till. Ett namn kan inneh\u00e5lla bokst\u00e4ver och siffror, men inte b\u00f6rja p\u00e5 en siffra. Det \u00e4r skillnad p\u00e5 sm\u00e5 och stora bokst\u00e4ver. </p> <p>Det finns m\u00e5nga olika s\u00e4tt att namnge variabler. I C# anv\u00e4nds camelCase f\u00f6r vanliga variabler. Inledande gemen (liten bokstav), d\u00e4r varje nytt ord i variabeln inleds med versal (stor bokstav). Inga mellanslag eller understreck. </p> <p>Det finns \u00e4ven en del ord som \u00e4r reserverade av C#, som inte kan anv\u00e4ndas som variabelnamn, dessa kallas nyckelord.</p> <pre><code>int maxValue;  // JA\nint MaxValue;  // NEJ, stor bokstav i b\u00f6rjan\nint maxvalue;  // NEJ, saknar stor bokstav p\u00e5 andra ordet\nint max_value; // NEJ, understreck\nint max value; // ERROR, inga mellanslag\nint int;       // ERROR, int \u00e4r ett reserverat nyckelord\n</code></pre> <p>Riktlinjer f\u00f6r namngivning av variabler:</p> <ul> <li> <p>I den h\u00e4r kursen f\u00e5r du v\u00e4lja sj\u00e4lv om du anv\u00e4nder svenska eller engelska variabelnamn. Men var konsekvent genom ditt projekt. Antingen \u00e4r alla variabelnamn i projektet p\u00e5 svenska, eller p\u00e5 engelska.</p> </li> <li> <p>Ha hellre ett lite l\u00e4ngre och beskrivande namn \u00e4n en mer eller mindre obegriplig f\u00f6rkortning. Ditt framtida jag kommer tacka dig n\u00e4r denne  l\u00e4ser kod du skrivit.</p> </li> <li> <p>Anv\u00e4nd camelCase.</p> </li> </ul>"},{"location":"content/modul-1/3-datatyper/","title":"Datatyper","text":"<p>Olika typer av variabler kan lagra olika typer av v\u00e4rden. Det \u00e4r lite som att man inte b\u00f6r t\u00f6mma saft i kakburken, eller f\u00f6rs\u00f6ka l\u00e4gga kakorna i saftflaskan. Dessa typer kallas datatyper.\u00a0</p> <p>Variablers datatyp talar om f\u00f6r kompilatorn vilka operationer som kan utf\u00f6ras f\u00f6r den aktuella variabeln. Olika datatyper tar ocks\u00e5 olika stor plats i minnet, s\u00e5 genom korrekt anv\u00e4ndande av datatyper kan man optimera minnesanv\u00e4ndningen. </p>"},{"location":"content/modul-1/3-datatyper/#primitiva-datatyper-i-c","title":"Primitiva datatyper i C#","text":"<p>Primitiva datatyper \u00e4r de grundl\u00e4ggande datatyperna som anv\u00e4nds f\u00f6r att lagra v\u00e4rden i ett program, och utg\u00f6r grunden f\u00f6r att skapa mer komplexa datatyper. Dessa kan skilja sig \u00e5t lite beroende p\u00e5 programmeringsspr\u00e5k. </p> <p>Tabellen nedan tar upp vanligt f\u00f6rekommande primitiva datatyper i C#.</p> Datatyp Beskrivning Storlek Intervall int Heltal 32 bits \u22122\u00b3\u00b9 till 2\u00b3\u00b9\u22121 long Heltal 64 bits \u22122\u2076\u00b3 till 2\u2076\u00b3\u22121 float Flyttal 32 bits \u22123,4\u00b710\u00b3\u2078 till 3,4\u00b710\u00b3\u2078 double Flyttal, dubbel precision 64 bits \u00b15,0\u00b710\u00b3\u00b2\u2074 till \u00b11,7\u00b710\u00b3\u2070\u2078 decimal Flyttal, h\u00f6g precision 128 bits 28 g\u00e4llande siffror string Sekvens av tecken 16 bits/tecken Ej applicerbart char Enskilt tecken 16 bits Ett enskilt tecken bool Boolean 8 bits Sant eller falskt"},{"location":"content/modul-1/3-datatyper/#flyttal","title":"Flyttal","text":"<p>Ett flyttal \u00e4r en datatyp som anv\u00e4nds f\u00f6r att representera decimaltal. Till skillnad fr\u00e5n heltal \u00e4r flyttal en approximation av ett decimaltal och kan d\u00e4rf\u00f6r inte representera alla decimaler exakt, utan ger en uppskattning av det verkliga v\u00e4rdet. Detta inneb\u00e4r att flyttal kan ha begr\u00e4nsad precision, vilket kan leda till avrundningsfel i ber\u00e4kningar. </p> <p>Nedan f\u00f6ljer ett exempel p\u00e5 s\u00e5dant avrundningsfel, som i grund och botten \u00e4r baserat p\u00e5 att datorn inte f\u00f6rst\u00e5r o\u00e4ndlig decimalutveckling. <pre><code>// V\u00e4rdet p\u00e5 variablen num borde vara 0,3.\ndouble num = 0.1 + 0.2; \n// Det kommer skrivas ut som 0,30000000000000004.\nConsole.WriteLine(num);\n</code></pre></p>"},{"location":"content/modul-1/3-datatyper/#char","title":"char","text":"<p>Namnet kommer fr\u00e5n engelskans character, och datatypen anv\u00e4nds f\u00f6r att representera enskilda tecken, exempelvis en bokstav. </p> <p>Datorn lagrar som bekant bara ettor och nollor, s\u00e5 varje tecken har en egen sifferkod, enligt en given teckentabell. Exempelvis ASCII och Unicode. </p> <p>Allts\u00e5 \u00e4r varje bokstav egentligen bara ett heltal f\u00f6r datorn. Exempelvis enligt b\u00e5da ovan n\u00e4mnda exempel s\u00e5 \u00e4r sifferkoden f\u00f6r lilla a lika med 97. Notera att f\u00f6r stora A \u00e4r den 65. <pre><code>// Man kan direkt spara en char som en integer\nint myInt = 'A';\nConsole.WriteLine(myInt); // Ger utskriften \"65\".\n\n// Sifferkoden kan anv\u00e4ndas f\u00f6r att \"casta\" en int till char.\nchar myChar = (char)97;\nConsole.WriteLine(myChar); // Ger utskriften \"a\".\n</code></pre></p>"},{"location":"content/modul-1/3-datatyper/#string","title":"string","text":"<p>En string \u00e4r en serie tecken, chars, efter varandra. Man kan komma \u00e5t enskilda tecken via dess index. <pre><code>string myString = \"Hejsan!\";\nConsole.WriteLine(myString[1]); // Ger utskriften \"e\".\n</code></pre></p>"},{"location":"content/modul-1/4-operatorer/","title":"Operatorer","text":"<p>Operatorer inom programmering fungerar som inom matematiken, ett skrivs\u00e4tt som symboliserar en viss funktion. Ett exempel p\u00e5 en operator \u00e4r plustecknet. I exemplet \"2 + 3\" inneb\u00e4r plustecknet att man ska addera v\u00e4rdet av de tv\u00e5 operanderna, allts\u00e5 tv\u00e5 och tre. </p> <p>Operatorer inom programmering kan delas in i olika kategorier baserat p\u00e5 deras funktion. </p>"},{"location":"content/modul-1/4-operatorer/#matematiska-operatorer","title":"Matematiska operatorer","text":"<p>\u00c4ven k\u00e4nt som aritmetiska operatorer.</p>"},{"location":"content/modul-1/4-operatorer/#addition-eller-konkatenering","title":"+\u2003Addition eller konkatenering","text":"<p>Plustecknet fungerar olika i olika situationer.  <pre><code>// Addition, l\u00e4gga ihop tal\nint a = 3 + 4; // a f\u00e5r v\u00e4rdet 7.\n\n// Konkatenering, om en eller fler av operanderna \u00e4r string \nstring b = \"Hej\" + \"d\u00e5\";  // b f\u00e5r v\u00e4rdet \"Hejd\u00e5\".\nstring c = \"Hej\" + 19;    // c f\u00e5r v\u00e4rdet \"Hej19\".\nstring d = \"3\" + 4;       // d f\u00e5r v\u00e4rdet 34.\n</code></pre></p>"},{"location":"content/modul-1/4-operatorer/#-subtraktion","title":"-\u2003Subtraktion","text":"<pre><code>int a = 10 - 7; // a f\u00e5r v\u00e4rdet 3.\n\n// Minustecknet kan ocks\u00e5 anv\u00e4ndas f\u00f6r att multiplicera med -1.\nint b = -a; // b f\u00e5r v\u00e4rdet -3.\n</code></pre>"},{"location":"content/modul-1/4-operatorer/#multiplikation","title":"*\u2003Multiplikation","text":"<pre><code>int a = 3 * 2; // a f\u00e5r v\u00e4rdet 6.\n</code></pre>"},{"location":"content/modul-1/4-operatorer/#division","title":"/\u2003Division","text":"<p>Om man utf\u00f6r heltalsdivision, allts\u00e5 man delar ett heltal med ett annat heltal blir resultatet alltid ett heltal, decimalerna trunkeras(sk\u00e4rs) bort. <pre><code>int a = 12 / 3;    // a f\u00e5r v\u00e4rdet 4.\ndouble b = 5 / 2;  // b f\u00e5r v\u00e4rdet 2. \u00c4ven om det sparas i en double.\n\n// Om EN av operanderna \u00e4r i decimalform blir ocks\u00e5 svaret med decimaler.\ndouble c = 5.0 / 2; // c f\u00e5r v\u00e4rdet 2.5 \n</code></pre></p>"},{"location":"content/modul-1/4-operatorer/#modulus","title":"%\u2003Modulus","text":"<p>Modulusber\u00e4kning ger resten vid division.  <pre><code>int a = 7 % 3; // a f\u00e5r v\u00e4rdet 1. Eftersom 3 g\u00e5r tv\u00e5 g\u00e5nger i 7.\nint b = 8 % 4; // b f\u00e5r v\u00e4rdet 0. D\u00e5 divisionen g\u00e5r j\u00e4mnt ut.\n</code></pre></p>"},{"location":"content/modul-1/4-operatorer/#tilldelande-operatorer","title":"Tilldelande operatorer","text":""},{"location":"content/modul-1/4-operatorer/#tilldelning","title":"=\u2003Tilldelning","text":"<p>Likhetstecknet anv\u00e4nds som tilldelningsoperator, allts\u00e5 att s\u00e4tta ett v\u00e4rde p\u00e5 en variabel. <pre><code>int a = 5;\nstring b = \"Hej\";\nbool c = True;\n</code></pre></p>"},{"location":"content/modul-1/4-operatorer/#addera-och-tilldela","title":"+=\u2003Addera och tilldela","text":"<pre><code>int a = 12; // a tilldelas v\u00e4rdet 12 fr\u00e5n b\u00f6rjan.\n\n// \u00d6ka v\u00e4rdet p\u00e5 a med 8, vanlig tilldelning.\na = a + 8; // a f\u00e5r v\u00e4rdet 20. \n\n// \u00d6kar ocks\u00e5 v\u00e4rdet p\u00e5 variabeln a med 8, f\u00f6rkortat skrivs\u00e4tt.\na += 8; // a f\u00e5r v\u00e4rdet 28.\n</code></pre>"},{"location":"content/modul-1/4-operatorer/#-subtrahera-och-tilldela","title":"-=\u2003Subtrahera och tilldela","text":"<pre><code>int a = 12; // a tilldelas v\u00e4rdet 12 fr\u00e5n b\u00f6rjan.\n\na -= 10; // a f\u00e5r v\u00e4rdet 2. a = a - 10.\n</code></pre>"},{"location":"content/modul-1/4-operatorer/#-oka-eller-minska-med-ett","title":"++, --\u2003\u00d6ka eller minska med ett","text":"<p>Det \u00e4r vanligt f\u00f6rekommande att man beh\u00f6ver \u00f6ka eller minska variabelns v\u00e4rde med ett, det finns d\u00e5 en ytterligare f\u00f6rkortad tilldelningsoperator.  <pre><code>int a = 12; // a tilldelas v\u00e4rdet 12 fr\u00e5n b\u00f6rjan.\n\na++; // a f\u00e5r v\u00e4rdet 13. F\u00f6rtkortning av a = a + 1;\na--; // a f\u00e5r v\u00e4rdet 12 igen. F\u00f6rtkortning av a = a - 1;\n</code></pre> \u00d6kning respektive minskning med ett kan anv\u00e4nds antingen f\u00f6re eller efter variabeln vars v\u00e4rde ska p\u00e5verkas, detta avg\u00f6r vilket v\u00e4rde som returneras. <pre><code>int a = 10;\n\n// Skriver ut v\u00e4rdet p\u00e5 a, SEN \u00f6ka med 1.\nConsole.WriteLine(a++); // Ger utskriften 10. \n\n// \u00d6kar v\u00e4rdet p\u00e5 a med 1 F\u00d6RST, sen skriver ut v\u00e4rdet.\nConsole.WriteLine(++a); // Ger utskriften 12.\n</code></pre></p>"},{"location":"content/modul-1/4-operatorer/#multiplicera-och-tilldela","title":"*=\u2003Multiplicera och tilldela","text":"<pre><code>int a = 12; // a tilldelas v\u00e4rdet 12 fr\u00e5n b\u00f6rjan.\n\na *= 2; // a f\u00e5r v\u00e4rdet 24. a = 12 * 2.\n</code></pre>"},{"location":"content/modul-1/4-operatorer/#dividera-och-tilldela","title":"/=\u2003Dividera och tilldela","text":"<pre><code>int a = 12; // a tilldelas v\u00e4rdet 12 fr\u00e5n b\u00f6rjan.\n\na /= 2; // a f\u00e5r v\u00e4rdet 6. a = 12 / 2.\n</code></pre>"},{"location":"content/modul-1/4-operatorer/#modulus-och-tilldela","title":"%=\u2003Modulus och tilldela","text":"<pre><code>int a = 12; // a tilldelas v\u00e4rdet 12 fr\u00e5n b\u00f6rjan.\n\na %= 2; // a f\u00e5r v\u00e4rdet 0. Eftersom 12 % 2 = 0.\n</code></pre>"},{"location":"content/modul-1/4-operatorer/#jamforandeboolska-operatorer","title":"J\u00e4mf\u00f6rande/Boolska operatorer","text":"<p>J\u00e4mf\u00f6rande operatorer ger upphov till en boolskt v\u00e4rde, sant eller falskt. Dessa anv\u00e4nds oftast i villkorssatser, exempelvis if-satser, snarare \u00e4n att tilldelas eller skrivas ut direkt som i vissa exempel nedan.</p>"},{"location":"content/modul-1/4-operatorer/#mindre-an-storre-an","title":"&lt;,&gt;\u2003Mindre \u00e4n, st\u00f6rre \u00e4n","text":"<pre><code>bool a = 10 &gt; 6; // a f\u00e5r v\u00e4rdet true.\n\nint b = 5;\nConsole.WriteLine(b &lt; 3); // Ger utskriften False.\n</code></pre>"},{"location":"content/modul-1/4-operatorer/#mindre-an-eller-lika-med-storre-an-eller-lika-med","title":"&lt;=, &gt;=\u2003Mindre \u00e4n eller lika med, st\u00f6rre \u00e4n eller lika med","text":"<pre><code>bool a = 6 &gt;= 6; // a f\u00e5r v\u00e4rdet true.\n\nint b = 5;\nConsole.WriteLine(b &lt;= 3); // Ger utskriften False.\n</code></pre>"},{"location":"content/modul-1/4-operatorer/#lika-med","title":"==\u2003Lika med","text":"<pre><code>bool a = 3 == 4; // a f\u00e5r v\u00e4rdet False, eftersom 3 inte \u00e4r 4.\n</code></pre>"},{"location":"content/modul-1/4-operatorer/#skiljt-fran","title":"!=\u2003Skiljt fr\u00e5n","text":"<pre><code>Console.WriteLine(5 != 20); // Ger utskriften True.\n</code></pre>"},{"location":"content/modul-1/4-operatorer/#logiska-operatorer","title":"Logiska operatorer","text":""},{"location":"content/modul-1/4-operatorer/#and-och","title":"&amp;&amp;\u2003And (Och)","text":"<p>Och-operatorn ger resultatet True om b\u00e5da operanderna \u00e4r True, allts\u00e5 om det \u00e4r True p\u00e5 b\u00e5da sidorna om &amp;&amp;. <pre><code>int a = 12;\n\n// 5 \u00e4r st\u00f6rre \u00e4n 2 OCH 8 \u00e4r mindre \u00e4n a.\nConsole.WriteLine(5 &gt; 2 &amp;&amp; 8 &lt; a); // Ger utskriften True.\n\nConsole.WriteLine(a == 12 &amp;&amp; a &lt; 10); // ger utskriften False.\n</code></pre></p>"},{"location":"content/modul-1/4-operatorer/#or-eller","title":"||\u2003Or (Eller)","text":"<p>Eller-operatorn ger resultatet True om minst en av operanderna \u00e4r True. <pre><code>bool a = True; \n\n// a \u00e4r True ELLER 5 \u00e4r lika med 19. Beh\u00f6ver inte skriva a == true.\nConsole.WriteLine(a || 5 == 19); // Ger utskriften True. a \u00e4r true.\n\n// H\u00e4r anv\u00e4nds det boolska v\u00e4rdet false direkt \nConsole.WriteLine(false || 6 &gt; 0 ); // Ger utskriften False. B\u00e5da \u00e4r falska.\n\n//V\u00e4rdet fr\u00e5n en logisk operator kan ocks\u00e5 sparas i en variabel\nbool b = 5 &lt; 10 || a; // b f\u00e5r v\u00e4rdet true, b\u00e5da \u00e4r true.\n</code></pre></p>"},{"location":"content/modul-1/4-operatorer/#prioriteringsordning","title":"Prioriteringsordning","text":"<p>Inom programmering fungerar prioriteringsordning ganska likt matematiken, olika operatorer har olika prioritet, och de med h\u00f6gst prioritet utv\u00e4rderas f\u00f6rst. Ut\u00f6ver detta kan parenteser anv\u00e4ndas f\u00f6r att styra ordningen.</p> <p>Lite f\u00f6renklat kan prioriteringsordningen s\u00e4gas vara:</p>"},{"location":"content/modul-1/4-operatorer/#1-raknesatt","title":"1. R\u00e4knes\u00e4tt","text":"<p>R\u00e4knes\u00e4tten har ocks\u00e5 en inb\u00f6rdes prioriteringsordning precis som i matematiken. 1. Postfix ++ och -- 2. Prefix ++ och --, \u00e4ven andra unit\u00e4ra operatorer s\u00e5som - och ! 3. Multiplikation, Division och Modulus 4. Addition och Subtraktion</p> <pre><code>int a = 3 + 4 * 5; // a f\u00e5r v\u00e4rdet 23. Multiplikation h\u00f6gre prioritet.\n\nint b = 10;\nConsole.WriteLine(b++ * 2); // Ger utskriften 20. b blir 11 n\u00e4sta rad och fram\u00e5t.\n\nConsole.WriteLine(++b * 2); // Ger utskriften 24. b blir 12, sen g\u00e5nger 2.\n</code></pre>"},{"location":"content/modul-1/4-operatorer/#2-jamforelser","title":"2. J\u00e4mf\u00f6relser","text":"<p>Mindre \u00e4n, st\u00f6rre \u00e4n, lika med, etc.</p>"},{"location":"content/modul-1/4-operatorer/#3-logiska-operatorer","title":"3. Logiska operatorer","text":"<p>Innefattar AND och OR. Notera att AND har h\u00f6gre prioritet \u00e4n OR. <pre><code>// H\u00e4r utv\u00e4rderas \"false &amp;&amp; true\" till false, sen \"false || true\" till true. \nConsole.WriteLine(false &amp;&amp; true || true); // Ger utskriften True.\n</code></pre></p>"},{"location":"content/modul-1/4-operatorer/#4-tilldelningar","title":"4. Tilldelningar","text":"<p>B\u00e5de vanlig tilldelning med =, men ocks\u00e5 de tilldelande aritmetiska operatornerna exempelvis +=.</p>"},{"location":"content/modul-1/5-typkonvertering/","title":"Typkonvertering","text":"<p>Att omvandla information fr\u00e5n en datatyp till en annan kan kallas f\u00f6r att typkonvertera, att byta typ.</p>"},{"location":"content/modul-1/5-typkonvertering/#implicit-konvertering","title":"Implicit konvertering","text":"<p>I vissa situationer kan typkonvertering ske utan att en specifik operator anv\u00e4nds, bara genom att tilldela informationen till en variabel med den \u00f6nskade datatypen. Detta \u00e4r generellt genomf\u00f6rbart n\u00e4r ingen information eller precision g\u00e5r f\u00f6rlorad.</p> <p>Heltalsv\u00e4rdet 3 kan utan vidare g\u00f6ras om till flyttal. Fr\u00e5n en datatyp med mindre information/precision till en med mer. <pre><code>int a = 3;\n\n// V\u00e4rdet fr\u00e5n integer a sparas som flyttal\nfloat b = a;\ndouble c = a;\n</code></pre></p> <p>Att implicit konvertera \u00e5t andra h\u00e5llet, fr\u00e5n en datatyp med mer information/precision, g\u00e5r inte att g\u00f6ra implicit. Exempelvis kan inte 4,3 utan vidare skrivas som ett heltal. <pre><code>double a = 4.3;\n\n// B\u00e5da f\u00f6ljande rader ger upphov till kompileringsfel\nint b = a; // ERROR\nfloat c = a; // ERROR, notera att float har l\u00e4gre precision \u00e4n double\n</code></pre></p>"},{"location":"content/modul-1/5-typkonvertering/#explicit-konvertering-casting","title":"Explicit konvertering - Casting","text":"<p>N\u00e4r en typkonvertering inneb\u00e4r f\u00f6rlust av precision, exempelvis fr\u00e5n float till int, kan ibland casting, eller type casting, anv\u00e4ndas. Jag har inte hittat ett fint svenskt ord. </p> <p>Detta inneb\u00e4r att man i k\u00e4llkoden skriver den datatyp som informationen ska konverteras till inom parenteser innan v\u00e4rdet som ska konverteras <pre><code>float a = 9.8f;\n\n// Konvertera v\u00e4rdet i \"a\" till int, tilldela till b.\nint b = (int)a\n\n// Notera, avrundar INTE. Trunkerar, allts\u00e5 sk\u00e4r bort decimaler.\nConsole.WriteLine(b) // Ger utskriften 9.\n</code></pre></p>"},{"location":"content/modul-1/5-typkonvertering/#hjalpmetoder","title":"Hj\u00e4lpmetoder","text":"<p>Det finns lite hj\u00e4lpmetoder som kan l\u00f6sa konvertering n\u00e4r inte casting fungerar, ofta handlar det om att konvertera en str\u00e4ng till ett tal.</p>"},{"location":"content/modul-1/5-typkonvertering/#parse","title":"Parse()","text":"<p>Parse \u00e4r en metod som finns i de flesta numeriska datatyper, s\u00e5som int, float, double och s\u00e5 vidare. Denna tar emot en str\u00e4ng och f\u00f6rs\u00f6ker konvertera till ett tal. Om konverteringen misslyckas ger det upphov till ett exekveringsfel, och programmet \"kraschar\".</p> <p>Exempelvis kan str\u00e4ngen \"19\" konverteras till ett heltal via metoden int.Parse(). <pre><code>// Notera att detta \u00e4r en str\u00e4ng med 1 och 9, inte ett tal.\nstring text = \"19\"; \n\n// Anropar Parse via datatypen int f\u00f6r att konvertera till int.\nint number = int.Parse(text);\n\n// Parse finns \u00e4ven tillg\u00e4nglig f\u00f6r double.\ndouble number2 = double.Parse(\"12,34\");\n\n// Om man skickar in trams uppst\u00e5r exekveringsfel.\nfloat number3 = float.Parse(\"Trams\"); //ERROR\n</code></pre></p> <p>Tips</p> <p>Ett annat klassiskt s\u00e4tt att uppn\u00e5 exekveringsfel med metoden int.Parse() \u00e4r genom att skriva in \"2147483648\", allts\u00e5 dryga tv\u00e5 miljarder.</p> <p>Detta f\u00f6r att v\u00e4rdet \u00f6verskrider den maximala storleken f\u00f6r en int.</p>"},{"location":"content/modul-1/5-typkonvertering/#tryparse","title":"TryParse()","text":"<p>F\u00f6r att hantera situationer d\u00e4r trams kan uppst\u00e5, se k\u00e4llkoden ovan, kan metoden TryParse() anv\u00e4ndas. Den \u00e4r precis som Parse() men ger inga exekveringsfel om den tar emot felaktiga argument, s\u00e5som \"Trams\". </p> <p>I Likhet med Parse() finns TryParse() tillg\u00e4nglig i numeriska datatyper. D\u00e4remot \u00e4r syntaxen lite annorlunda, eftersom TryParse() g\u00f6r tv\u00e5 saker, ber\u00e4ttar om det gick att konvertera, och ger oss det konverterade v\u00e4rdet.</p> <p>Exempelvis s\u00e5 kan str\u00e4ngen \"19\" konverteras, igen. <pre><code>string text = \"19\";\nint number; // H\u00e4r ska resultatet av konverteringen sparas\nbool isNumber = int.TryParse(text, out number);\n\nConsole.WriteLine(number); // Ger utskriften 19.\nConsole.WriteLine(isNumber); // Ger utskriften True.\n</code></pre> Notera hur vi f\u00e5r ut resultatet fr\u00e5n konverteringen, allts\u00e5 heltalet 19, via \"out number\" i exemplet. Metoden i sig returnerar en bool som talar om huruvida konverteringen var framg\u00e5ngsrik, i ovanst\u00e5ende exempel blir den True. </p> <p>Om konvertering misslyckas returneras ist\u00e4llet False. Resultatet fr\u00e5n konverteringen, som d\u00e5 inte kunde g\u00f6ras, blir v\u00e4rdet 0. Se nedan. <pre><code>string text = \"Trams\";\nint number; // H\u00e4r ska resultatet av konverteringen sparas\nbool isNumber = int.TryParse(text, out number);\n\nConsole.WriteLine(number); // Ger utskriften 0.\nConsole.WriteLine(isNumber); // Ger utskriften False.\n</code></pre></p>"},{"location":"content/modul-1/5-typkonvertering/#tostring","title":"ToString()","text":"<p>I vissa situationer har man behov av att konvertera n\u00e5got till en str\u00e4ng, metoden ToString() kan appliceras p\u00e5 det mesta.</p> <p>Notera hur den anropas genom att skriva \".ToString()\" efter det som ska konverteras. <pre><code>double a = 123.456;\nstring b = a.ToString(); // b tilldelas str\u00e4ngen \"123,456\".\n</code></pre></p>"},{"location":"content/modul-1/5-typkonvertering/#hjalpklassen-convert","title":"Hj\u00e4lpklassen Convert","text":"<p>Klassen Convert \u00e4r som en samlingsklass som inneh\u00e5ller flertalet konverteringsmetoder p\u00e5 samma st\u00e4lle. Dessa anropar egentligen bara Parse utan att vi ser det.</p> <p>\u00d6verlag rekommenderas Parse() eller TryParse(). </p> <p>Med hj\u00e4lp av metoder fr\u00e5n klassen Convert kan liknande konverteringar som ovan genomf\u00f6ras. <pre><code>// G\u00e5r alldels utm\u00e4rkt.\nint a = Convert.ToInt32(\"19\"); \n\n// Notera att namngivningen f\u00f6r float \u00e4r lite annorlunda\nfloat b = Convert.ToSingle(\"1,2\"); \n</code></pre></p>"},{"location":"content/modul-1/6-slump/","title":"Slumptal","text":"<p>F\u00f6r att generera slumpade tal i C# kan den f\u00e4rdiga klassen Random med tillh\u00f6rande metoder anv\u00e4ndas. Det \u00e4r v\u00e4rt att notera att det s\u00e5klart inte \u00e4r sann slump i strikt mening. </p> <p>Enligt Microsoft representerar klassen Random en pseudo-random nummergenerator som ger en f\u00f6ljd av nummer som uppfyller vissa statistiska krav f\u00f6r slumpm\u00e4ssighet. Torrt och bra.</p>"},{"location":"content/modul-1/6-slump/#slumpgenerator","title":"Slumpgenerator","text":"<p>F\u00f6r att komma \u00e5t metoderna beh\u00f6ver man starta en \"slumpgenerator\", i exemplet nedan namnges den till \"generator\", denna anv\u00e4nds sen f\u00f6r att generera slumptal. <pre><code>Random generator = new Random();\n</code></pre></p>"},{"location":"content/modul-1/6-slump/#heltal","title":"Heltal","text":"<p>Metoden Next() returnerar heltal.</p> <p>Metoden kan anv\u00e4ndas antingen utan argument, med ett argument f\u00f6r \u00f6vre gr\u00e4ns, eller med tv\u00e5 argument som s\u00e4tter b\u00e5de undre och \u00f6vre gr\u00e4ns. Notera att den undre gr\u00e4nsen ing\u00e5r i intervallet, men inte den \u00f6vre.</p> <pre><code>// Slumpar ett heltal som \u00e4r mellan 0 och maxv\u00e4rdet f\u00f6r int.\nint a = generator.Next();\n\n// Slumpar ett heltal som \u00e4r 0, 1, 2 eller 3. \nint b = generator.Next(4);\n\n// Slumpar ett heltal som \u00e4r 2, 3, eller 4.\nint c = generator.Next(2, 5);\n</code></pre>"},{"location":"content/modul-1/6-slump/#decimaltal","title":"Decimaltal","text":"<p>Metoden NextDouble() ger ett decimaltal som \u00e4r lika med eller st\u00f6rre \u00e4n noll, men mindre \u00e4n ett. Beh\u00f6ver man ett decimaltal som \u00e4r st\u00f6rre \u00e4n ett kan man multiplicera. <pre><code>// Slumpar en double mellan 0 och 1.\ndouble d = generator.NextDouble();\n\n// Ex. 0,3456... blir 34,56... \ndouble e = generator.NextDouble() * 100;\n</code></pre></p>"},{"location":"content/modul-1/begrepp1/","title":"Begrepp - Modul 1","text":""},{"location":"content/modul-1/begrepp1/#datorer-och-programmering","title":"Datorer och programmering","text":"<p>Exekvera: Att k\u00f6ra ett datorprogram.</p> <p>Indata: Information till datorn fr\u00e5n t.ex. tangentbord och mus.</p> <p>Utdata: Information fr\u00e5n datorn fr\u00e5n t.ex. sk\u00e4rm och h\u00f6gtalare.</p> <p>Processor: \u00c4ven k\u00e4nt som CPU, datorns \"hj\u00e4rna\", exekverar programmet.</p> <p>Minne: Lagrar information under programmets k\u00f6rtid.</p> <p>K\u00e4llkod: Instruktioner till en dator, skrivna med ett programmeringsspr\u00e5k.</p> <p>Maskinkod: Instruktioner till dator skrivet som en serie av ettor och nollor.</p> <p>H\u00e5rdvara: Samlingsnamn f\u00f6r en dators fysiska delar.</p> <p>Syntax: Regler f\u00f6r hur ett programmeringsspr\u00e5k ska skrivas.</p> <p>Kompilering: K\u00e4llkoden \u00f6vers\u00e4tts till maskinkod innan programmet exekveras.</p> <p>Interpretering: K\u00e4llkoden \u00f6vers\u00e4tts till maskinkod medans programmet exekveras.</p> <p>L\u00e5gniv\u00e5spr\u00e5k: Programmeringsspr\u00e5k n\u00e4ra maskinkod som ger detaljerad kontroll \u00f6ver h\u00e5rdvaran, till exempel assembler.</p> <p>H\u00f6gniv\u00e5spr\u00e5k: Programmeringsspr\u00e5k n\u00e4rmare m\u00e4nskligt spr\u00e5k som \u00e4r l\u00e4ttare att l\u00e4sa och skriva, till exempel Python, Java och C#.</p> <p>IDE (Integrated Development Environment): En programvara som kombinerar verktyg som kodredigerare, kompilator och debugger f\u00f6r att underl\u00e4tta programmering.</p>"},{"location":"content/modul-1/begrepp1/#variabler","title":"Variabler","text":"<p>Variabel: Har ett namn och anv\u00e4nds f\u00f6r att lagra v\u00e4rden.</p> <p>Deklarera: Att skapa en variabel, med namn och datatyp.</p> <p>Tilldelning: Att ge en variabel ett v\u00e4rde.</p> <p>Initiering: Deklaration och tilldelning i samma sats (p\u00e5 samma rad).</p> <p>Sats: En instruktion som utf\u00f6r n\u00e5got, vanligtvis en rad, avslutas med semikolon.</p> <p>Camel case: Variabelnamn som best\u00e5r av flera ord, f\u00f6rsta ordet har liten bokstav, efterf\u00f6ljande ord har stor begynnelsebokstav, t.ex. minFinaVariabel.</p> <p>Nyckelord: F\u00f6rdefinierade ord i ett programmeringsspr\u00e5k som har en speciell betydelse och inte kan anv\u00e4ndas till n\u00e5got annat, t.ex. if, while och for.</p>"},{"location":"content/modul-1/begrepp1/#datatyper","title":"Datatyper","text":"<p>Datatyp: Kategorisering av data som anger vilken typ av v\u00e4rde en variabel kan inneh\u00e5lla, till exempel heltal eller text.</p> <p>Primitiv datatyp: En grundl\u00e4ggande datatyp som st\u00f6ds direkt av programmeringsspr\u00e5ket, till exempel int, float och char.</p> <p>Flyttal: En datatyp f\u00f6r tal med decimaler, till exempel 3.14 eller -0.001.</p> <p>Char: En datatyp som representerar ett enskilt tecken, till exempel 'A' eller '5'.</p> <p>Bool: En datatyp som representerar tv\u00e5 m\u00f6jliga v\u00e4rden: sant (true) eller falskt (false).</p>"},{"location":"content/modul-1/begrepp1/#typkonvertering","title":"Typkonvertering","text":"<p>Typkonvertering: Att omvandla en variabel fr\u00e5n en datatyp till en annan.</p> <p>Implicit konvertering: Automatisk omvandling av en datatyp till en annan utan n\u00e5gon syntax.</p> <p>Explicit konvertering/Casting/Type casting: Att manuellt omvandla en variabel fr\u00e5n en datatyp till en annan med hj\u00e4lp av en specifik syntax.</p> <p>Parse(): En metod som omvandlar en str\u00e4ng till en annan datatyp, till exempel fr\u00e5n text till ett tal.</p> <p>TryParse(): En metod som f\u00f6rs\u00f6ker omvandla en str\u00e4ng till en annan datatyp och returnerar ett boolskt v\u00e4rde som indikerar om konverteringen lyckades.</p> <p>Exekveringsfel: Ett fel som uppst\u00e5r n\u00e4r ett program k\u00f6rs, till exempel en division med noll.</p>"},{"location":"content/modul-1/begrepp1/#operatorer","title":"Operatorer","text":"<p>Operator: Ett tecken eller en symbol som utf\u00f6r en operation p\u00e5 en eller flera operander, till exempel +.</p> <p>Operand: Ett v\u00e4rde eller en variabel som en operator utf\u00f6r en operation p\u00e5.</p> <p>Konkatenering: Att sl\u00e5 samman tv\u00e5 eller flera str\u00e4ngar till en enda str\u00e4ng.</p> <p>Trunkering: Att ta bort decimaldelen av ett flyttal, vilket resulterar i ett heltal.</p>"},{"location":"content/modul-1/l%C3%B6sn1/","title":"L\u00f6sningsf\u00f6rslag - Modul 1","text":""},{"location":"content/modul-1/l%C3%B6sn1/#uppgift-1","title":"Uppgift 1","text":"<pre><code>static void Main(string[] args)\n{\n    Console.WriteLine(\"Hello World!\");\n}\n</code></pre>"},{"location":"content/modul-1/l%C3%B6sn1/#uppgift-2","title":"Uppgift 2","text":"<pre><code>static void Main(string[] args)\n{\n    Console.WriteLine(\"Det h\u00e4r programmet skriver ut text.\");\n    Console.WriteLine(\"Men p\u00e5 flera rader.\");\n    Console.WriteLine();\n    Console.WriteLine(\"Och ibland med helt tomma rader.\");\n}\n</code></pre>"},{"location":"content/modul-1/l%C3%B6sn1/#uppgift-3","title":"Uppgift 3","text":"<pre><code>static void Main(string[] args)\n{\n    Console.WriteLine(\"Vissa tecken \u00e4r \\\"reserverade\\\" av programspr\u00e5ket.\");\n}\n</code></pre>"},{"location":"content/modul-1/l%C3%B6sn1/#uppgift-4","title":"Uppgift 4","text":"<pre><code>static void Main(string[] args)\n{\n    Console.WriteLine(\"  / \\\\\");\n    Console.WriteLine(\" /   \\\\\");\n    Console.WriteLine(\"/_____\\\\\");\n}\n</code></pre>"},{"location":"content/modul-1/l%C3%B6sn1/#uppgift-5","title":"Uppgift 5","text":"<pre><code>static void Main(string[] args)\n{\n    Console.ForegroundColor = ConsoleColor.Blue;\n    Console.BackgroundColor = ConsoleColor.Yellow;\n    Console.Clear();\n    Console.WriteLine(\"Bl\u00e5 text med gul bakgrund.\");\n\n    Console.ResetColor();\n    Console.WriteLine(\"Tryck Enter f\u00f6r att \u00e4ndra f\u00e4rg.\");\n    Console.ReadLine();\n\n    Console.ForegroundColor = ConsoleColor.Red;\n    Console.BackgroundColor = ConsoleColor.White;\n    Console.Clear();\n    Console.WriteLine(\"R\u00f6d text med vit bakgrund.\");\n    Console.ResetColor();\n}\n</code></pre>"},{"location":"content/modul-1/l%C3%B6sn1/#uppgift-6","title":"Uppgift 6","text":"<pre><code>static void Main(string[] args)\n{\n    Console.Beep(440, 500); // A\n    Console.Beep(494, 500); // B\n    Console.Beep(523, 500); // C\n    Console.Beep(587, 500); // D\n}\n</code></pre>"},{"location":"content/modul-1/l%C3%B6sn1/#uppgift-7","title":"Uppgift 7","text":"<pre><code>static void Main(string[] args)\n{\n    int wait = 600; //V\u00e4nta i 0,6 sekunder mellan varje ord\n    Console.Write(\"Hej \");\n    Thread.Sleep(wait);\n    Console.Write(\"p\u00e5 \");\n    Thread.Sleep(wait);\n    Console.Write(\"dig!\");\n}\n</code></pre>"},{"location":"content/modul-1/l%C3%B6sn1/#uppgift-8","title":"Uppgift 8","text":"<pre><code>static void Main(string[] args)\n{\n    Console.Write(\"Vad heter du? \");\n    string namn = Console.ReadLine();\n\n    Console.Write(\"Hur gammal \u00e4r du? \");\n    string \u00e5lder = Console.ReadLine();\n\n    Console.Write(\"Vad \u00e4r din favoritmat? \");\n    string favoritmat = Console.ReadLine();\n\n    Console.WriteLine($\"Hej vad trevligt att tr\u00e4ffas {namn}, du \u00e4r {\u00e5lder} \u00e5r gammal och gillar {favoritmat}. Hoppas du f\u00e5r en trevlig dag!\");\n}\n</code></pre>"},{"location":"content/modul-1/l%C3%B6sn1/#uppgift-9","title":"Uppgift 9","text":"<pre><code>static void Main(string[] args)\n{\n    Console.Write(\"Vilket \u00e5r \u00e4r det nu? \");\n    int nuvarande\u00c5r = int.Parse(Console.ReadLine());\n\n    int f\u00f6rra\u00c5ret = nuvarande\u00c5r - 1;\n    int omTio\u00c5r = nuvarande\u00c5r + 10;\n\n    Console.WriteLine($\"F\u00f6rra \u00e5ret var det {f\u00f6rra\u00c5ret}, och om tio \u00e5r \u00e4r det {omTio\u00c5r}.\");\n}\n</code></pre>"},{"location":"content/modul-1/l%C3%B6sn1/#uppgift-10","title":"Uppgift 10","text":"<pre><code>static void Main(string[] args)\n{\n    Console.Write(\"Skriv in f\u00f6rsta talet: \");\n    double tal1 = double.Parse(Console.ReadLine());\n\n    Console.Write(\"Skriv in andra talet: \");\n    double tal2 = double.Parse(Console.ReadLine());\n\n    double differens = tal1 - tal2;\n    double tal1Upph\u00f6jtTillTal2 = Math.Pow(tal1, tal2);\n    double tal2Upph\u00f6jtTillTal1 = Math.Pow(tal2, tal1);\n\n    Console.WriteLine($\"Differensen mellan talen \u00e4r {differens}.\");\n    Console.WriteLine($\"{tal1} upph\u00f6jt till {tal2} \u00e4r {tal1Upph\u00f6jtTillTal2}.\");\n    Console.WriteLine($\"{tal2} upph\u00f6jt till {tal1} \u00e4r {tal2Upph\u00f6jtTillTal1}.\");\n}\n</code></pre>"},{"location":"content/modul-1/l%C3%B6sn1/#uppgift-11","title":"Uppgift 11","text":"<pre><code>static void Main(string[] args)\n{\n    Console.Write(\"Skriv in f\u00f6rsta talet: \");\n    double tal1 = double.Parse(Console.ReadLine());\n\n    Console.Write(\"Skriv in andra talet: \");\n    double tal2 = double.Parse(Console.ReadLine());\n\n    Console.Write(\"Skriv in tredje talet: \");\n    double tal3 = double.Parse(Console.ReadLine());\n\n    double summa = tal1 + tal2 + tal3;\n    double produkt = tal1 * tal2 * tal3;\n    double medelv\u00e4rde = summa / 3;\n\n    Console.WriteLine($\"Summan av talen \u00e4r {Math.Round(summa,3)}.\");\n    Console.WriteLine($\"Produkten av talen \u00e4r {Math.Round(produkt, 3)}.\");\n    Console.WriteLine($\"Medelv\u00e4rdet av talen \u00e4r {Math.Round(medelv\u00e4rde, 3)}.\");\n}\n</code></pre>"},{"location":"content/modul-1/l%C3%B6sn1/#uppgift-12","title":"Uppgift 12","text":"<pre><code>Console.Write(\"Skriv in f\u00f6rsta talet: \");\ndouble tal1 = double.Parse(Console.ReadLine());\n\nConsole.Write(\"Skriv in andra talet: \");\ndouble tal2 = double.Parse(Console.ReadLine());\n\ndouble addition = tal1 + tal2;\ndouble subtraktion1 = tal1 - tal2;\ndouble subtraktion2 = tal2 - tal1;\ndouble multiplikation = tal1 * tal2;\ndouble division1 = tal1 / tal2;\ndouble division2 = tal2 / tal1;\n\nConsole.WriteLine($\"Addition: {tal1} + {tal2} = {addition}\");\nConsole.WriteLine($\"Subtraktion (tal1 - tal2): {tal1} - {tal2} = {subtraktion1}\");\nConsole.WriteLine($\"Subtraktion (tal2 - tal1): {tal2} - {tal1} = {subtraktion2}\");\nConsole.WriteLine($\"Multiplikation: {tal1} * {tal2} = {multiplikation}\");\nConsole.WriteLine($\"Division (tal1 / tal2): {tal1} / {tal2} = {division1}\");\nConsole.WriteLine($\"Division (tal2 / tal1): {tal2} / {tal1} = {division2}\");\n</code></pre>"},{"location":"content/modul-1/l%C3%B6sn1/#uppgift-13","title":"Uppgift 13","text":"<pre><code>static void Main(string[] args)\n{\n    Console.Write(\"Ange radien p\u00e5 cirkeln: \");\n    bool giltigtTal = false;\n    giltigtTal = double.TryParse(Console.ReadLine(), out double radie);\n\n    if (giltigtTal)\n    {\n        double area = Math.PI * Math.Pow(radie, 2);\n        double omkrets = 2 * Math.PI * radie;\n\n        Console.WriteLine($\"Arean p\u00e5 cirkeln \u00e4r {area:F2}.\");\n        Console.WriteLine($\"Omkretsen p\u00e5 cirkeln \u00e4r {omkrets:F2}.\");\n    }\n    else\n    {\n        Console.WriteLine(\"Felaktig inmatning, f\u00f6rs\u00f6k igen.\");\n    }\n}\n</code></pre>"},{"location":"content/modul-1/l%C3%B6sn1/#uppgift-14","title":"Uppgift 14","text":"<pre><code>static void Main(string[] args)\n{\n    Console.Write(\"Hur mycket pengar s\u00e4tter du in? \");\n    double startKapital = double.Parse(Console.ReadLine());\n\n    Console.Write(\"Vad \u00e4r r\u00e4ntan (i procent)? \");\n    double r\u00e4nta = double.Parse(Console.ReadLine()) / 100;\n\n    Console.Write(\"Hur m\u00e5nga \u00e5r ska pengarna st\u00e5? \");\n    int tid = int.Parse(Console.ReadLine());\n\n    double slutKapital = startKapital * Math.Pow(1 + r\u00e4nta, tid);\n\n    Console.WriteLine($\"Efter {tid} \u00e5r kommer du att ha {slutKapital} kr p\u00e5 kontot.\");\n}\n</code></pre>"},{"location":"content/modul-1/l%C3%B6sn1/#uppgift-15","title":"Uppgift 15","text":"<pre><code>static void Main(string[] args)\n{\n    Console.Write(\"Ange v\u00e4rdet p\u00e5 p: \");\n    double p = double.Parse(Console.ReadLine());\n\n    Console.Write(\"Ange v\u00e4rdet p\u00e5 q: \");\n    double q = double.Parse(Console.ReadLine());\n\n    double diskriminant = Math.Pow(p / 2, 2) - q;\n\n    if (diskriminant &lt; 0)\n    {\n        Console.WriteLine(\"Det finns inga reella r\u00f6tter.\");\n    }\n    else\n    {\n        double x1 = -(p / 2) + Math.Sqrt(diskriminant);\n        double x2 = -(p / 2) - Math.Sqrt(diskriminant);\n\n        Console.WriteLine($\"L\u00f6sningarna \u00e4r x1 = {x1} och x2 = {x2}.\");\n    }\n}\n</code></pre>"},{"location":"content/modul-1/uppg1/","title":"\u00d6vningar - Modul 1","text":""},{"location":"content/modul-1/uppg1/#uppgift-1","title":"Uppgift 1","text":"<p>Skriv ett program som skriver ut valfri text \u201dHello World!\u201d. Valfrihet \u00e4r \u00f6verskattat...</p>"},{"location":"content/modul-1/uppg1/#uppgift-2","title":"Uppgift 2","text":"<p>Skriv ett program som skriver ut text p\u00e5 minst tre rader. Med minst en blank rad n\u00e5gonstans. Se nedanst\u00e5ende exempel. <pre><code>Det h\u00e4r programmet skriver ut text.\nMen p\u00e5 flera rader.\n\nOch ibland med helt tomma rader.\n</code></pre></p>"},{"location":"content/modul-1/uppg1/#uppgift-3","title":"Uppgift 3","text":"<p>Skriv ett program som skriver ut f\u00f6ljande text, eller vilken text du vill, s\u00e5 l\u00e4nge den har citattecken. <pre><code>Vissa tecken \u00e4r \"reserverade\" av programspr\u00e5ket.\n</code></pre></p>"},{"location":"content/modul-1/uppg1/#uppgift-4","title":"Uppgift 4","text":"<p>Vi ska inte l\u00e5ta v\u00e5rt anv\u00e4ndargr\u00e4nssnitt begr\u00e4nsa oss, sl\u00e4pp l\u00f6s din konstn\u00e4rliga sida och skriv ett program som ritar ut en  tjusig pyramid. Se exempel. <pre><code>  / \\\n /   \\\n/_____\\\n</code></pre></p>"},{"location":"content/modul-1/uppg1/#uppgift-5","title":"Uppgift 5","text":"<p>Skriv ett program som skriver ut valfri text, men med en annan f\u00e4rg \u00e4n standard, programmet ska \u00e4ven ha en annan bakgrundsf\u00e4rg. Kanske f\u00f6rs\u00f6ka matcha en flagga, t.ex. bl\u00e5 och gul.</p> <p>N\u00e4r anv\u00e4ndaren trycker p\u00e5 enter ska en ny text dyka upp, i \u00e4nnu en annan f\u00e4rg.</p>"},{"location":"content/modul-1/uppg1/#uppgift-6","title":"Uppgift 6","text":"<p>Console.Beep() \u00e4r en underskattad metod. Skriv ett program som anv\u00e4nder minst 4 olika rader med Beep(), raderna ska ha olika frekvens och l\u00e4ngd. </p> <p>F\u00f6rs\u00f6k att f\u00e5 till en liten melodi eller dylikt.</p>"},{"location":"content/modul-1/uppg1/#uppgift-7","title":"Uppgift 7","text":"<p>Skriv ett program som skriver ut en valfri mening, men ist\u00e4llet f\u00f6r att skriva ut allt p\u00e5 en g\u00e5ng s\u00e5 ska varje ord skrivas ut ett i taget, men fortfarande p\u00e5 en rad.</p>"},{"location":"content/modul-1/uppg1/#uppgift-8","title":"Uppgift 8","text":"<ol> <li> <p>Skriv ett program som fr\u00e5gar vad anv\u00e4ndaren heter och l\u00e5ter anv\u00e4ndaren svara. Programmet ska sen skriva ut en h\u00e4lsning till anv\u00e4ndaren, n\u00e5got i stil med \u201dHej vad trevligt att tr\u00e4ffas [namn], hoppas du f\u00e5r en trevlig dag!\u201d  </p> </li> <li> <p>Utveckla programmet genom att ocks\u00e5 l\u00e5ta programmet fr\u00e5ga efter tv\u00e5 andra valfria saker, exempelvis \u00e5lder och favoritmat, inkluderas \u00e4ven denna information i programmets svar till anv\u00e4ndaren.</p> </li> </ol>"},{"location":"content/modul-1/uppg1/#uppgift-9","title":"Uppgift 9","text":"<p>Skriv ett program som fr\u00e5gar anv\u00e4ndaren vilket \u00e5r det \u00e4r nu, sen ska programmet svara B\u00c5DE vilket \u00e5r det var f\u00f6rra \u00e5ret, men ocks\u00e5 vilket \u00e5r det \u00e4r om 10 \u00e5r.</p>"},{"location":"content/modul-1/uppg1/#uppgift-10","title":"Uppgift 10","text":"<p>Skriv ett program som fr\u00e5gar anv\u00e4ndaren efter tv\u00e5 tal. 1. Programmet ska ber\u00e4kna och skriva ut differensen av talen. 2. Utveckla programmet s\u00e5 att det ocks\u00e5 ber\u00e4knar och skriver ut talen upph\u00f6jt till varandra. Tips: Klassen Math.</p>"},{"location":"content/modul-1/uppg1/#uppgift-11","title":"Uppgift 11","text":"<p>Skriv ett program som l\u00e5ter anv\u00e4ndaren skriva in 3 tal och returnerar talens summa, produkt och medelv\u00e4rde.</p> <p>Programmet ska kunna hantera decimaltal och avrunda utskrifter till 3 decimaler.</p>"},{"location":"content/modul-1/uppg1/#uppgift-12","title":"Uppgift 12","text":"<p>Skriv ett program som tar in 2 tal fr\u00e5n anv\u00e4ndaren och sedan utf\u00f6r de fyra r\u00e4knes\u00e4tten p\u00e5 dem. Addition, subtraktion, multiplikation och division. Programmet ska skriva ut ber\u00e4kning och svar.</p> <p>Utveckla ditt program s\u00e5 att subtraktionen och divisionen utf\u00f6rs p\u00e5 \u201db\u00e5da h\u00e5ll\u201d, allts\u00e5 b\u00e5de x/y och y/x.  </p> <p>Utveckla ditt program s\u00e5 att det ocks\u00e5 hanterar decimaltal.</p>"},{"location":"content/modul-1/uppg1/#uppgift-13","title":"Uppgift 13","text":"<p>Skriv ett program som ber\u00e4knar och presenterar area och omkrets av en cirkel, baserat p\u00e5 relevant information som programmet fr\u00e5gar anv\u00e4ndaren om.</p> <p>Utveckla programmet s\u00e5 att det inte kraschar vid ov\u00e4ntad input.</p>"},{"location":"content/modul-1/uppg1/#uppgift-14","title":"Uppgift 14","text":"<p>Skriv ett program som ber\u00e4knar utvecklingen p\u00e5 ett sparkonto med fast r\u00e4nta. Programmet ska fr\u00e5ga anv\u00e4ndaren om hur mycket pengar som s\u00e4tts in, hur stor r\u00e4nta som \u00e4r p\u00e5 kontot och hur m\u00e5nga \u00e5r pengarna ska vara p\u00e5 kontot.  </p> <p>Programmet ska sedan skriva ut hur mycket pengar p\u00e5 kontot som finns efter s\u00e5 m\u00e5nga \u00e5r, enligt y = C * a^x d\u00e4r y \u00e4r v\u00e4rdet, C \u00e4r startv\u00e4rdet, a \u00e4r f\u00f6r\u00e4ndringsfaktorn samt x \u00e4r tiden.</p>"},{"location":"content/modul-1/uppg1/#uppgift-15","title":"Uppgift 15","text":"<p>Skriv ett program som l\u00f6ser andragradsekvationer p\u00e5 formen x^2 + px + q = 0. Programmet ska fr\u00e5ga anv\u00e4ndaren om p och q och med hj\u00e4lp av dem l\u00f6sa ekvationen. </p> <p>Programmet ska hantera decimaltal. Svaret ska avrundas till n\u00e5got l\u00e4mpligt, kanske 2 decimaler. </p>"},{"location":"content/modul-2/1-villkorssatser/","title":"Villkorssatser","text":"<p>Det \u00e4r oftast \u00f6nskv\u00e4rt att ett program kan utv\u00e4rdera givna villkor och v\u00e4lja vilken eller vilka kodrader som ska utf\u00f6ras och i vilken ordning. Ett s\u00e5dant val, att v\u00e4lja, kallas selektion.</p> <p>Nedan presenteras b\u00e5de if-satser och switch-case uttryck, dessa b\u00e5da villkorssatser uppn\u00e5r samma resultat, men ser lite olika ut. Lite f\u00f6renklat kan switchuttryck s\u00e4gas vara effektivare n\u00e4r det finns m\u00e5nga alternativ. </p>"},{"location":"content/modul-2/1-villkorssatser/#if-satser","title":"If-satser","text":""},{"location":"content/modul-2/1-villkorssatser/#if","title":"If","text":"<p>En if-sats \u00e4r ett villkorat kodblock. K\u00e4llkoden som st\u00e5r inne i blocket k\u00f6rs bara om villkoret mellan parenteserna \u00e4r sant. Villkoret mellan parenteserna m\u00e5ste vara ett boolskt uttryck.</p> <pre><code>if (a &gt; 3)\n{\n    Console.WriteLine(\"a \u00e4r st\u00f6rre \u00e4n 3!\");\n}\n\n// ALLA kodrader inne i blocket utf\u00f6rs om villkoret \u00e4r sant.\nif (namn == \"Emil\")\n{\n    Console.WriteLine(\"Personen heter Emil.\");\n    Console.WriteLine(\"I \u00f6vrigt ett v\u00e4ldigt tjusigt namn.\");\n}\n</code></pre> <pre><code>string namn = \"Emil\";\nbool l\u00e4rare = true;\n\n// Villkoret, koden mellan parenteserna, kan vara sammansatt.\nif (namn == \"Emil\" &amp;&amp; l\u00e4rare == true)\n{\n    Console.WriteLine(\"Personen heter Emil och arbetar som l\u00e4rare.\");\n}\n\n// Notera att det r\u00e4cker med enbart den boolska variabeln. \nif (namn == \"Emil\" &amp;&amp; l\u00e4rare) \n{\n    Console.WriteLine(\"Personen heter Emil och arbetar som l\u00e4rare.\");\n}\n</code></pre>"},{"location":"content/modul-2/1-villkorssatser/#else","title":"else","text":"<p>Kompletterar en if-sats. Koden i else-blocket k\u00f6rs om if-satsen INTE \u00e4r sann. Else har inget eget villkor, och kan inte anv\u00e4ndas frist\u00e5ende fr\u00e5n en if-sats. <pre><code>int a = 8;\nint b = 0;\n\nif (a &gt;= 10)\n{\n    b = 100; // Om a \u00e4r st\u00f6rre \u00e4n eller lika med 10.\n}\nelse\n{\n    b = -30; // Om a INTE \u00e4r det.\n}\n\nConsole.WriteLine(b); // Utskriften ger -30.\n</code></pre></p>"},{"location":"content/modul-2/1-villkorssatser/#else-if","title":"else if","text":"<p>Kan anv\u00e4ndas f\u00f6r att skapa en kedja av villkor, d\u00e4r varje villkor utv\u00e4rderas om det f\u00f6reg\u00e5ende villkoret \u00e4r falskt. <pre><code>int a = 1;\n\nif (a &gt; 4) // Falskt.\n{\n    Console.WriteLine(\"H\u00f6gre \u00e4n fyra!\");\n}\nelse if (a &lt; 0) // Falskt.\n{\n    Console.WriteLine(\"L\u00e4gre \u00e4n noll!\");\n}\nelse // Enda kvarvarande alternativet.\n{\n    Console.WriteLine(\"H\u00f6gre \u00e4n noll, l\u00e4gre \u00e4n fem!\");\n}\n</code></pre></p>"},{"location":"content/modul-2/1-villkorssatser/#switch","title":"Switch","text":"<p>Ett switchuttryck j\u00e4mf\u00f6r v\u00e4rdet p\u00e5 en variabel med flera olika alternativ. Det \u00e4r anv\u00e4ndbart om variabeln bara kan anta ett begr\u00e4nsat antal v\u00e4rden, exempelvis veckordagar.</p> <p>Exemplet nedan tar in ett namn fr\u00e5n anv\u00e4ndaren, och sen kan ett av fyra cases intr\u00e4ffa. Notera hur varje case avslutas med nyckeordet break, utan detta kommer n\u00e4sta case ocks\u00e5 exekveras. <pre><code>string namn = Console.ReadLine();\n\nswitch (namn)\n{\n    case \"Arne\":\n        Console.WriteLine(\"Du heter Arne.\");\n        break;\n\n    case \"Bodil\":\n        Console.WriteLine(\"Du heter Bodil.\");\n        break;\n\n    case \"Cecilia\":\n        Console.WriteLine(\"Du heter Cecilia.\");\n        break;\n\n    default: // Om inget av de \u00f6vriga fallen intr\u00e4ffar\n        Console.WriteLine(\"Du heter n\u00e5got som inte k\u00e4nns igen av programmet.\");\n        break;\n}\n</code></pre></p> <p>I nedanst\u00e5ende exempel har case 2 inget inneh\u00e5ll och avslutas inte med break. Detta leder till att case 3 utf\u00f6rs. Anv\u00e4ndbart om flera alternativ ska leda till samma utfall. <pre><code>int a = 2;\nswitch (a)\n{\n    case 1:\n        Console.WriteLine(\"V\u00e4rdet \u00e4r 1\");\n        break;\n\n    case 2:\n        // Om a \u00e4r 2 kommer vi att \"ramla ner\" i case 3.\n\n    case 3:\n        Console.WriteLine(\"V\u00e4rdet kan vara 2 eller 3.\");\n        break;\n\n    default: \n        Console.WriteLine(\"V\u00e4rdet \u00e4r n\u00e5got annat!\");\n        break;\n}\n</code></pre></p> <p>F\u00f6r nyare versioner av C# kan man ocks\u00e5 specificera intervall f\u00f6r numeriska v\u00e4rden i switchuttryck, se nedanst\u00e5ende exempel. <pre><code>int a = 10;\nswitch (a)\n{\n    case &lt;= 5:\n        Console.WriteLine(\"V\u00e4rdet \u00e4r mindre \u00e4n eller lika med 5\");\n        break;\n\n    case &gt; 50 and &lt; 100:\n        Console.WriteLine(\"V\u00e4rdet \u00e4r st\u00f6rre \u00e4n 50 och mindre \u00e4n 100.\");\n        break;\n\n    default:\n        Console.WriteLine(\"V\u00e4rdet \u00e4r n\u00e5got annat!\");\n        break;\n}\n</code></pre></p>"},{"location":"content/modul-2/1-villkorssatser/#nastlade-villkorssatser","title":"N\u00e4stlade villkorssatser","text":"<p>Det g\u00e5r bra att ha en villkorssats inuti en annan villkorssats, dessa kallas d\u00e5 n\u00e4stlade (nested). </p> <p>Exempel p\u00e5 n\u00e4stlade if-satser. <pre><code>if (number &gt; 10)\n{\n    Console.WriteLine(\"Talet \u00e4r st\u00f6rre \u00e4n 10.\");\n\n    if (number &gt; 20)\n    {\n        Console.WriteLine(\"Talet \u00e4r st\u00f6rre \u00e4n 20.\");\n    }\n    else\n    {\n        Console.WriteLine(\"Talet \u00e4r 20 eller mindre.\");\n    }\n}\nelse\n{\n    Console.WriteLine(\"Talet \u00e4r 10 eller mindre.\");\n}\n</code></pre></p> <p>Det g\u00e5r ocks\u00e5 att n\u00e4stla switchuttryck, det fungerar p\u00e5 samma s\u00e4tt som f\u00f6r if-satser, men d\u00e5 syntaxen f\u00f6r switchuttrycken \u00e4r mer omfattande sjunker l\u00e4sbarheten snabbt.</p> <p>Tips</p> <p>Det g\u00e5r att n\u00e4stla m\u00e5nga villkorssatser, men ju fler satser som n\u00e4stlas i varandra desto s\u00e4mre blir l\u00e4sbarheten. </p> <p>Var uppm\u00e4rksam p\u00e5 detta och undvik i m\u00f6jligaste m\u00e5n att gr\u00f6ta till det.</p>"},{"location":"content/modul-2/2-felhantering/","title":"Felhantering","text":"<p>Felhantering \u00e4r en viktig del av programmering eftersom det hj\u00e4lper till att skapa robusta och anv\u00e4ndarv\u00e4nliga applikationer. </p> <p>Genom att f\u00f6rebygga fel redan i planeringsstadiet minskar risken att de intr\u00e4ffar, och h\u00f6jer anv\u00e4ndarv\u00e4nligheten. </p> <p>Det \u00e4r dock ocks\u00e5 viktigt att kunna hantera fel n\u00e4r de uppst\u00e5r f\u00f6r att s\u00e4kerst\u00e4lla att programmet inte kraschar och kan ge anv\u00e4ndbar feedback till anv\u00e4ndaren.</p>"},{"location":"content/modul-2/2-felhantering/#feltyper","title":"Feltyper","text":"<p>Det finns tre huvudsakliga typer av fel inom programmering, baserat p\u00e5 vad de har f\u00f6r effekt.</p>"},{"location":"content/modul-2/2-felhantering/#kompileringsfel","title":"Kompileringsfel","text":"<p>Kompileringsfel uppst\u00e5r n\u00e4r koden bryter mot spr\u00e5kets syntaxregler och kan inte kompileras. </p> <p>Dessa fel uppt\u00e4cks av kompilatorn innan programmet k\u00f6rs, vilket leder till att programmet inte startar.</p> <p>Visual Studio hj\u00e4lper till att hitta dessa genom att markera dem med r\u00f6tt. <pre><code>// Kompileringsfel, kan inte konvertera string till int rakt av\nint myInt = \"Hej\";\n</code></pre></p>"},{"location":"content/modul-2/2-felhantering/#exekveringsfel","title":"Exekveringsfel","text":"<p>Exekveringsfel (runtime errors) uppst\u00e5r under programmets k\u00f6rning, och leder till att programmet \"slutar exekvera\", allts\u00e5 krascha. </p> <p>I C# kallas dessa f\u00f6r undantag (exceptions), och om ett undantag inte hanteras s\u00e5 kraschar programmet.</p> <pre><code>// Ger upphov till ett exekveringsfel f\u00f6r det blir nolldivision\nint num = 10;\nint temp = num / 0;\n</code></pre> <p>Ovanst\u00e5ende exempel ger upphov till ett felmeddelande som kommunicerar \"Exception unhandled\" f\u00f6ljt av namnet p\u00e5 undantaget med tillh\u00f6rande f\u00f6rklaring vad som orsakade det, i det h\u00e4r fallet: \"System.DivideByZeroException: 'Attempted to divide by zero.\"</p>"},{"location":"content/modul-2/2-felhantering/#logiska-fel","title":"Logiska fel","text":"<p>Logiska fel \u00e4r ofta den st\u00f6rsta fienden. Programmet kompilerar och startar upp, det kraschar inte, men om man fr\u00e5gar vilken f\u00e4rg himlen har s\u00e5 svarar programmet \"bacon\". Inte helt \u00f6nskv\u00e4rt.</p> <p>F\u00f6ljande kod \u00e4r ett exempel p\u00e5 ett program som ska summera a och b. <pre><code>int a = 5;\nint b = 10;\nint sum = a - b; // Logiskt fel, fel operator, - ist\u00e4llet f\u00f6r +\nConsole.WriteLine($\"Summan av {a} och {b} \u00e4r {sum}\");\n</code></pre></p> <p>Logiska fel kan vara sv\u00e5ra att uppt\u00e4cka, dels f\u00f6r att man sj\u00e4lv f\u00e5r tunnelseende, men ocks\u00e5 n\u00e4r programmet blir st\u00f6rre och st\u00f6rre.</p> <p>F\u00f6ljande kod \u00e4r ett exempel p\u00e5 ett program som r\u00e4knar antalet vokaler i en str\u00e4ng som anv\u00e4ndaren skriver in. <pre><code>string input = Console.ReadLine();\nint count = 0;\n\nforeach (char c in input)\n{\n    if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == '\u00e5' || c == '\u00e4' || c == '\u00f6')\n    {\n        count++;\n    }\n}\n\nConsole.WriteLine($\"Antalet vokaler i str\u00e4ngen '{input}' \u00e4r: {count}\");\n</code></pre> Skriver man in \"\u00c4ntligen f\u00e5r jag programmera!\" i ovanst\u00e5ende exempel f\u00e5r man utskriften: <pre><code>Antalet vokaler i str\u00e4ngen \"\u00c4ntligen f\u00e5r jag programmera!\" \u00e4r: 8\n</code></pre></p> <p>Programmet missar allts\u00e5 en vokal. Mer specifikt s\u00e5 r\u00e4knar programmet inte versala vokaler (stora bokst\u00e4ver), i det h\u00e4r fallet \"\u00c4\".</p> <p>Det h\u00e4r hade varit sv\u00e5rare att se eller komma p\u00e5 om man inte testat programmet och belyser vikten av att testk\u00f6ra sina program.</p>"},{"location":"content/modul-2/2-felhantering/#undantag-med-try-catch","title":"Undantag med try-catch","text":"<p>Exekveringsfel i C# ger upphov till s\u00e5 kallade undantag. Dessa hanteras s\u00e5klart b\u00e4st genom att helt undvika dem via f\u00f6rebyggande arbete, exempelvis kanske anv\u00e4nda TryParse() ist\u00e4llet f\u00f6r Parse().</p> <p>Ett annat s\u00e4tt att hantera undantag och undvika att programmet kraschar \u00e4r att anv\u00e4nda en lite mer allm\u00e4n l\u00f6sning, try-catch. </p> <p>F\u00f6ljande exempel ger upphov till ett exekveringsfel, System.FormatException, eftersom det inte g\u00e5r att konvertera text till heltal. <pre><code>int myInt = int.Parse(\"Hej\");\n</code></pre></p> <p>Anv\u00e4ndande av try-catch l\u00e5ter programmet \"f\u00f6rs\u00f6ka\" utf\u00f6ra koden, och sen agera om n\u00e5got undantag dyker upp. Ett try-block m\u00e5ste matchas ihop med minst ett catch-block. <pre><code>try\n{\n    // F\u00f6rs\u00f6ker k\u00f6ra koden inne i try-blocket\n    int myInt = int.Parse(\"Hej\");\n}\ncatch\n{\n    // Om n\u00e5got g\u00e5r fel utf\u00f6rs koden i catch-blocket.\n    Console.WriteLine(\"N\u00e5t gick fel!\");\n}\n</code></pre></p> <p>Ovanst\u00e5ende exempel ger dock ingen information till anv\u00e4ndaren, ett s\u00e4tt att \u00e5stadkomma det \u00e4r att anv\u00e4nda det faktiska undantaget som ett argument i catch-blocket, i nedanst\u00e5ende exempel namnges undantaget till error. <pre><code>try\n{\n    int myInt = int.Parse(\"Hej\");\n}\ncatch (Exception error) // Undantaget namnges till error\n{\n    Console.WriteLine(\"N\u00e5t gick fel!\");\n    Console.WriteLine(error.Message); // Skriv ut det inbyggda meddelandet\n}\n</code></pre> Ovanst\u00e5ende kod ger en utskrift inneh\u00e5llande undantagets eget felmeddelande: <pre><code>N\u00e5t gick fel!\nInput string was not in a correct format.\n</code></pre></p> <p>Det g\u00e5r ocks\u00e5 att \"f\u00e5nga\" specifika fel med catch-block, d\u00e5 specificerar man vilken typ av undantag som ska f\u00e5ngas. P\u00e5 s\u00e5 vis kan man l\u00e5ta programmet hantera olika undantag p\u00e5 olika s\u00e4tt. <pre><code>try\n{\n    // F\u00f6rs\u00f6ker omvandla en str\u00e4ng till integer.\n    // Talet ifr\u00e5ga \u00e4r dock f\u00f6r stort f\u00f6r en int32.\n    int myInt = int.Parse(\"99999999999999999999999\");\n}\ncatch (FormatException) //Det h\u00e4r blocket h\u00e4nder ENBART vid fel format.\n{\n    Console.WriteLine(\"Fel format!\");\n}\ncatch //Alla andra fel.\n{\n    Console.WriteLine(\"N\u00e5got annat oklart h\u00e4nde!\");\n}\n</code></pre></p>"},{"location":"content/modul-2/2-felhantering/#felsokning-med-debugger","title":"Fels\u00f6kning med debugger","text":"<p>Att fels\u00f6ka logiska fel kan vara jobbigt, man vet kanske inte vad som \u00e4r problemet eller var i k\u00e4llkoden sagda problem befinner sig.</p> <p>Ett s\u00e4tt att underl\u00e4tta fels\u00f6kningsprocessen \u00e4r att anv\u00e4nda sig av Visual Studios debugger och g\u00e5 igenom koden steg f\u00f6r steg, eller pausa exekveringen vid en viss rad d\u00e4r man misst\u00e4nker att problemet finns,</p>"},{"location":"content/modul-2/2-felhantering/#steg-for-steg","title":"Steg f\u00f6r steg","text":"<p>F\u00f6r att g\u00e5 igenom koden steg f\u00f6r steg anv\u00e4nds knappen \"Step into\" (F11). Ser du inte knappen, h\u00f6gerklicka och visa verktygsf\u00e4ltet \"Debug\".</p> <p>Programmet startar och f\u00f6rsta i k\u00e4llkoden markeras, h\u00e4rifr\u00e5n kan man g\u00e5 fram\u00e5t i programmet genom att trycka p\u00e5 \"Step Into\" (F11) igen, ett tryck inneb\u00e4r en rad fram\u00e5t. </p> <p>Det finns ocks\u00e5 m\u00f6jlighet att se v\u00e4rdet p\u00e5 alla variabler via fliken \"Locals\", nere till v\u00e4nster fr\u00e5n b\u00f6rjan.</p>"},{"location":"content/modul-2/2-felhantering/#breakpoints","title":"Breakpoints","text":"<p>Lek med tanken att ditt program \u00e4r 300 rader kod. Du misst\u00e4nker att problemet finns n\u00e5gonstans runt rad 250. Du skulle kunna klicka p\u00e5 \"Step Into\" (F11) 250 g\u00e5nger f\u00f6r att komma dit, men det vill du inte.</p> <p>En breakpoint kan s\u00e4ttas p\u00e5 en specifik rad i k\u00e4llkoden och fungerar precis som namnet antyder, n\u00e4r programmet kommer till raden ifr\u00e5ga s\u00e5 kommer programmet att pausa och g\u00e5 in i debug l\u00e4ge.</p> <p>F\u00f6r att s\u00e4tta ut en breakpoint kan man v\u00e4nsterklicka l\u00e4ngst ut till v\u00e4nster om radnumret. Alternativt kan man anv\u00e4nda F9 n\u00e4r mark\u00f6ren \u00e4r p\u00e5 raden ifr\u00e5ga. Funktionaliteten kan ocks\u00e5 kommas \u00e5t fr\u00e5n dropdownen \"Debug\" h\u00f6gst upp.</p> <p>Det g\u00e5r utm\u00e4rkt att s\u00e4tta ut fler breakpoints.</p>"},{"location":"content/modul-2/2-felhantering/#run-to-cursor","title":"Run to cursor","text":"<p>Fungerar som en breakpoint, men bara en g\u00e5ng. H\u00f6gerklicka p\u00e5 raden du vill k\u00f6ra till, v\u00e4lj \"Run To Cursor\", programmet k\u00f6r som vanligt till raden ifr\u00e5ga och g\u00e5r sen in i debug s\u00e5 att du kan unders\u00f6ka. </p>"},{"location":"content/modul-2/3-readkey/","title":"ReadKey","text":"<p>Metoden ReadKey() anv\u00e4nds f\u00f6r att l\u00e4sa ett enskilt tecken fr\u00e5n anv\u00e4ndaren via konsolen. Metoden pausar programmet tills anv\u00e4ndaren trycker p\u00e5 en tangent. J\u00e4mf\u00f6r detta med ReadLine(), d\u00e4r programmet pausas tills anv\u00e4ndaren trycker p\u00e5 enter.</p> <p>ReadKey() kan allts\u00e5 anv\u00e4ndas f\u00f6r att ta inmatning fr\u00e5n anv\u00e4ndaren med bara ETT knapptryck. Det finns ocks\u00e5 m\u00f6jlighet att d\u00f6lja vilken knapp som tryckts ned.</p> <p>ReadKey() returnerar ett objekt av klassen ConsoleKeyInfo, som inneh\u00e5ller information om vilken tangent som trycktes ned, vilket tecken det motsvarar, samt om n\u00e5gra andra modifierare s\u00e5som CTRL, ALT eller SHIFT anv\u00e4nts. </p> <pre><code>// Inmatning fr\u00e5n anv\u00e4ndaren. \nConsole.WriteLine(\"Tryck p\u00e5 valfri tangent f\u00f6r att forts\u00e4tta...\");\nConsoleKeyInfo keyInfo = Console.ReadKey();\n\n// Blankrad.\nConsole.WriteLine();\n\n// Sparar tecknet f\u00f6r senare anv\u00e4ndning eller dylikt.\nchar userinput = keyInfo.KeyChar;\n\n// Skriver ut v\u00e4rdet p\u00e5 keyInfo's egenskaper.\nConsole.WriteLine($\"Key: {keyInfo.Key}\");\nConsole.WriteLine($\"KeyChar: {keyInfo.KeyChar}\");\nConsole.WriteLine($\"Modifiers: {keyInfo.Modifiers}\");\n</code></pre> <p>Ovanst\u00e5ende exempel med inskrivet procenttecken, allts\u00e5 shift + 5, ger f\u00f6ljande utskrift. <pre><code>Tryck p\u00e5 valfri tangent f\u00f6r att forts\u00e4tta...\n%\nKey: D5\nKeyChar: %\nModifiers: Shift\n</code></pre></p> <p>F\u00f6r att d\u00f6lja anv\u00e4ndarens inmatning kan metoden ReadKey() anv\u00e4ndas med argumentet true. Detta resulterar i att anv\u00e4ndarens inmatning inte visas i konsolen. <pre><code>ConsoleKeyInfo keyInfo = Console.ReadKey(true);\n</code></pre></p>"},{"location":"content/modul-2/4-villkorsoperatorn/","title":"Villkorsoperatorn","text":"<p>Villkorsoperatorn fungerar som en  if-sats, men p\u00e5 en rad. Anv\u00e4ndande av denna operator kan allts\u00e5 spara rader och inneb\u00e4ra en mer kompakt kod.</p> <p>Villkorsoperatorn best\u00e5r av tv\u00e5 tecken, ett fr\u00e5getecken och ett kolon, enligt f\u00f6ljande: \u2003?:</p> <p>I nedanst\u00e5ende exempel anv\u00e4nds villkorsoperatorn f\u00f6r att utv\u00e4rdera om variabeln number \u00e4r st\u00f6rre \u00e4n noll, och str\u00e4ngen result tilldelas \"positivt\" eller \"negativt\". <pre><code>int number = 5;\n\nstring result = number &gt; 0 ? \"positivt\" : \"negativt\";\n\nConsole.WriteLine($\"Talet \u00e4r {result}.\"); // Ger utskriften positivt.\n</code></pre></p> <p>Samma sak kan uppn\u00e5s med en vanlig if-sats enligt f\u00f6ljande. <pre><code>int number = 5;\nstring result;\n\nif (number &gt; 0)\n{\n    result = \"positivt\";\n}\nelse\n{\n    result = \"negativt\";\n}\n\nConsole.WriteLine($\"Talet \u00e4r {result}.\");\n</code></pre></p> <p>Ett knep f\u00f6r att komma ih\u00e5g syntaxen f\u00f6r villkorsoperatorn: <pre><code>\u00c4r villkoret sant ? Ja : Nej\n</code></pre></p> <p>J\u00e4mf\u00f6r detta med det f\u00f6reg\u00e5ende exemplet. <pre><code>//              Villkoret  ?     Ja     :    Nej\nstring result = number &gt; 0 ? \"positivt\" : \"negativt\";\n</code></pre></p>"},{"location":"content/modul-2/begrepp2/","title":"Begrepp - Modul 2","text":"<p>Selektion: Val i ett program baserat p\u00e5 villkor, d\u00e4r olika kodblock k\u00f6rs beroende p\u00e5 om villkoret \u00e4r sant eller falskt.</p> <p>If-sats: En villkorsstyrd sats som k\u00f6rs om ett specifikt villkor \u00e4r uppfyllt (sant).</p> <p>Else: En del av en if-sats som k\u00f6rs om villkoret i if-satsen inte \u00e4r uppfyllt (falskt).</p> <p>Else if: En f\u00f6rl\u00e4ngning av en if-sats som testar ett nytt villkor om det f\u00f6rsta villkoret var falskt.</p> <p>Switchuttryck: Ett uttryck som j\u00e4mf\u00f6r ett v\u00e4rde med flera m\u00f6jliga alternativ (cases) och k\u00f6r kod f\u00f6r det matchande fallet.</p> <p>Villkorssats: En sats som styr fl\u00f6det i programmet baserat p\u00e5 ett villkor, t.ex. if, else eller switch.</p> <p>N\u00e4stlad if-sats: En if-sats inuti en annan if-sats, anv\u00e4nds f\u00f6r att skapa fler niv\u00e5er av villkorskontroll.</p> <p>Logiskt uttryck: Ett uttryck som returnerar ett boolskt v\u00e4rde (true eller false).</p> <p>Kompileringsfel: Ett fel som uppst\u00e5r n\u00e4r koden inte kan \u00f6vers\u00e4ttas till maskinkod.</p> <p>Exekveringsfel: Ett fel som intr\u00e4ffar n\u00e4r programmet k\u00f6rs.</p> <p>Logiska fel: Ett fel i programmet d\u00e4r koden k\u00f6rs utan att krascha, men ger felaktiga resultat p\u00e5 grund av felaktig logik.</p> <p>Undantag (Exception): Ett fel som intr\u00e4ffar under k\u00f6rning och som kan leda till exekveringsfel om det inte hanteras.</p> <p>try-catch: Ett kodblock som f\u00e5ngar upp och hanterar undantag under exekvering f\u00f6r att f\u00f6rhindra att programmet kraschar.</p> <p>Breakpoint: En markering i k\u00e4llkoden d\u00e4r programmet tillf\u00e4lligt stoppas under fels\u00f6kning f\u00f6r att unders\u00f6ka programfl\u00f6det eller v\u00e4rden.</p> <p>Villkorsoperator: En operator som returnerar ett v\u00e4rde baserat p\u00e5 ett villkor, fungerar som en kortare if-sats.</p> <p>ReadKey: En metod som l\u00e4ser in ett enskilt tecken fr\u00e5n tangentbordet och v\u00e4ntar p\u00e5 att anv\u00e4ndaren ska trycka p\u00e5 en tangent.</p>"},{"location":"content/modul-2/l%C3%B6sn2/","title":"L\u00f6sningsf\u00f6rslag - Modul 2","text":""},{"location":"content/modul-2/l%C3%B6sn2/#uppgift-1","title":"Uppgift 1","text":"<pre><code>// Be om tv\u00e5 tal fr\u00e5n anv\u00e4ndaren\nConsole.WriteLine(\"Ange det f\u00f6rsta talet:\");\nint tal1 = int.Parse(Console.ReadLine());\n\nConsole.WriteLine(\"Ange det andra talet:\");\nint tal2 = int.Parse(Console.ReadLine());\n\n// J\u00e4mf\u00f6r de tv\u00e5 talen och skriv ut det minsta\nif (tal1 &lt; tal2)\n{\n    Console.WriteLine($\"Det minsta talet \u00e4r: {tal1}\");\n}\nelse if (tal2 &lt; tal1)\n{\n    Console.WriteLine($\"Det minsta talet \u00e4r: {tal2}\");\n}\nelse\n{\n    Console.WriteLine(\"Talen \u00e4r lika stora.\");\n}\n</code></pre>"},{"location":"content/modul-2/l%C3%B6sn2/#uppgift-2","title":"Uppgift 2","text":"<pre><code>// Be anv\u00e4ndaren att ange ett heltal\nConsole.WriteLine(\"Ange ett heltal:\");\nstring input = Console.ReadLine();\n\n// Spara returv\u00e4rdet fr\u00e5n TryParse i en variabel\nbool \u00e4rHeltal = int.TryParse(input, out int tal);\n\n// Anv\u00e4nd variabeln i if-satsen\nif (\u00e4rHeltal)\n{\n    // Kontrollera om talet \u00e4r j\u00e4mnt eller udda\n    if (tal % 2 == 0)\n    {\n        Console.WriteLine(\"Talet \u00e4r j\u00e4mnt.\");\n    }\n    else\n    {\n        Console.WriteLine(\"Talet \u00e4r udda.\");\n    }\n}\nelse\n{\n    // Felmeddelande om inmatningen inte \u00e4r ett heltal\n    Console.WriteLine(\"Fel: Det var inte ett giltigt heltal.\");\n}\n</code></pre>"},{"location":"content/modul-2/l%C3%B6sn2/#uppgift-3","title":"Uppgift 3","text":"<pre><code>int po\u00e4ng = 0;\n\n// Fr\u00e5ga 1\nConsole.WriteLine(\"Vad \u00e4r huvudstaden i Sverige?\");\nstring svar1 = Console.ReadLine().ToLower();\nif (svar1 == \"stockholm\")\n{\n    Console.WriteLine(\"R\u00e4tt svar!\");\n    po\u00e4ng++;\n}\nelse\n{\n    Console.WriteLine(\"Fel svar.\");\n}\n\n// Fr\u00e5ga 2\nConsole.WriteLine(\"Vad \u00e4r 2 + 2?\");\nstring svar2 = Console.ReadLine();\nif (svar2 == \"4\")\n{\n    Console.WriteLine(\"R\u00e4tt svar!\");\n    po\u00e4ng++;\n}\nelse\n{\n    Console.WriteLine(\"Fel svar.\");\n}\n\n// Fr\u00e5ga 3\nConsole.WriteLine(\"Vilket \u00e5r b\u00f6rjade andra v\u00e4rldskriget?\");\nstring svar3 = Console.ReadLine();\nif (svar3 == \"1939\")\n{\n    Console.WriteLine(\"R\u00e4tt svar!\");\n    po\u00e4ng++;\n}\nelse\n{\n    Console.WriteLine(\"Fel svar.\");\n}\n\n// Ge \u00e5terkoppling\nConsole.WriteLine($\"Du fick {po\u00e4ng} av 3 m\u00f6jliga r\u00e4tta svar.\");\n</code></pre>"},{"location":"content/modul-2/l%C3%B6sn2/#uppgift-4","title":"Uppgift 4","text":"<pre><code>// Informera anv\u00e4ndaren om po\u00e4nggr\u00e4nserna\nConsole.WriteLine(\"Po\u00e4nggr\u00e4nser: A = 90-100, B = 80-89, C = 70-79, D = 60-69, E = 50-59, F = under 50\");\n\n// Fr\u00e5ga anv\u00e4ndaren om deras po\u00e4ng\nConsole.WriteLine(\"Hur m\u00e5nga po\u00e4ng fick du?\");\nint po\u00e4ng = int.Parse(Console.ReadLine());\n\n// Kontrollera om po\u00e4ngen \u00e4r inom det till\u00e5tna intervallet\nif (po\u00e4ng &lt; 0 || po\u00e4ng &gt; 100)\n{\n    Console.WriteLine(\"Fel: Ange ett giltigt po\u00e4ng mellan 0 och 100.\");\n}\nelse\n{\n    // Best\u00e4m vilket betyg po\u00e4ngen motsvarar\n    if (po\u00e4ng &gt;= 90)\n    {\n        Console.WriteLine(\"Ditt betyg \u00e4r A.\");\n    }\n    else if (po\u00e4ng &gt;= 80)\n    {\n        Console.WriteLine(\"Ditt betyg \u00e4r B.\");\n    }\n    else if (po\u00e4ng &gt;= 70)\n    {\n        Console.WriteLine(\"Ditt betyg \u00e4r C.\");\n    }\n    else if (po\u00e4ng &gt;= 60)\n    {\n        Console.WriteLine(\"Ditt betyg \u00e4r D.\");\n    }\n    else if (po\u00e4ng &gt;= 50)\n    {\n        Console.WriteLine(\"Ditt betyg \u00e4r E.\");\n    }\n    else\n    {\n        Console.WriteLine(\"Ditt betyg \u00e4r F.\");\n    }\n}\n</code></pre>"},{"location":"content/modul-2/l%C3%B6sn2/#uppgift-5","title":"Uppgift 5","text":"<pre><code>// Fr\u00e5ga anv\u00e4ndaren vilken veckodag det \u00e4r\nConsole.WriteLine(\"Vilken veckodag \u00e4r det?\");\nstring veckodag = Console.ReadLine().ToLower();\n\n// Anv\u00e4nd en switch-sats f\u00f6r att ge f\u00f6rslag p\u00e5 matr\u00e4tt\nswitch (veckodag)\n{\n    case \"m\u00e5ndag\": // Faller igenom till torsdagens matr\u00e4tt\n    case \"torsdag\":\n        Console.WriteLine(\"Matr\u00e4tt: Spaghetti och k\u00f6ttf\u00e4rss\u00e5s.\");\n        break;\n    case \"tisdag\":\n        Console.WriteLine(\"Matr\u00e4tt: Fiskgrat\u00e4ng.\");\n        break;\n    case \"onsdag\":\n        Console.WriteLine(\"Matr\u00e4tt: Kycklingsallad.\");\n        break;\n    case \"fredag\":\n        Console.WriteLine(\"Matr\u00e4tt: Tacos.\");\n        break;\n    case \"l\u00f6rdag\":\n        Console.WriteLine(\"Matr\u00e4tt: Pizza.\");\n        break;\n    case \"s\u00f6ndag\":\n        Console.WriteLine(\"Matr\u00e4tt: Lasagne.\");\n        break;\n    default:\n        Console.WriteLine(\"Fel: Det var inte en giltig veckodag.\");\n        break;\n}\n</code></pre>"},{"location":"content/modul-2/l%C3%B6sn2/#uppgift-6","title":"Uppgift 6","text":"<pre><code>// Ta in tre tal fr\u00e5n anv\u00e4ndaren\nConsole.WriteLine(\"Ange f\u00f6rsta talet:\");\nint tal1 = int.Parse(Console.ReadLine());\n\nConsole.WriteLine(\"Ange andra talet:\");\nint tal2 = int.Parse(Console.ReadLine());\n\nConsole.WriteLine(\"Ange tredje talet:\");\nint tal3 = int.Parse(Console.ReadLine());\n\n// Sortera och skriv ut talen i storleksordning\nif (tal1 &lt;= tal2 &amp;&amp; tal1 &lt;= tal3) // Om tal 1 \u00e4r st\u00f6rst\n{\n    if (tal2 &lt;= tal3)\n    {\n        Console.WriteLine($\"{tal1}, {tal2}, {tal3}\");\n    }\n    else\n    {\n        Console.WriteLine($\"{tal1}, {tal3}, {tal2}\");\n    }\n}\nelse if (tal2 &lt;= tal1 &amp;&amp; tal2 &lt;= tal3) // Om tal 2 \u00e4r st\u00f6rst\n{\n    if (tal1 &lt;= tal3)\n    {\n        Console.WriteLine($\"{tal2}, {tal1}, {tal3}\");\n    }\n    else\n    {\n        Console.WriteLine($\"{tal2}, {tal3}, {tal1}\");\n    }\n}\nelse // H\u00e4r \u00e4r ju automatiskt tal 3 st\u00f6rst\n{\n    if (tal1 &lt;= tal2)\n    {\n        Console.WriteLine($\"{tal3}, {tal1}, {tal2}\");\n    }\n    else\n    {\n        Console.WriteLine($\"{tal3}, {tal2}, {tal1}\");\n    }\n}\n</code></pre>"},{"location":"content/modul-2/l%C3%B6sn2/#uppgift-7","title":"Uppgift 7","text":"<pre><code>// Fr\u00e5ga anv\u00e4ndaren efter f\u00f6rsta talet\nConsole.WriteLine(\"Ange ett tal:\");\ndouble tal1 = double.Parse(Console.ReadLine());\n\n// Fr\u00e5ga efter r\u00e4knes\u00e4tt\nConsole.WriteLine(\"Ange ett r\u00e4knes\u00e4tt (+, -, *, /, ^ f\u00f6r upph\u00f6jt till, sqrt f\u00f6r roten ur):\");\nstring raknesatt = Console.ReadLine();\n\n// Utf\u00f6r operationer beroende p\u00e5 r\u00e4knes\u00e4ttet\nif (raknesatt == \"sqrt\")\n{\n    // Roten ur operation\n    Console.WriteLine($\"Resultatet \u00e4r: {Math.Sqrt(tal1)}\");\n}\nelse\n{\n    // Fr\u00e5ga efter andra talet f\u00f6r \u00f6vriga operationer\n    Console.WriteLine(\"Ange ett tal till:\");\n    double tal2 = double.Parse(Console.ReadLine());\n\n    switch (raknesatt)\n    {\n        case \"+\":\n            Console.WriteLine($\"Resultatet \u00e4r: {tal1 + tal2}\");\n            break;\n        case \"-\":\n            Console.WriteLine($\"Resultatet \u00e4r: {tal1 - tal2}\");\n            break;\n        case \"*\":\n            Console.WriteLine($\"Resultatet \u00e4r: {tal1 * tal2}\");\n            break;\n        case \"/\":\n            if (tal2 != 0) // En kontroll s\u00e5 att det inte blir nolldivision!\n            {\n                Console.WriteLine($\"Resultatet \u00e4r: {tal1 / tal2}\");\n            }\n            else\n            {\n                Console.WriteLine(\"Fel: Division med noll \u00e4r inte till\u00e5ten.\");\n            }\n            break;\n        case \"^\":\n            Console.WriteLine($\"Resultatet \u00e4r: {Math.Pow(tal1, tal2)}\");\n            break;\n        default:\n            Console.WriteLine(\"Fel: Ogiltigt r\u00e4knes\u00e4tt.\");\n            break;\n    }\n}\n</code></pre>"},{"location":"content/modul-2/l%C3%B6sn2/#uppgift-8","title":"Uppgift 8","text":"<pre><code>// Be anv\u00e4ndaren att ange en vinkel\nConsole.WriteLine(\"Ange en vinkel i grader:\");\nint vinkel = int.Parse(Console.ReadLine());\n\n// Om vinkeln \u00e4r negativ, konvertera den till en positiv vinkel\nif (vinkel &lt; 0)\n{\n    vinkel = 360 + vinkel;\n}\n\n// Best\u00e4m vilken typ av vinkel det \u00e4r\nif (vinkel == 90)\n{\n    Console.WriteLine(\"Vinkeln \u00e4r r\u00e4t.\");\n}\nelse if (vinkel == 180)\n{\n    Console.WriteLine(\"Vinkeln \u00e4r rak.\");\n}\nelse if (vinkel == 360)\n{\n    Console.WriteLine(\"Vinkeln \u00e4r en hel vinkel.\");\n}\nelse if (vinkel &lt; 90)\n{\n    Console.WriteLine(\"Vinkeln \u00e4r spetsig.\");\n}\nelse if (vinkel &lt; 180)\n{\n    Console.WriteLine(\"Vinkeln \u00e4r trubbig.\");\n}\nelse\n{\n    // https://sv.wikipedia.org/wiki/Vinkel\n    Console.WriteLine(\"Vinkeln \u00e4r reflex.\");\n}\n</code></pre>"},{"location":"content/modul-2/l%C3%B6sn2/#uppgift-9","title":"Uppgift 9","text":"<pre><code>// Be anv\u00e4ndaren att ange ett \u00e5rtal\nConsole.WriteLine(\"Ange ett \u00e5rtal:\");\nstring input = Console.ReadLine();\n\n// Spara returv\u00e4rdet fr\u00e5n TryParse i en variabel\nbool \u00e4rHeltal = int.TryParse(input, out int \u00e5rtal);\n\n// Anv\u00e4nd variabeln i if-satsen och kontrollera att \u00e5rtalet \u00e4r positivt\nif (\u00e4rHeltal &amp;&amp; \u00e5rtal &gt;= 0)\n{\n    // Kontrollera om \u00e5rtalet \u00e4r nutid, d\u00e5tid eller framtid\n    if (\u00e5rtal &lt; 2023)\n    {\n        Console.WriteLine(\"\u00c5rtalet \u00e4r i d\u00e5tiden.\");\n    }\n    else if (\u00e5rtal &gt; 2023)\n    {\n        Console.WriteLine(\"\u00c5rtalet \u00e4r i framtiden.\");\n    }\n    else\n    {\n        Console.WriteLine(\"\u00c5rtalet \u00e4r i nutiden.\");\n    }\n\n    // Kontrollera om det \u00e4r ett skott\u00e5r\n    if ((\u00e5rtal % 4 == 0 &amp;&amp; \u00e5rtal % 100 != 0) || (\u00e5rtal % 400 == 0))\n    {\n        Console.WriteLine(\"Det \u00e4r ett skott\u00e5r.\");\n    }\n    else\n    {\n        Console.WriteLine(\"Det \u00e4r inte ett skott\u00e5r.\");\n    }\n}\nelse\n{\n    // Felmeddelande om inmatningen inte \u00e4r ett giltigt \u00e5rtal eller om det \u00e4r negativt\n    Console.WriteLine(\"Fel: Det var inte ett giltigt positivt \u00e5rtal.\");\n}\n</code></pre>"},{"location":"content/modul-2/l%C3%B6sn2/#uppgift-10","title":"Uppgift 10","text":"<p>a) <pre><code>// Fr\u00e5ga anv\u00e4ndaren hur m\u00e5nga hg godis de vill k\u00f6pa\nConsole.WriteLine(\"Hur m\u00e5nga hekto godis vill du k\u00f6pa?\");\ndouble vikt = double.Parse(Console.ReadLine());\n\n// Best\u00e4m priset beroende p\u00e5 vikten\nif (vikt &lt;= 10)\n{\n    Console.WriteLine($\"Priset \u00e4r {vikt * 9.90} kr.\");\n}\nelse if (vikt &lt;= 20)\n{\n    Console.WriteLine($\"Priset \u00e4r {vikt * 8.90} kr.\");\n}\nelse\n{\n    Console.WriteLine($\"Priset \u00e4r {vikt * 7.90} kr.\");\n}\n</code></pre></p> <p>b) <pre><code>// Fr\u00e5ga anv\u00e4ndaren hur mycket pengar de har\nConsole.WriteLine(\"Hur mycket pengar har du?\");\ndouble pengar = double.Parse(Console.ReadLine());\n\n// Best\u00e4m hur m\u00e5nga hekto godis anv\u00e4ndaren kan k\u00f6pa\n// F\u00f6r 89 kr kan man precis k\u00f6pa 1 kg godis f\u00f6r det billigare priset 8.90\n// Allts\u00e5 \u00e4r allt under 89 automatiskt priskategori 1, det dyrare\nif (pengar &lt;= 89)\n{\n    Console.WriteLine($\"Du kan k\u00f6pa {Math.Round(pengar / 9.90, 2)} hg godis.\");\n}\nelse if (pengar &lt;= 158) // Samma resonemang som ovan, man kan precis k\u00f6pa 2 kg f\u00f6r billigt pris f\u00f6r 158 kr\n{\n    Console.WriteLine($\"Du kan k\u00f6pa {Math.Round(pengar / 8.90, 2)} hg godis.\");\n}\nelse\n{\n    Console.WriteLine($\"Du kan k\u00f6pa {Math.Round(pengar / 7.90, 2)} hg godis.\");\n}\n</code></pre></p>"},{"location":"content/modul-2/l%C3%B6sn2/#uppgift-11","title":"Uppgift 11","text":"<pre><code>// Instruktioner\nConsole.WriteLine(\"L\u00f6ser ekvationer p\u00e5 formen ax^2 + bx + c = 0\");\nConsole.WriteLine(\"a m\u00e5ste vara skiljt fr\u00e5n 0.\");\n\n// Fr\u00e5ga anv\u00e4ndaren om koefficienterna f\u00f6r andragradsekvationen\nConsole.WriteLine(\"Ange v\u00e4rdet p\u00e5 a:\");\ndouble a = double.Parse(Console.ReadLine());\nConsole.WriteLine(\"Ange v\u00e4rdet p\u00e5 b:\");\ndouble b = double.Parse(Console.ReadLine());\nConsole.WriteLine(\"Ange v\u00e4rdet p\u00e5 c:\");\ndouble c = double.Parse(Console.ReadLine());\n\n// Ber\u00e4kna det som st\u00e5r under rottecknet (diskriminanten)\ndouble p = b / a;\ndouble q = c / a;\ndouble diskriminant = (p / 2) * (p / 2) - q;\n\n// Kontrollera l\u00f6sningar beroende p\u00e5 vad som st\u00e5r under rottecknet (diskriminanten)\nif (diskriminant &gt; 0) // Tv\u00e5 l\u00f6sningar\n{\n    double rot1 = -(p / 2) + Math.Sqrt(diskriminant);\n    double rot2 = -(p / 2) - Math.Sqrt(diskriminant);\n    Console.WriteLine($\"Ekvationen har tv\u00e5 reella l\u00f6sningar: {rot1} och {rot2}\");\n}\nelse if (diskriminant == 0) // En l\u00f6sning\n{\n    double rot = -(p / 2);\n    Console.WriteLine($\"Ekvationen har en reell l\u00f6sning: {rot}\");\n}\nelse // Negativ diskriminant, dela upp i tv\u00e5 delar, en reell och en imagin\u00e4r. a.k.a. \"Inga reella l\u00f6sningar\"\n{\n    double reellDel = -(p / 2); // F\u00f6rsta delen precis som vanligt i PQ\n    // Den andra delen, den som \u00e4r roten ur negativt tal, kan vi kalla imagin\u00e4r\n    // Byt tecken p\u00e5 den negativa diskriminanten och ta roten ur, l\u00e4gg sen till \"i\" i utskriften\n    double imagDel = Math.Sqrt(-diskriminant);\n    Console.WriteLine($\"Ekvationen har tv\u00e5 imagin\u00e4ra l\u00f6sningar: {reellDel} + {imagDel}i och {reellDel} - {imagDel}i\");\n}\n</code></pre>"},{"location":"content/modul-2/uppg2/","title":"\u00d6vningar - Modul 2","text":""},{"location":"content/modul-2/uppg2/#uppgift-1","title":"Uppgift 1","text":"<p>Skriv ett program som tar in tv\u00e5 tal fr\u00e5n anv\u00e4ndaren. Programmet ska sedan skriva ut det minsta talet. </p> <p>L\u00e4gg \u00e4ven till en funktion som hanterar specialfallet d\u00e5 talen \u00e4r lika stora.</p>"},{"location":"content/modul-2/uppg2/#uppgift-2","title":"Uppgift 2","text":"<p>Skriv ett program som tar in ett heltal fr\u00e5n anv\u00e4ndaren. Programmet ska unders\u00f6ka om talet \u00e4r j\u00e4mnt eller udda och \u00e5terkoppla den informationen till anv\u00e4ndaren.</p> <p>Programmet ska \u00e4ven ge ett felmeddelande om anv\u00e4ndaren skriver in n\u00e5got annat \u00e4n ett heltal.</p>"},{"location":"content/modul-2/uppg2/#uppgift-3","title":"Uppgift 3","text":"<p>Skriv ett program som k\u00f6r en enkel fr\u00e5gesport med anv\u00e4ndaren, minst 3 fr\u00e5gor, kan handla om vad som helst. </p> <p>Programmet ska st\u00e4lla fr\u00e5gorna i ordning och ge \u00e5terkoppling f\u00f6r varje svar om man svarat r\u00e4tt eller fel.</p> <p>Utveckla programmet med en po\u00e4ngfunktion som efter en genomf\u00f6rd omg\u00e5ng ger \u00e5terkoppling i stil med \"Du fick 3 av 5 m\u00f6jliga r\u00e4tta svar\" eller dylikt.</p>"},{"location":"content/modul-2/uppg2/#uppgift-4","title":"Uppgift 4","text":"<p>Skriv ett program som \"betygs\u00e4tter prov\", programmet ska informera anv\u00e4ndaren om po\u00e4nggr\u00e4nserna och sen fr\u00e5ga anv\u00e4ndaren vad den fick f\u00f6r po\u00e4ng.</p> <p>Programmet ska sedan \u00e5terkoppla till anv\u00e4ndaren vad f\u00f6r omd\u00f6me F/E/D/C/B/A det motsvarar. Det ska inte g\u00e5 att lura programmet med genom att ange mer \u00e4n maxpo\u00e4ng, eller negativa po\u00e4ng, eller annat oklart.</p>"},{"location":"content/modul-2/uppg2/#uppgift-5","title":"Uppgift 5","text":"<p>Skriv ett program som fr\u00e5gar anv\u00e4ndaren vilken veckodag det \u00e4r.</p> <p>Programmet ska f\u00f6rst\u00e5 vilken veckodag som avses oavsett om man anv\u00e4nder stor bokstav eller inte. </p> <p>Programmet ska sedan f\u00f6resl\u00e5 en matr\u00e4tt baserat p\u00e5 veckodagen. M\u00e5ndag och torsdag ska ha samma f\u00f6rslag. Anv\u00e4nd ett switchuttryck f\u00f6r att l\u00f6sa uppgiften.</p>"},{"location":"content/modul-2/uppg2/#uppgift-6","title":"Uppgift 6","text":"<p>Skriv ett program som tar in tre tal fr\u00e5n anv\u00e4ndaren. </p> <p>Programmet ska sedan skriva ut talen prydligt i storleksordning, med det minsta talet f\u00f6rst, ex. 13, 15, 33.</p>"},{"location":"content/modul-2/uppg2/#uppgift-7","title":"Uppgift 7","text":"<p>Skriv en ut\u00f6kad minir\u00e4knare, anv\u00e4ndaren ska kunna v\u00e4lja vilket r\u00e4knes\u00e4tt som anv\u00e4nds fr\u00e5n de fyra r\u00e4knes\u00e4tten. </p> <p>Programmet ska fr\u00e5ga efter ett tal, sen ett r\u00e4knes\u00e4tt, sen ett tal till.</p> <p>Programmet kan med f\u00f6rdel utvecklas till att hantera decimaltal och operationerna roten ur och upph\u00f6jt till.</p>"},{"location":"content/modul-2/uppg2/#uppgift-8","title":"Uppgift 8","text":"<p>Skriv ett program som tar in en vinkel fr\u00e5n anv\u00e4ndaren. Ett tal allts\u00e5.</p> <p>Programmet ska sedan \u00e5terkoppla med vilken \"typ\" av vinkel som angivits, exempelvis om vinkeln \u00e4r spetsig, r\u00e4t, trubbig, rak eller hel (En hel vinkel \u00e4r 360 grader).</p> <p>Programmet ska hantera negativa vinklar p\u00e5 s\u00e5 vis att de \u00f6vers\u00e4tts till positiva, t\u00e4nk enhetscirkeln. Ex. om anv\u00e4ndaren anger en vinkel -90 grader s\u00e5 ska programmet \u00f6vers\u00e4tta det till 270 grader. (Det handlar allts\u00e5 om att ta 360 + x).</p>"},{"location":"content/modul-2/uppg2/#uppgift-9","title":"Uppgift 9","text":"<p>Skriv ett program som tar in ett \u00e5rtal fr\u00e5n anv\u00e4ndaren. Programmet ska protestera via felmeddelande om anv\u00e4ndaren inte skriver in ett \u00e5rtal. Programmet ska inte acceptera negativa \u00e5rtal.</p> <p>Programmet ska sedan svara p\u00e5 om det givna \u00e5rtalet \u00e4r nutid, d\u00e5tid eller framtid. Programmet ska \u00e4ven \u00e5terkoppla om det \u00e4r ett skott\u00e5r.</p>"},{"location":"content/modul-2/uppg2/#uppgift-10","title":"Uppgift 10","text":"<p>En godisbutik har f\u00f6ljande prisbild:</p> <ul> <li>9.90 kr/hg vid k\u00f6p upp till 1 kg</li> <li>8.90 kr/hg vid k\u00f6p fr\u00e5n 1 till 2 kg</li> <li>7.90 kr/hg vid k\u00f6p \u00f6ver 2 kg</li> </ul> <p>a) Skriv ett program som fr\u00e5gar efter vikten i hg och sedan skriver ut priset till anv\u00e4ndaren. 1 kg = 10 hg.</p> <p>b) Skriv ett program som fr\u00e5gar anv\u00e4ndaren hur mycket pengar den har och sen skriver ut hur m\u00e5nga hg godis denne kan k\u00f6pa f\u00f6r pengarna. </p> <p>Notera att f\u00f6r 95 kr kan man k\u00f6pa cirkus 10,67 hg.</p>"},{"location":"content/modul-2/uppg2/#uppgift-11","title":"Uppgift 11","text":"<p>Uppdaterad PQ-formel. Utveckla ditt tidigare program som l\u00f6ser andragradsekvationer, eller skriv ett nytt.</p> <p>Programmet ska nu f\u00f6rutom den tidigare funktionaliteten ocks\u00e5 hantera ekvationer p\u00e5 formen ax^2 + bx + c = 0. </p> <p>Andragradsekvationer kan sakna reella r\u00f6tter, om diskriminanten (uttrycket under rottecknet) \u00e4r negativ. Programmet ska ge ett felmeddelande om detta intr\u00e4ffar, ex. \"Saknar reella l\u00f6sningar\". </p> <p>Alternativt ska programmet svara med ekvationens imagin\u00e4ra r\u00f6tter, ex. x^2 = -9 ger x = 3i och x = -3i</p>"},{"location":"content/modul-3/1-repetitionssatser/","title":"Repetitionssatser","text":"<p>Det \u00e4r ofta \u00f6nskv\u00e4rt att ett program kan utf\u00f6ra viss kod flera g\u00e5nger. Detta kan kallas att repetera, loopa eller iterera. Genom iteration kan ett program utf\u00f6ra samma eller n\u00e4stan samma kod flera g\u00e5nger, antingen ett best\u00e4mt antal g\u00e5nger eller s\u00e5 l\u00e4nge som ett givet villkor \u00e4r sant.</p> <p>Satser som upprepar kod brukar kallas loopar eller reptitionssatser. </p>"},{"location":"content/modul-3/1-repetitionssatser/#while","title":"While","text":"<p>En while-loop b\u00e5de ser ut och fungerar ungef\u00e4r som en if-sats, med skillnaden att n\u00e4r koden i kodblocket genomf\u00f6rts s\u00e5 kontrolleras villkoret igen, och om det fortfarande \u00e4r sant s\u00e5 upprepas kodraderna inuti kodblocket.</p> <pre><code>int a = 1;\nwhile (a &lt; 5) // Upprepa loopen s\u00e5 l\u00e4nge som a \u00e4r mindre \u00e4n 5.\n{\n    // Alla kodrader inuti kodblocket upprepas.\n    Console.WriteLine(\"Vi \u00e4r i loopen, forever!\");\n}\n</code></pre> <p>I det ovanst\u00e5ende exemplet k\u00f6rs loopen \u00e4nda tills programmet st\u00e4ngs av, ofta \u00e4r det inte \u00f6nskv\u00e4rt, koden kan modifieras s\u00e5 att variabeln a \u00e4ndras allt eftersom, vilket resulterar i att loopen inte upprepas f\u00f6r evigt.</p> <pre><code>int a = 1;\nwhile (a &lt; 5)\n{\n    Console.WriteLine(\"Vi \u00e4r i loopen!\");\n    a = a + 1; // \u00d6ka v\u00e4rdet p\u00e5 a med 1.\n}\n\n// Efter fyra \"varv\" kommer vi ut ur loopen, d\u00e5 a f\u00e5r v\u00e4rdet 5.\nConsole.WriteLine(\"Nu \u00e4r loopen klar!\");\n</code></pre> <p>Ovanst\u00e5ende kod ger f\u00f6ljande utskrift: <pre><code>Vi \u00e4r i loopen!\nVi \u00e4r i loopen!\nVi \u00e4r i loopen!\nVi \u00e4r i loopen!\nNu \u00e4r loopen klar!\n</code></pre></p>"},{"location":"content/modul-3/1-repetitionssatser/#do-while","title":"do-while","text":"<p>Ett specialfall av while-loopen, som kan vara anv\u00e4ndbart om man alltid vill k\u00f6ra koden i loopen minst en g\u00e5ng. </p> <p>I f\u00f6ljande exempel anv\u00e4nds en do-while-loop f\u00f6r att ta in ett tal som \u00e4r st\u00f6rre \u00e4n 10 fr\u00e5n anv\u00e4ndaren.</p> <pre><code>int number;\n\ndo\n{\n    Console.Write(\"Ange ett tal st\u00f6rre \u00e4n 10: \");\n    number = int.Parse(Console.ReadLine());\n\n} while (number &lt;= 10);\n\nConsole.WriteLine($\"Du angav {number}, vilket \u00e4r st\u00f6rre \u00e4n 10.\");\n</code></pre> <p>Notera att samma sak kan uppn\u00e5s med en vanlig while-loop.</p> <pre><code>int number = 0;\n\nwhile (number &lt;= 10)\n{\n    Console.Write(\"Ange ett tal st\u00f6rre \u00e4n 10: \");\n    number = int.Parse(Console.ReadLine());\n}\n\nConsole.WriteLine($\"Du angav {number}, vilket \u00e4r st\u00f6rre \u00e4n 10.\");\n</code></pre>"},{"location":"content/modul-3/1-repetitionssatser/#for","title":"For","text":"<p>En for-loop upprepar koden i kodblocket ett best\u00e4mt antal g\u00e5nger. Fungerar som en vanlig while-loop men har en inbyggd \"r\u00e4knare\".  <pre><code>// i \u00e4r r\u00e4knevariabeln, b\u00f6rjar h\u00e4r med v\u00e4rdet 0.\n// i &lt; 5 \u00e4r villkoret, s\u00e5 l\u00e4nge det \u00e4r sant k\u00f6rs loopen.\n// i++ k\u00f6rs i slutet av varje iteration, \u00f6kar v\u00e4rdet p\u00e5 i med ett.\n\nfor (int i = 0; i &lt; 5; i++)\n{\n    Console.WriteLine(\"Hej\");\n}\n</code></pre></p> <p>For-loopar \u00e4r anv\u00e4ndbara n\u00e4r man vet hur m\u00e5nga g\u00e5nger koden beh\u00f6ver upprepas.</p> <p>Ofta har man nytta av att anv\u00e4nda r\u00e4knevariabeln inne i loopen.  <pre><code>int num = 5;\n\n// Skriver ut 5:ans g\u00e5ngertabell, d\u00e5 num har v\u00e4rdet 5.\nfor (int i = 1; i &lt; 11; i++)\n{\n    Console.WriteLine($\"{i} * {num} = {i * num}\");\n}\n</code></pre> Ovanst\u00e5ende exempel ger f\u00f6ljande utskrift. <pre><code>1 * 5 = 5\n2 * 5 = 10\n3 * 5 = 15\n4 * 5 = 20\n5 * 5 = 25\n6 * 5 = 30\n7 * 5 = 35\n8 * 5 = 40\n9 * 5 = 45\n10 * 5 = 50\n</code></pre></p> <p>!! TODO: r\u00e4knevariabelns r\u00e4ckvidd -&gt; i finns inte utanf\u00f6r loopen</p> <p>!! TODO: for-reverse snippeten</p>"},{"location":"content/modul-3/1-repetitionssatser/#foreach","title":"Foreach","text":"<p>Foreach-loopen \u00e4r specialdesignad f\u00f6r att g\u00e5 igenom listor, arrayer och andra samlingstyper. </p> <p>En foreach-loop upprepar koden i kodblocket s\u00e5 m\u00e5nga g\u00e5nger som det finns element i samlingen. </p> <p>Om man inte k\u00e4nner till arrayer och listor kan foreach-loopen ocks\u00e5 demonstreras p\u00e5 en str\u00e4ng, som tekniskt sett \u00e4r en samling av tecken (char). <pre><code>// Samlingen ifr\u00e5ga, en str\u00e4ng med 3 element.\nstring text = \"hej\";\n\n// Ungef\u00e4r \"F\u00f6r varje grej i samlingen text, g\u00f6r det h\u00e4r!\"\nforeach (var item in text) // \"item\" kan \u00e4ndras till vad man vill.\n{\n    // H\u00e4r anropas \"item\", som d\u00e5 motsvarar respektive element i samlingen.\n    // F\u00f6rst h, sen e och till sist j.\n    Console.WriteLine(item);\n}\n</code></pre></p> <p>F\u00f6reg\u00e5ende exempel ger utskriften: <pre><code>h\ne\nj\n</code></pre></p>"},{"location":"content/modul-3/1-repetitionssatser/#nastlade-repetitionssatser","title":"N\u00e4stlade repetitionssatser","text":"<p>Det g\u00e5r alldeles utm\u00e4rkt att skriva loopar inne i andra loopar. Detta kallas n\u00e4stlade loopar. </p> <p>Det h\u00e4r kan vara anv\u00e4ndbart n\u00e4r man itererar \u00f6ver (g\u00e5r igenom) flerdimensionella datastrukturer, 2D och upp\u00e5t. Konkreta exempel kan vara att skriva ut g\u00e5ngertabeller, spelplaner och annat som har b\u00e5de l\u00e4ngd och bredd.</p> <p>Nedanst\u00e5ende exempel skriver ut \"Hej!\" sex g\u00e5nger.  <pre><code>// Yttre loop, k\u00f6rs tv\u00e5 g\u00e5nger.\nfor (int i = 0; i &lt; 2; i++)\n{\n    // Inre loop, k\u00f6rs 3 g\u00e5nger F\u00d6R varje varv av den yttre.\n    // Notera hur det inte g\u00e5r att anv\u00e4nda variabelnamnet i igen.\n    for (int j = 0; j &lt; 3; j++)\n    {\n        Console.WriteLine(\"Hej!\");\n    }\n}\n</code></pre></p> <p>N\u00e4stlade loopar kan anv\u00e4ndas f\u00f6r att skriva ut tv\u00e5dimensionella strukturer, t\u00e4nk spelplaner, schackbr\u00e4den eller s\u00e4nka skepp.  <pre><code>// Antal g\u00e5nger yttre loopen g\u00e5r motsvarar antal rader.\nfor (int i = 0; i &lt; 3; i++)\n{\n    // Antal g\u00e5nger inre loopen g\u00e5r motsvarar antal kolumner.\n    for (int j = 0; j &lt; 3; j++)\n    {\n        Console.Write(\"X \");\n    }\n    Console.WriteLine(); // Ny rad innan n\u00e4st rad p\u00e5b\u00f6rjas\n}\n</code></pre> Ovanst\u00e5ende exempel ger utskriften: <pre><code>X X X\nX X X\nX X X\n</code></pre></p>"},{"location":"content/modul-3/1-repetitionssatser/#break-och-continue","title":"break och continue","text":"<p>I repetitionssatser kan nyckelorden break och continue anv\u00e4ndas.</p> <p>Nyckelordet break avbryter helt repetitionssatsen. <pre><code>for (int i = 1; i &lt;= 10; i++)\n{\n    if (i == 5)\n    {\n        break; // Avbryter loopen n\u00e4r i \u00e4r 5.\n    }\n    Console.WriteLine(i);\n}\n\nConsole.WriteLine(\"Loopen avbr\u00f6ts vid i = 5.\");\n</code></pre></p> <pre><code>1\n2\n3\n4\nLoopen avbr\u00f6ts vid i = 5.\n</code></pre> <p>Nyckelordet continue avbryter det aktuella \"varvet\" i repetitionssatsen och p\u00e5b\u00f6rjar n\u00e4sta varv. <pre><code>for (int i = 1; i &lt;= 10; i++)\n{\n    if (i == 5)\n    {\n        continue; // Hoppar \u00f6ver resten av loopen n\u00e4r i \u00e4r 5.\n    }\n    Console.WriteLine(i);\n}\n\nConsole.WriteLine(\"Talet 5 hoppades \u00f6ver i loopen.\");\n</code></pre></p> <pre><code>1\n2\n3\n4\n6\n7\n8\n9\n10\nTalet 5 hoppades \u00f6ver i loopen.\n</code></pre>"},{"location":"content/modul-3/2-str%C3%A4ngar-format/","title":"Str\u00e4nghantering och formatering","text":""},{"location":"content/modul-3/2-str%C3%A4ngar-format/#strangar","title":"Str\u00e4ngar","text":"<p>I C# \u00e4r en str\u00e4ng en sekvens av tecken (char). Dessa kan manipuleras p\u00e5 olika s\u00e4tt, exempelvis komma \u00e5t enskilda tecken, plocka is\u00e4r och s\u00e4tta ihop str\u00e4ngar och formatera dem p\u00e5 olika s\u00e4tt.</p> <p>Enskilda tecken i str\u00e4ngar kan kommas \u00e5t via tecknets index. Index \u00e4r ett s\u00e4tt att h\u00e5lla koll p\u00e5 element i samlingar, och kommer anv\u00e4ndas i andra sammanhang \u00e4n str\u00e4ngar ocks\u00e5. Index b\u00f6rjar alltid p\u00e5 0, s\u00e5 en str\u00e4ng med 6 tecken kommer ha index fr\u00e5n och med 0 till och med 5. <pre><code>// Index:      012345 \nstring text = \"Hejsan\";\nchar tecken = text[2]; // Tilldela v\u00e4rdet fr\u00e5n index 2 till variabeln tecken\n\nConsole.WriteLine(tecken); // Ger utskriften j.\n</code></pre></p> <p>Man kan ocks\u00e5 specificera intervall f\u00f6r vilka tecken som ska kommas \u00e5t med f\u00f6ljande syntax. Notera att den f\u00f6rsta indexangivelsen ing\u00e5r i intervallet, men inte den andra, exempelvis fr\u00e5n och med 2 till 4. <pre><code>// Index:      012345 \nstring text = \"Hejsan\";\n\n// Fr\u00e5n och med 2, till 4, dvs index 2 och 3\nConsole.WriteLine(text[2..4]); // Ger utskriften: js\n\n// Fr\u00e5n start till 2, dvs index 0 och 1.\nConsole.WriteLine(text[..2]); // Ger utskriften: He\n\n// Fr\u00e5n och med 3 till slutet, dvs index 3, 4 och 5\nConsole.WriteLine(text[3..]); // Ger utskriften: san\n</code></pre></p>"},{"location":"content/modul-3/2-str%C3%A4ngar-format/#specialtecken-i-strangar","title":"Specialtecken i str\u00e4ngar","text":""},{"location":"content/modul-3/2-str%C3%A4ngar-format/#escape-sequences","title":"Escape sequences","text":"<p>Teckenkombinationer best\u00e5ende av backslash <code>\\</code> f\u00f6ljt av n\u00e5got annat tecken kallas \"escape sequences\", i brist p\u00e5 bra \u00f6vers\u00e4ttning. </p> <p>Kan anv\u00e4ndas f\u00f6r att skriva ut specialtecken s\u00e5som citattecken och backslash, som annars inte kan skrivas ut i text eftersom de har en egen funktion i str\u00e4ngar. <pre><code>Console.WriteLine(\"Backslash: \\\\\"); // Ger utskrift: Backslash: \\\nConsole.WriteLine(\"Citattecken: \\\"\"); // Ger utskrift: Citattecken: \"\n</code></pre></p> <p>Det finns en del olika escape sequences, n\u00e5gra exempel \u00e4r: <code>\\n</code> f\u00f6r ny rad, <code>\\t</code> f\u00f6r tab och <code>\\b</code> f\u00f6r backspace.</p>"},{"location":"content/modul-3/2-str%C3%A4ngar-format/#interpolated-strings","title":"Interpolated strings","text":"<p>Str\u00e4nginterpolering, aningen oklar g\u00e4llande svenskt begrepp h\u00e4r. En interpolerad str\u00e4ng \u00e4r en str\u00e4ng som kan inneh\u00e5lla variabeluttryck. Tidigare kunde detta genomf\u00f6ras via \"string composite formatting\", som har markant l\u00e4gre l\u00e4sbarhet.</p> <p>F\u00f6r att g\u00f6ra en interpolerad str\u00e4ng s\u00e4tts <code>$</code> framf\u00f6r str\u00e4ngen. Variabler kan sedan anv\u00e4ndas inne i str\u00e4ngen inkapslade i klammerparenteser {}. <pre><code>string name = \"Arne\";\nint age = 99;\n\nConsole.WriteLine($\"Hej {name}, du \u00e4r {age} \u00e5r gammal!\");\n</code></pre></p>"},{"location":"content/modul-3/2-str%C3%A4ngar-format/#verbatim-strings","title":"Verbatim strings","text":"<p>Verbatim \u00f6vers\u00e4tts till ordagrant. Det h\u00e4r \u00e4r en metod f\u00f6r att f\u00e5 kompilatorn att tolka str\u00e4ngen ordagrant, precis som det st\u00e5r. F\u00f6r att uppn\u00e5 detta s\u00e4tts @ framf\u00f6r str\u00e4ngen. Notera att det h\u00e4r motverkar eventuella escape sequences s\u00e5som <code>\\n</code> som redan finns i str\u00e4ngen. <pre><code>Console.WriteLine(\"Hej \\n p\u00e5 dig.\"); // Ger en utskrift p\u00e5 tv\u00e5 rader.\n\nConsole.WriteLine(@\"Hej \\np\u00e5 dig.\"); // Ger utskriften: Hej \\np\u00e5 dig.\n</code></pre></p>"},{"location":"content/modul-3/2-str%C3%A4ngar-format/#hantering-av-strangar","title":"Hantering av str\u00e4ngar","text":""},{"location":"content/modul-3/2-str%C3%A4ngar-format/#iterera-over-strang","title":"Iterera \u00f6ver str\u00e4ng","text":"<p>F\u00f6r att hantera str\u00e4ngar och deras inneh\u00e5ll kan man ha nytta av att g\u00e5 igenom str\u00e4ngen och leta efter specifika tecken, exempelvis ett program som ska r\u00e4kna hur m\u00e5nga bokst\u00e4ver av samma typ det finns i en str\u00e4ng. <pre><code>string name = \"Arne Bengtsson\";\nint count = 0;\n\n// Iterera \u00f6ver str\u00e4ngen, A, r, n osv\nfor (int i = 0; i &lt; name.Length; i++)\n{\n    if (name[i] == 'e')\n    {\n        count++;\n    }\n}\n</code></pre></p>"},{"location":"content/modul-3/2-str%C3%A4ngar-format/#metoder","title":"Metoder","text":"<p>Det finns en uppsj\u00f6 av metoder som kan vara behj\u00e4lpliga vid hantering av str\u00e4ngar, ett urval av dessa presenteras nedan:</p> <ul> <li>Replace()</li> <li>Contains()</li> <li>EndsWith()</li> <li>StartsWith()</li> <li>Equals()</li> <li>IndexOf()</li> <li>ToUpper()</li> <li>ToLower()</li> <li>Insert()</li> <li>Remove()</li> <li>SubString()</li> <li>length \u2190 en property (egenskap), s\u00e5 ingen parentes</li> </ul> <p>Exempelvis kan Contains() anv\u00e4ndas f\u00f6r att unders\u00f6ka om ett visst tecken finns i en str\u00e4ng. <pre><code>string text = \"Det h\u00e4r \u00e4r min text!\";\nConsole.WriteLine(text.Contains(\"n\")); // Ger utskriften True\n</code></pre></p>"},{"location":"content/modul-3/2-str%C3%A4ngar-format/#separera-information","title":"Separera information","text":"<p>Ibland kan det f\u00f6religga behov av att dela upp information som anv\u00e4ndaren har skrivit, exempelvis om anv\u00e4ndaren skrivit b\u00e5de f\u00f6r och efternamn i en str\u00e4ng, och denna information ska sparas i programmet i tv\u00e5 separata variabler. </p> <p>Ett s\u00e4tt att \u00e5stadkomma det med hj\u00e4lp av metoderna IndexOf() och SubString() presenteras nedan. <pre><code>string name = \"Arne Bengtsson\";\nint indexSpace;\n\n// Hitta index f\u00f6r mellanslaget\nindexSpace = name.IndexOf(' ');\n\n// G\u00f6r nya str\u00e4ngar \nstring firstName = name.Substring(0, indexSpace);\nstring lastName = name.Substring(indexSpace + 1);\n</code></pre></p>"},{"location":"content/modul-3/2-str%C3%A4ngar-format/#formatering","title":"Formatering","text":""},{"location":"content/modul-3/2-str%C3%A4ngar-format/#tal","title":"Tal","text":"<p>I interpolerade str\u00e4ngar kan man formatera v\u00e4rdena, genom att skriva ett kolon och sen en formatkod enligt f\u00f6ljande:  <pre><code>{variabel:formatkod}\n</code></pre></p> <p>Det finns flertalet olika formatkoder, n\u00e5gra relevanta exempel \u00e4r: </p> <ul> <li>F (fixed-point), heltal/decimaltal med givet antal decimaler</li> <li>N (Number), tusentalsavgr\u00e4nsare och givet antal decimaler</li> <li>E (Exponential), grundpotensform med givet antal decimaler</li> <li>P (Procent), procentandel med givet antal decimaler</li> <li>C (Valuta), valuta med givet antal decimaler</li> </ul> <p>Saker som vilken enhet valutan har och vilken tusentalsavgr\u00e4nsare som anv\u00e4nds \u00e4r beroende p\u00e5 operativsystemets inst\u00e4llningar. Det givna antalet decimaler inneb\u00e4r en avrundning.</p> <p>Exempelvis kan man avrunda tal med m\u00e5nga decimaler, eller skriva stora tal tydligare. Notera att formatkoden inte \u00e4r skiftl\u00e4gesk\u00e4nslig, och kan skrivas antingen med stor eller liten bokstav. <pre><code>double pi = 3.1415926535;\ndouble num = 123456789;\n\nConsole.WriteLine($\"Formatet f3 ger: {pi:f3}\"); // 3,142\nConsole.WriteLine($\"Formatet n0 ger: {num:n0}\"); // 123 456 789\n</code></pre></p>"},{"location":"content/modul-3/2-str%C3%A4ngar-format/#hoger-och-vansterjustering","title":"H\u00f6ger -och v\u00e4nsterjustering","text":"<p>Det g\u00e5r att ange vilken bredd man vill att en interpolerad str\u00e4ng ska ta upp, och ange om texten ska vara justerad \u00e5t n\u00e5got h\u00e5ll. Det h\u00e4r kan vara anv\u00e4ndbart om man vill skriva ut information i tabeller. Notera att -10 inneb\u00e4r att str\u00e4ngen totalt ska ta upp 10 tecken, och vara justerad \u00e5t v\u00e4nster.  <pre><code>int num1 = 23;\nint num2 = 19;\n\nConsole.WriteLine($\"|{num1,-10}|\");\nConsole.WriteLine($\"|{num2, 10}|\");\n/* Ger utskriften:\n|23        |\n|        19|\n*/\n</code></pre></p> <p>Positionsjustering kan kombineras med formateringen. Exemplet nedan avrundar v\u00e4rdet till 2 decimaler, samt h\u00f6gerjusterar \u00f6ver 6 teckens bredd. <pre><code>double temperatur = 12.345;\nConsole.WriteLine($\"H\u00f6gerjusterat: {temperatur,6:f2}\");\n</code></pre></p> <p>https://learn.microsoft.com/en-us/dotnet/standard/base-types/standard-numeric-format-strings</p>"},{"location":"content/modul-3/3-filhantering/","title":"Filhantering","text":"<p>Filhantering i denna kurs kommer anv\u00e4nda klassen File, som finns i System.IO, d\u00e4r IO st\u00e5r f\u00f6r Input/Output, vilket ju \u00e4r rimligt i sammanhanget. L\u00e4ggs till \u00f6verst i k\u00e4llkoden. <pre><code>using System;\nusing System.IO;\n</code></pre> Notera, att skriva till fil och l\u00e4sa fr\u00e5n fil med klassen File \u00e4r egentligen bara en f\u00f6renkling av andra metoder fr\u00e5n klassen FileStream. L\u00e4ttsm\u00e4lt f\u00f6rklaring, tack stackoverflow. <sup>1</sup></p>"},{"location":"content/modul-3/3-filhantering/#skriva-till-fil","title":"Skriva till fil","text":"<p>F\u00f6r att skriva till en fil, allts\u00e5 spara information i filen utanf\u00f6r programmet, kan man anv\u00e4nda metoden WriteAllText(), som tar tv\u00e5 argument,  - en s\u00f6kv\u00e4g f\u00f6r filen som ska skrivas i  - och texten som ska skrivas</p> <p>Dessa anges rimligen via variabler. <pre><code>string path = @\"C:\\Users\\emilw\\Desktop\\MIN_FIL.txt\";\nstring msg = \"Jag skriver saker...\";\n\nFile.WriteAllText(path, msg);\n</code></pre> Om filen inte finns skapas den. Om filen redan finns skriver metoden \u00f6ver det som st\u00e5r i den. Om man bara anger filnamn ist\u00e4llet f\u00f6r hela s\u00f6kv\u00e4gen t.ex. \"MIN_FIL.txt\", s\u00e5 kommer filen skapas i samma mapp som .exe filen, din projektmapp.</p> <p>F\u00f6r att undvika att skriva \u00f6ver det som redan st\u00e5r, allts\u00e5 om man bara vill l\u00e4gga till text, kan metoden AppendAllText() anv\u00e4ndas. Syntaxen \u00e4r likadan som med ovanst\u00e5ende WriteAllTExt(). <pre><code>File.AppendAllText(path, msg);\n</code></pre> Den str\u00e4ng som anges som argument till metoden kommer l\u00e4ggas till sist i filen.</p>"},{"location":"content/modul-3/3-filhantering/#lasa-fran-fil","title":"L\u00e4sa fr\u00e5n fil","text":"<p>F\u00f6r att komma \u00e5t informationen fr\u00e5n en fil anv\u00e4nds metoden ReadAllText(), som tar ett argument, n\u00e4mligen filens s\u00f6kv\u00e4g. Metoden returnerar en str\u00e4ng med all text som finns i filen, denna informationen kan sparas/skrivas ut. <pre><code>string path = @\"C:\\Users\\emilw\\Desktop\\MIN_FIL.txt\";\nstring info;\n\n//L\u00e4sa in text fr\u00e5n filen, spara i variabel\ninfo = File.WriteAllText(path);\n\n//Skriva ut\nConsole.WriteLine(info);\n</code></pre></p>"},{"location":"content/modul-3/3-filhantering/#arrayer-och-listor","title":"Arrayer och listor","text":"<p>Har man en array/lista/dylikt g\u00e5r det utm\u00e4rkt att ist\u00e4llet anv\u00e4nda metoderna WriteAllLines(), AppendAllLines() och ReadAllLines().</p> <p>De fungerar p\u00e5 samma s\u00e4tt som motsvarigheterna ovan, f\u00f6rutom att man anger en array av str\u00e4ngar som argument. Samt att ReadAllLines() returnerar en array.</p> <p><pre><code>string path = @\"C:\\Users\\emilw\\Desktop\\MIN_FIL.txt\";\nstring[] myArray = {\"Hej\", \"p\u00e5\", \"dig!\"};\n\nFile.WriteAllText(path, myArray);\n</code></pre> Notera att dessa metoder skriver varje element fr\u00e5n arrayen p\u00e5 en ny rad.</p>"},{"location":"content/modul-3/3-filhantering/#ovrigt","title":"\u00d6vrigt","text":"<p>Andra metoder och egenskaper som kan vara av intresse n\u00e4r man arbetar med klassen File. <pre><code>File.Exists(); //Kontrollerar om en fil finns\nFile.Create(); //G\u00f6r en fil, t.ex. om den inte redan finns, men borde finnas\n\n//Om man vill flytta runt och kopiera filer\nFile.Copy();\nFile.Delete();\nFile.Move();\nFile.Replace();\n</code></pre></p> <ol> <li> <p>https://stackoverflow.com/questions/17380506/filestream-vs-system-io-file-writealltext-when-writing-to-files\u00a0\u21a9</p> </li> </ol>"},{"location":"content/modul-3/4-alg-pseudo-aktdiag/","title":"Algoritmer, Pseudokod och Aktivitetsdiagram","text":"<p>Vid utvecklande av st\u00f6rre program kan man oftast inte bara b\u00f6rja skriva kod direkt. En t\u00e4nkbar arbetsg\u00e5ng vore n\u00e5got i stil med:</p> <ul> <li>F\u00f6rst\u00e5 problemet</li> <li>Fundera ut en potentiell l\u00f6sning</li> <li>Skriv kod f\u00f6r din l\u00f6sning</li> <li>Testa och utv\u00e4rdera</li> </ul> <p>Programmering handlar allts\u00e5 inte bara om att skriva kod, utan \u00e4ven om probleml\u00f6sning, hur man anv\u00e4nder kod f\u00f6r att l\u00f6sa problemet ifr\u00e5ga. </p>"},{"location":"content/modul-3/4-alg-pseudo-aktdiag/#algoritmer","title":"Algoritmer","text":"<p>En dator g\u00f6r exakt det som den blir tillsagd att g\u00f6ra, d\u00e4rf\u00f6r \u00e4r det viktigt att vara v\u00e4ldigt tydlig med instruktionerna, allts\u00e5 k\u00e4llkoden. En algoritm \u00e4r en exakt beskrivning av hur man l\u00f6ser ett problem. Den inneh\u00e5ller instruktioner som steg f\u00f6r steg talar om vad som ska g\u00f6ras.</p> <p>Algoritmer kan anv\u00e4ndas i andra sammanhang \u00e4n programmering, exempelvis \u00e4r ett bakningsrecept en slags algoritm, eller f\u00f6r den delen en instruktionsbok/bruksanvisning.</p> <p>En algoritm \u00e4r allts\u00e5 en metod f\u00f6r att l\u00f6sa ett problem genom att utf\u00f6ra ett antal instruktioner i en given ordning. Metoden ska efter ett \u00e4ndligt antal instruktioner n\u00e5 l\u00f6sningen.</p>"},{"location":"content/modul-3/4-alg-pseudo-aktdiag/#pseudokod","title":"Pseudokod","text":"<p>Algoritmer kan uttryckas p\u00e5 olika s\u00e4tt, ett s\u00e4tt \u00e4r att blanda vanligt spr\u00e5k och programmeringstermer, pseudokod. </p> <p>Pseudokod har inga h\u00e5rda regler, vilket inneb\u00e4r att man kan strunta i detaljerna och fokusera p\u00e5 hur sj\u00e4lva problemet ska l\u00f6sas. Det \u00e4r viktigt att vara tydlig s\u00e5 att inga missf\u00f6rst\u00e5nd uppst\u00e5r.</p> <p>Pseudokoden kan sedan vara ett bra st\u00f6d n\u00e4r man skriver det riktiga programmet.</p> <p>Nedan f\u00f6ljer tv\u00e5 exempel p\u00e5 pseudokod, de skiljer sig lite \u00e5t men b\u00e5da fungerar bra. <pre><code>// Exempel p\u00e5 pseudokod - T\u00e4nk p\u00e5 ett tal   \nT\u00e4nk p\u00e5 ett heltal (1-20)   \nAddera 1   \nMultiplicera med 2   \nSubtrahera 6   \nHalvera   \nAddera 3   \nSubtrahera ditt ursprungliga tal   \nNu har du f\u00e5tt talet 1! \n</code></pre></p> <pre><code>// Exempel p\u00e5 pseudokod - \u00c4r du myndig?\nStarta \n    L\u00e4s in \u00e5lder \n    Om \u00e5lder \u00e4r st\u00f6rre \u00e4n eller lika med 18 \n        Skriv ut \"Du \u00e4r myndig.\" \n    Annars \n        Skriv ut \"Du \u00e4r inte myndig.\" \n    Slut p\u00e5 om \nSluta\n</code></pre> <p>Tips</p> <p>Pseudokod \u00e4r vanligt spr\u00e5k eventuellt blandat med programmeringstermer och kanske det minst formella s\u00e4ttet att beskriva en algoritm.</p>"},{"location":"content/modul-3/4-alg-pseudo-aktdiag/#aktivitetsdiagram","title":"Aktivitetsdiagram","text":"<p>Aktivitetsdiagram \u00e4r en typ av fl\u00f6desschema som  kan anv\u00e4ndas f\u00f6r att b\u00e5de planera men ocks\u00e5 visualisera logiken i ett program. </p> <p>Nedan presenteras ett aktivitetsdiagram f\u00f6r \u201dGissa Talet\u201d. Datorn slumpar fram ett tal, t.ex. mellan 1 \u2013 100. Anv\u00e4ndaren ska p\u00e5 s\u00e5 f\u00e5 gissningar som m\u00f6jligt gissa vilket tal datorn slumpat fram. F\u00f6r varje gissning anv\u00e4ndaren g\u00f6r svarar datorn antingen: du gissade f\u00f6r l\u00e5gt, du gissade f\u00f6r h\u00f6gt eller du gissade r\u00e4tt. Om gissningen inte \u00e4r korrekt ska anv\u00e4ndaren g\u00f6ra en ny gissning och det ska upprepas tills anv\u00e4ndaren gissat r\u00e4tt.</p> <p></p> <p>Notera att olika symboler har olika betydelse.  - Rektangel med rundade h\u00f6rn f\u00f6r start respektive stopp av program. - Vanlig rektangel f\u00f6r vanlig sekvens av kod. - Romben motsvarar en selektion, if eller switch. - Pilarna tillbaka till sekvensen \"Gissa talet\" representerar en iteration, loop.</p> <p>Tips</p> <p>Ett aktivitetsdiagram, som \u00e4r en typ av fl\u00f6desschema, \u00e4r ett formellt s\u00e4tt att beskriva en algoritm och den kan direkt \u00f6vers\u00e4ttas till k\u00e4llkod eftersom den best\u00e5r av symboler som direkt kan \u00f6vers\u00e4ttas till k\u00e4llkod.</p>"},{"location":"content/modul-3/begrepp3/","title":"Begrepp - Modul 3","text":""},{"location":"content/modul-3/begrepp3/#selektion","title":"Selektion","text":"<p>Iteration: Upprepad k\u00f6rning av en sekvens av instruktioner tills ett specifikt villkor \u00e4r uppfyllt.</p> <p>Loop: En struktur i programmering som till\u00e5ter upprepning av kodblock flera g\u00e5nger, baserat p\u00e5 ett villkor.</p> <p>While: En loop som upprepas s\u00e5 l\u00e4nge ett angivet villkor \u00e4r sant.</p> <p>Do while: En loop som k\u00f6rs minst en g\u00e5ng och forts\u00e4tter s\u00e5 l\u00e4nge villkoret f\u00f6rblir sant, eftersom villkoret utv\u00e4rderas efter f\u00f6rsta k\u00f6rningen.</p> <p>For: En loop som upprepas ett specifikt antal g\u00e5nger, d\u00e4r en r\u00e4knare vanligtvis anv\u00e4nds f\u00f6r att kontrollera antalet iterationer.</p> <p>Foreach: En loop som anv\u00e4nds f\u00f6r att iterera genom alla element i en samling, som en array eller lista, d\u00e4r varje element bearbetas i tur och ordning.</p> <p>N\u00e4stlad loop: En loop som k\u00f6rs inuti en annan loop, d\u00e4r den inre loopen k\u00f6rs helt f\u00f6r varje iteration av den yttre loopen.</p> <p>Break: Ett kommando som anv\u00e4nds f\u00f6r att avbryta och avsluta en loop eller switch-sats innan den har k\u00f6rts klart.</p> <p>Continue: Ett kommando som anv\u00e4nds f\u00f6r att hoppa \u00f6ver den resterande delen av en iteration i en loop och forts\u00e4tta till n\u00e4sta iteration.</p>"},{"location":"content/modul-3/begrepp3/#strangar-och-formatering","title":"Str\u00e4ngar och formatering","text":"<p>Index: Ett tal som representerar positionen f\u00f6r ett element i en str\u00e4ng, lista, array eller annan datastruktur, med start fr\u00e5n 0.</p> <p>Escape sequence: En sekvens av tecken som representerar specialtecken i str\u00e4ngar, t.ex. <code>\\n</code> f\u00f6r radbrytning eller <code>\\t</code> f\u00f6r tabb.</p> <p>Interpolerad str\u00e4ng: En str\u00e4ng som l\u00e5ter dig inkludera variabler direkt inuti str\u00e4ngen med hj\u00e4lp av <code>$\"...\"</code>, d\u00e4r variabelv\u00e4rden ers\u00e4tts i str\u00e4ngen.</p> <p>Verbatim strings/Ordagrann str\u00e4ng: En str\u00e4ng som ignorerar escape-sekvenser och l\u00e5ter text skrivas exakt som den \u00e4r med hj\u00e4lp av <code>@\"...\"</code>. Anv\u00e4nds ofta f\u00f6r att skriva filv\u00e4gar eller text med specialtecken.</p> <p>Contains(): En metod som kontrollerar om en specifik delstr\u00e4ng finns inuti en annan str\u00e4ng och returnerar ett sant eller falskt v\u00e4rde.</p>"},{"location":"content/modul-3/begrepp3/#filhantering","title":"Filhantering","text":"<p>IO (Input/Output): Kommunikation mellan ett program och v\u00e4rlden utanf\u00f6r, som att l\u00e4sa in data fr\u00e5n anv\u00e4ndaren (input) eller skriva ut resultat till sk\u00e4rmen (output).</p>"},{"location":"content/modul-3/begrepp3/#algoritmer-pseudokod-och-aktivitetsdiagram","title":"Algoritmer, pseudokod och aktivitetsdiagram","text":"<p>Algoritm: En sekvens av v\u00e4ldefinierade steg som l\u00f6ser ett specifikt problem eller utf\u00f6r en uppgift.</p> <p>Pseudokod: En informell beskrivning av en algoritm som anv\u00e4nder vanlig text f\u00f6r att f\u00f6rklara logiken, utan att f\u00f6lja ett specifikt programmeringsspr\u00e5k.</p> <p>Aktivitetsdiagram: Ett grafiskt verktyg som visar stegen i en process eller ett program genom symboler som representerar start, beslut, processer och slut.</p>"},{"location":"content/modul-3/l%C3%B6sn3/","title":"L\u00f6sningsf\u00f6rslag - Modul 3","text":""},{"location":"content/modul-3/l%C3%B6sn3/#uppgift-1","title":"Uppgift 1","text":"<pre><code>// Skriv ut tal fr\u00e5n 0 till och med 30 \nfor (int i = 0; i &lt;= 30; i++)\n{\n    Console.WriteLine(i);\n}\n\n// V\u00e4nta p\u00e5 knapptryckning \nConsole.WriteLine(\"Tryck p\u00e5 valfri tangent f\u00f6r att forts\u00e4tta...\");\nConsole.ReadKey();\n\n// R\u00e4kna ned fr\u00e5n 30 till -30\nfor (int i = 30; i &gt;= -30; i--)\n{\n    Console.WriteLine(i);\n}\n</code></pre>"},{"location":"content/modul-3/l%C3%B6sn3/#uppgift-2","title":"Uppgift 2","text":"<pre><code>// Input\nConsole.WriteLine(\"Ange ett ord eller en mening:\");\nstring input = Console.ReadLine();\n\n// Skriv ut varje tecken\nforeach (char c in input)\n{\n    Console.WriteLine(c);\n}\n\n// Skriv ut bakl\u00e4nges\nConsole.WriteLine(\"Bakl\u00e4nges:\");\nfor (int i = input.Length - 1; i &gt;= 0; i--)\n{\n    Console.Write(input[i]);\n}\n</code></pre>"},{"location":"content/modul-3/l%C3%B6sn3/#uppgift-3","title":"Uppgift 3","text":"<pre><code>// Input\nConsole.WriteLine(\"Ange ett heltal:\");\nint number = int.Parse(Console.ReadLine());\n\n// Skriv ut g\u00e5ngertabellen\nfor (int i = 1; i &lt;= 10; i++)\n{\n    Console.WriteLine($\"{i} x {number} = {i * number}\");\n}\n</code></pre>"},{"location":"content/modul-3/l%C3%B6sn3/#uppgift-4","title":"Uppgift 4","text":"<pre><code>// Input\nConsole.WriteLine(\"Ange ett startv\u00e4rde:\");\nint start = int.Parse(Console.ReadLine());\n\nConsole.WriteLine(\"Ange ett stoppv\u00e4rde:\");\nint stop = int.Parse(Console.ReadLine());\n\n// Ev. byt plats p\u00e5 start och stopp\nif (start &gt; stop)\n{\n    int temp = start;\n    start = stop;\n    stop = temp;\n}\n\n// R\u00e4kna upp\u00e5t och skriv ut talen, l\u00e4gg till p\u00e5 summan varje g\u00e5ng\nint sum = 0;\nfor (int i = start; i &lt;= stop; i++)\n{\n    Console.WriteLine(i);\n    sum += i;\n}\n\nConsole.WriteLine($\"Summan av talen mellan {start} och {stop} \u00e4r {sum}\");\n</code></pre>"},{"location":"content/modul-3/l%C3%B6sn3/#uppgift-5","title":"Uppgift 5","text":"<pre><code>// Slump\nRandom rand = new Random();\n\n// Hur m\u00e5nga kast?\nConsole.WriteLine(\"Hur m\u00e5nga g\u00e5nger vill du kasta t\u00e4rningarna?\");\nint numRolls = int.Parse(Console.ReadLine());\n\n// Sl\u00e5 t\u00e4rningarna och skriv ut resultatet, l\u00e4gg till resultat p\u00e5 summan\nint sum = 0;\nfor (int i = 0; i &lt; numRolls; i++)\n{\n    int result = rand.Next(1, 7);\n    Console.Write(result + \" \");\n    sum += result;\n}\n\n// Skriv ut info i slutet\nConsole.WriteLine();\nConsole.WriteLine($\"Po\u00e4ngsumman f\u00f6r dina kast \u00e4r: {sum}\");\nConsole.WriteLine($\"Medelpo\u00e4ngen f\u00f6r dina kast \u00e4r: {(float)sum/numRolls:f2}\");\n</code></pre>"},{"location":"content/modul-3/l%C3%B6sn3/#uppgift-6","title":"Uppgift 6","text":"<pre><code>// Input\nConsole.WriteLine(\"Ange ett positivt heltal st\u00f6rre \u00e4n 10:\");\nint number = int.Parse(Console.ReadLine());\n\n// Skriv ut udda tal, r\u00e4cker att b\u00f6rja p\u00e5 1 och \u00f6ka med 2 varje g\u00e5ng\nConsole.WriteLine(\"Udda tal:\");\nfor (int i = 1; i &lt;= number; i += 2)\n{\n    Console.Write(i + \" \");\n}\n\nConsole.WriteLine();\n\n// Skriv ut j\u00e4mna tal\nConsole.WriteLine(\"J\u00e4mna tal:\");\nfor (int i = 0; i &lt;= number; i += 2)\n{\n    Console.Write(i + \" \");\n}\n</code></pre>"},{"location":"content/modul-3/l%C3%B6sn3/#uppgift-7","title":"Uppgift 7","text":"<pre><code>bool exit = false;\nwhile (exit == false)\n{\n    // Rensa s\u00e5 att det ser fint ut\n    Console.Clear();\n\n    // Huvudmenyn\n    Console.WriteLine(\"V\u00e4lj en operation:\");\n    Console.WriteLine(\"1. Addition\");\n    Console.WriteLine(\"2. Subtraktion\");\n    Console.WriteLine(\"3. Multiplikation\");\n    Console.WriteLine(\"4. Division\");\n    Console.WriteLine(\"5. Avsluta\");\n\n    // Input\n    int choice = int.Parse(Console.ReadLine());\n\n    // Ta bara in tal om anv\u00e4ndaren inte avslutar\n    double num1 = 0;\n    double num2 = 0;\n    if (choice != 5)\n    {\n        Console.WriteLine(\"Ange f\u00f6rsta talet:\");\n        num1 = double.Parse(Console.ReadLine());\n        Console.WriteLine(\"Ange andra talet:\");\n        num2 = double.Parse(Console.ReadLine());\n    }\n\n    // Menyvalet\n    switch (choice)\n    {\n        case 1:\n            Console.WriteLine($\"Resultat: {num1} + {num2} = {num1 + num2}\");\n            break;\n\n        case 2:\n            Console.WriteLine($\"Resultat: {num1} - {num2} = {num1 - num2}\");\n            break;\n\n        case 3:\n            Console.WriteLine($\"Resultat: {num1} * {num2} = {num1 * num2}\");\n            break;\n\n        case 4:\n            if (num2 != 0)\n            {\n                Console.WriteLine($\"Resultat: {num1} / {num2} = {num1 / num2}\");\n            }\n            else\n            {\n                Console.WriteLine(\"Division med noll \u00e4r inte till\u00e5tet.\");\n            }\n            break;\n\n        case 5:\n            Console.WriteLine(\"Tack och hej!\");\n            exit = true;\n            break;\n\n        default:\n            Console.WriteLine(\"Ogiltigt val, f\u00f6rs\u00f6k igen.\");\n            break;\n    }\n\n    Console.WriteLine(\"Tryck p\u00e5 valfri tangent f\u00f6r att forts\u00e4tta...\");\n    Console.ReadKey();\n}\n</code></pre>"},{"location":"content/modul-3/l%C3%B6sn3/#uppgift-8","title":"Uppgift 8","text":"<pre><code>// Input\nConsole.WriteLine(\"Ange ditt namn:\");\nstring userText = Console.ReadLine();\n\n// Ange l\u00e4ngd\nConsole.WriteLine($\"Str\u00e4ngens l\u00e4ngd \u00e4r: {userText.Length} tecken\");\n\n// Kontrollera villkor\nif (userText.Contains('a'))\n{\n    Console.WriteLine(\"Str\u00e4ngen inneh\u00e5ller bokstaven 'a'\");\n}\nelse\n{\n    Console.WriteLine(\"Str\u00e4ngen inneh\u00e5ller inte bokstaven 'a'\");\n}\n\nif (userText.StartsWith('b'))\n{\n    Console.WriteLine(\"Str\u00e4ngen inleds med bokstaven 'b'\");\n}\nelse\n{\n    Console.WriteLine(\"Str\u00e4ngen inleds inte med bokstaven 'b'\");\n}\n\n// Byta ut \nstring newText = userText.Replace('a', '\u00e4');\nConsole.WriteLine($\"Namnet efter att ha bytt ut 'a' mot '\u00e4': {replacedName}\");\n\n// VERSALER\nConsole.WriteLine($\"Namnet med versaler: {userText.ToUpper()}\");\n</code></pre>"},{"location":"content/modul-3/l%C3%B6sn3/#uppgift-9","title":"Uppgift 9","text":"<pre><code>// Loopen g\u00e5r bara om bool:en \u00e4r false\nbool correctSentence = false;\nwhile (!correctSentence)\n{\n    // Input\n    Console.WriteLine(\"Skriv en mening:\");\n    string sentence = Console.ReadLine();\n\n    // Kontrollera om meningen b\u00f6rjar med stor bokstav och slutar med punkt\n    if (char.IsUpper(sentence[0]) &amp;&amp; sentence.EndsWith('.'))\n    {\n        Console.WriteLine(\"Bra jobbat! Du skrev en korrekt mening.\");\n        correctSentence = true;\n    }\n    else\n    {\n        Console.WriteLine(\"Fel! Meningen m\u00e5ste b\u00f6rja med stor bokstav och sluta med en punkt. F\u00f6rs\u00f6k igen.\");\n    }\n}\n</code></pre>"},{"location":"content/modul-3/l%C3%B6sn3/#uppgift-10","title":"Uppgift 10","text":"<pre><code>// Namn p\u00e5 filen f\u00f6r highscore\nstring filePath = \"highscore.txt\";\n\n// Kontrollera om en tidigare highscore finns\nif (File.Exists(filePath))\n{\n    string previousHighscore = File.ReadAllText(filePath);\n    Console.WriteLine($\"F\u00f6reg\u00e5ende spelare: {previousHighscore}\");\n}\nelse\n{\n    Console.WriteLine(\"Ingen f\u00f6reg\u00e5ende spelare kunde hittas.\");\n}\n\n// Input\nConsole.WriteLine(\"Vad heter du?\");\nstring playerName = Console.ReadLine();\n\n// H\u00e5ll koll p\u00e5 po\u00e4ngen med variabel\nint score = 0;\n\n// St\u00e4ll tre fr\u00e5gor, \u00f6ka po\u00e4ngen om man svarar r\u00e4tt\nConsole.WriteLine(\"Fr\u00e5ga 1: Vad \u00e4r 2 + 2?\");\nif (Console.ReadLine() == \"4\") \n{ \n    score++; \n}\nConsole.WriteLine(\"Fr\u00e5ga 2: Vad \u00e4r huvudstaden i Sverige?\");\nif (Console.ReadLine().ToLower() == \"stockholm\")\n{\n    score++;\n}\nConsole.WriteLine(\"Fr\u00e5ga 3: Vilken f\u00e4rg har bananer?\");\nif (Console.ReadLine().ToLower() == \"gul\")\n{\n    score++;\n}\n\n// Skriv spelarens namn och po\u00e4ng till filen\nFile.WriteAllText(filePath, $\"{playerName}, {score}/3 po\u00e4ng\");\n\nConsole.WriteLine($\"Tack f\u00f6r att du spelade! Du fick {score}/3 po\u00e4ng.\");\n</code></pre>"},{"location":"content/modul-3/l%C3%B6sn3/#uppgift-11","title":"Uppgift 11","text":"<pre><code>// Input och f\u00f6rklaring\nConsole.WriteLine(\"Ange ett uttryck (ex: 2+3, 5-1, 4*2, 8/4):\");\nstring expression = Console.ReadLine();\n\n// Variabler f\u00f6r operator och dess index (position i str\u00e4ngen)\nchar operation = ' ';\nint operatorIndex = -1;\n\n// Kolla vilket r\u00e4knes\u00e4tt det \u00e4r och ta reda p\u00e5 dess index\nif (expression.Contains('+'))\n{\n    operation = '+';\n    operatorIndex = expression.IndexOf('+');\n}\nelse if (expression.Contains('-'))\n{\n    operation = '-';\n    operatorIndex = expression.IndexOf('-');\n}\nelse if (expression.Contains('*'))\n{\n    operation = '*';\n    operatorIndex = expression.IndexOf('*');\n}\nelse if (expression.Contains('/'))\n{\n    operation = '/';\n    operatorIndex = expression.IndexOf('/');\n}\n\n// Plocka ut talen fr\u00e5n uttrycket, trim \u00e4r smidigt n\u00e4r anv\u00e4ndare skriver mellanslag\nstring firstNumberStr = expression.Substring(0, operatorIndex).Trim();\nstring secondNumberStr = expression.Substring(operatorIndex + 1).Trim();\n\n// Omvandla till heltal\nint firstNumber = int.Parse(firstNumberStr);\nint secondNumber = int.Parse(secondNumberStr);\n\n// Utf\u00f6r ber\u00e4kningen, spara i variabel\nint result = 0;\nswitch (operation)\n{\n    case '+':\n        result = firstNumber + secondNumber;\n        Console.WriteLine($\"{firstNumber} + {secondNumber} = {result}\");\n        break;\n    case '-':\n        result = firstNumber - secondNumber;\n        Console.WriteLine($\"{firstNumber} - {secondNumber} = {result}\");\n        break;\n    case '*':\n        result = firstNumber * secondNumber;\n        Console.WriteLine($\"{firstNumber} * {secondNumber} = {result}\");\n        break;\n    case '/':\n        if (secondNumber != 0)\n        {\n            result = firstNumber / secondNumber;\n            Console.WriteLine($\"{firstNumber} / {secondNumber} = {result}\");\n        }\n        else\n        {\n            Console.WriteLine(\"Division med noll \u00e4r inte till\u00e5tet.\");\n        }\n        break;\n    default:\n        Console.WriteLine(\"Ogiltigt uttryck.\");\n        break;\n}\n</code></pre>"},{"location":"content/modul-3/l%C3%B6sn3/#uppgift-12","title":"Uppgift 12","text":"<pre><code>// Input\nConsole.WriteLine(\"Ange ett tecken:\");\nstring symbol = Console.ReadLine();\n\nConsole.WriteLine(\"Ange bredd:\");\nint width = int.Parse(Console.ReadLine());\n\nConsole.WriteLine(\"Ange h\u00f6jd:\");\nint height = int.Parse(Console.ReadLine());\n\n// Varje rad\nfor (int i = 0; i &lt; height; i++)\n{\n    // Skriv ut flera tecken p\u00e5 varje rad\n    for (int j = 0; j &lt; width; j++)\n    {\n        // Skriv bara ut symbolen OM\n        // vi \u00e4r p\u00e5 f\u00f6rsta raden eller kolumnen, i eller j \u00e4r 0\n        // vi \u00e4r p\u00e5 sista raden eller kolumnen, dvs height - 1\n        if (i == 0 || i == height - 1 || j == 0 || j == width - 1)\n        {\n            Console.Write(symbol + \" \");\n        }\n        else\n        {\n            Console.Write(\"  \");\n        }\n    }\n    Console.WriteLine();\n}\n</code></pre>"},{"location":"content/modul-3/l%C3%B6sn3/#uppgift-13","title":"Uppgift 13","text":"<pre><code>// Input\nConsole.WriteLine(\"Ange h\u00f6jden f\u00f6r triangeln:\");\nint height = int.Parse(Console.ReadLine());\nConsole.WriteLine(\"Ange tecknet f\u00f6r triangeln:\");\nchar symbol = Console.ReadLine()[0];\n\n// F\u00f6rsta triangeln\nConsole.WriteLine();\nfor (int row = 1; row &lt;= height; row++)\n{\n    for (int j = 1; j &lt;= row; j++)\n    {\n        Console.Write(symbol + \" \");\n    }\n    Console.WriteLine();\n}\n\n// Triangel \u00e5t h\u00f6ger\nConsole.WriteLine();\nfor (int i = 1; i &lt;= height; i++)\n{\n    // Skriva ut mellanslagen, ska minska med rad\n    for (int j = height; j &gt; i; j--)\n    {\n        Console.Write(\"  \");\n    }\n\n    // Skriva ut symbolen, ska \u00f6ka med rad\n    for (int j = 0; j &lt; i; j++)\n    {\n        Console.Write(symbol + \" \");\n    }\n\n    //Ny rad\n    Console.WriteLine();\n}\n\n// Triangel 3, pyramid, samma h\u00f6jd som de andra\nConsole.WriteLine();\nfor (int i = 1; i &lt;= height; i++)\n{\n    // Skriva ut mellanslagen p\u00e5 v\u00e4nster, ska minska med rad\n    for (int j = height; j &gt; i; j--)\n    {\n        Console.Write(\"  \");\n    }\n\n    // Skriva ut symbolen, ska \u00f6ka med rad\n    // Anv\u00e4nder villkoret n\u00e4r: j &lt; 2i - 1 \n    // Ex.\n    // n\u00e4r i = 1 -&gt; s\u00e5 g\u00e5r loopen en g\u00e5ng\n    // n\u00e4r i = 2 -&gt; d\u00e5 blir villkoret 3, s\u00e5 det blir * * *\n    for (int j = 0; j &lt; 2*i - 1; j++)\n    {\n        Console.Write(symbol + \" \");\n    }\n\n    // Skriv ut mellanslagen p\u00e5 h\u00f6ger, minska med rad\n    for (int j = height; j &gt; i; j--)\n    {\n        Console.Write(\"  \");\n    }\n\n    // Ny rad\n    Console.WriteLine();\n}\n</code></pre>"},{"location":"content/modul-3/uppg3/","title":"\u00d6vningar - Modul 3","text":""},{"location":"content/modul-3/uppg3/#uppgift-1","title":"Uppgift 1","text":"<p>Skriv ett program som skriver ut talen 0 till och med 30 med hj\u00e4lp av en loop. </p> <p>Ut\u00f6ka programmet s\u00e5 att det inv\u00e4ntar knapptryck fr\u00e5n anv\u00e4ndaren och sen r\u00e4knar ned\u00e5t igen fr\u00e5n 30, till -30, ocks\u00e5 med hj\u00e4lp av en loop. Notera att programmet \u00e4ven nu ska skriva ut talen. </p>"},{"location":"content/modul-3/uppg3/#uppgift-2","title":"Uppgift 2","text":"<p>Skriv ett program som tar in ett ord eller en mening fr\u00e5n anv\u00e4ndaren. Programmet ska sedan skriva ut ordet eller meningen vertikalt, allts\u00e5 en bokstav p\u00e5 varje rad!</p> <p>Ut\u00f6ka programmet s\u00e5 att det ocks\u00e5 skriver ut ordet bakl\u00e4nges, t.ex. \"Hej\" -&gt; \"jeH\".</p>"},{"location":"content/modul-3/uppg3/#uppgift-3","title":"Uppgift 3","text":"<p>Skriv ett program som l\u00e5ter anv\u00e4ndaren ange ett heltal, programmet ska sedan tjusigt skriva ut g\u00e5ngertabell f\u00f6r det angivna talet. T.ex. om anv\u00e4ndaren anger 4: 1 x 4 = 4 2 x 4 = 8 osv...</p>"},{"location":"content/modul-3/uppg3/#uppgift-4","title":"Uppgift 4","text":"<p>Skriv ett program som l\u00e5ter anv\u00e4ndaren ange tv\u00e5 heltal, ett startv\u00e4rde och ett stoppv\u00e4rde. Programmet ska sedan r\u00e4kna upp\u00e5t, och skriva ut, fr\u00e5n start till stopp.</p> <p>Programmet ska klara av att man skriver ett l\u00e4gre stopp \u00e4n startv\u00e4rde, genom att helt enkelt byta plats p\u00e5 dem. Exempelvis om man anger 20 och 5, s\u00e5 ska programmet v\u00e4nda p\u00e5 dem och r\u00e4kna fr\u00e5n 5 till 20.</p> <p>Ut\u00f6ka programmet s\u00e5 att det \u00e4ven ber\u00e4knar summan av de uppr\u00e4knade talen, och ska presenteras i slutet av k\u00f6rningen.</p>"},{"location":"content/modul-3/uppg3/#uppgift-5","title":"Uppgift 5","text":"<p>Skriv ett menyprogram som l\u00e5ter anv\u00e4ndaren sl\u00e5 en t\u00e4rning 3 g\u00e5nger, skriv ut resultatet av varje kast</p> <p>Ut\u00f6ka programmet genom att l\u00e5ta anv\u00e4ndaren v\u00e4lja hur m\u00e5nga g\u00e5nger den vill kasta t\u00e4rningen, skriv ut resultatet f\u00f6r varje kast p\u00e5 en rad.</p> <p>Programmet ska \u00e4ven skriva ut den totala po\u00e4ngsumman och medelpo\u00e4ngen av kasten.</p>"},{"location":"content/modul-3/uppg3/#uppgift-6","title":"Uppgift 6","text":"<p>Skriv ett program som l\u00e5ter anv\u00e4ndaren ange ett positivt heltal \u00f6ver 10. </p> <p>Programmet ska sedan skriva ut alla udda tal i intervallet, t.ex:  Udda tal: 1, 3, 5, 7 ,9</p> <p>Sedan ska programmet \u00e4ven skriva ut alla j\u00e4mna tal i intervallet: J\u00e4mna tal: 2, 4, 6, 8</p>"},{"location":"content/modul-3/uppg3/#uppgift-7","title":"Uppgift 7","text":"<p>Minir\u00e4knare, igen. Utveckla n\u00e5got av dina tidigare minir\u00e4knarprogram s\u00e5 att det nu har en huvudmeny som man kommer tillbaka till efter en utf\u00f6rd operation. </p> <p>Om du inte har n\u00e5got tidigare minir\u00e4knarprogram kan du helt enkelt skriva ett minir\u00e4knarprogram med huvudmeny.</p>"},{"location":"content/modul-3/uppg3/#uppgift-8","title":"Uppgift 8","text":"<p>Skriv ett program som tar in en str\u00e4ng, exempelvis anv\u00e4ndarens namn, programmet ska sedan:</p> <ul> <li>Ange str\u00e4ngens l\u00e4ngd, allts\u00e5 hur m\u00e5nga tecken som ing\u00e5r.</li> <li>Kontrollera om bokstaven \u201da\u201d finns i str\u00e4ngen.</li> <li>Kontrollera om str\u00e4ngen inleds med bokstaven \u201db\u201d.</li> <li>Byta ut alla \u201da\u201d (eller fler vokaler om du vill), mot n\u00e5gon annan l\u00e4mplig vokal, ex. \u201dHej\u201d -&gt; \u201dH\u00e4j\u201d.</li> <li>Byta alla bokst\u00e4ver till VERSALER.</li> </ul>"},{"location":"content/modul-3/uppg3/#uppgift-9","title":"Uppgift 9","text":"<p>Svenskl\u00e4raren. Skriv ett program som l\u00e5ter anv\u00e4ndaren skriva in en mening. Programmet ska ge anv\u00e4ndaren ber\u00f6m om denne kommit ih\u00e5g punkt och stor bokstav. (I slutet respektive b\u00f6rjan av meningen)</p> <p>Om anv\u00e4ndaren misslyckats med att skriva en korrekt mening ska denne beh\u00f6va g\u00f6ra om.</p> <p>Tips. Precis som att det finns ToUpper() f\u00f6r string s\u00e5 finns det f\u00f6r char.</p>"},{"location":"content/modul-3/uppg3/#uppgift-10","title":"Uppgift 10","text":"<p>Fr\u00e5gesport med highscore. Skriv ett program som fr\u00e5gar anv\u00e4ndaren vad den heter, och sen har fr\u00e5gesport med anv\u00e4ndaren, t.ex. 3 fr\u00e5gor. Programmet ska h\u00e5lla koll p\u00e5 hur m\u00e5nga r\u00e4tt anv\u00e4ndaren f\u00e5r. </p> <p>Programmet ska sedan spara anv\u00e4ndarens namn och po\u00e4ng i en textfil. N\u00e4r programmet startar n\u00e4sta g\u00e5ng ska namnet och po\u00e4ngen visas, t.ex. \"F\u00f6reg\u00e5ende spelare: Emil, 3/3 po\u00e4ng\".</p> <p>Du kan sj\u00e4lv v\u00e4lja om du vill att programmet ska skriva \u00f6ver f\u00f6reg\u00e5ende spelare, eller om du vill spara flera f\u00f6reg\u00e5ende spelare.</p>"},{"location":"content/modul-3/uppg3/#uppgift-11","title":"Uppgift 11","text":"<p>Minir\u00e4knare igen. Skriv ett minir\u00e4knarprogram, eller ut\u00f6ka ett befintligt minir\u00e4knarprogram. </p> <p>Den h\u00e4r g\u00e5ngen ska minir\u00e4knaren acceptera inmatning p\u00e5 en rad. Det ska g\u00e5 att skriva t.ex. \"2+3\". Programmet ska ta in informationen, tolka den, och skriva ut n\u00e5got i stil med \"2 + 3 = 6\"</p> <p>B\u00f6rja med att f\u00f6rs\u00f6ka f\u00e5 r\u00e4knes\u00e4ttet addition att fungera, g\u00e5r sen att ut\u00f6ka till \u00f6vriga r\u00e4knes\u00e4tt.</p>"},{"location":"content/modul-3/uppg3/#uppgift-12","title":"Uppgift 12","text":"<p>Geometrisk figur. Skriv ett program som skriver ut en kvadrat med sidan 5 av stj\u00e4rnor ( * ). Tv\u00e5 n\u00e4stlade for-loopar kan vara en bra utg\u00e5ngspunkt.</p> <pre><code>* * * * *\n* * * * *\n* * * * *\n* * * * *\n* * * * *\n</code></pre> <ul> <li>Utveckla programmet s\u00e5 att anv\u00e4ndaren kan v\u00e4lja tecken sj\u00e4lv. </li> <li>Utveckla programmet s\u00e5 att anv\u00e4ndaren kan v\u00e4lja bredd och h\u00f6jd p\u00e5 formen som skrivs ut, s\u00e5 det kan bli olika bredd och h\u00f6jd.  </li> <li>Utveckla programmet genom att l\u00e5ta rektangeln som skrivs ut vara \u201dih\u00e5lig\u201d, s\u00e5 programmet ska bara skriva ut en \u201dtavelram\u201d, med den angivna h\u00f6jden och bredden.  </li> <li>Ut\u00f6ka programmet genom att g\u00f6ra en huvudmeny, med alternativen t.ex. \u201drita ut\u201d, \u201dalternativ\u201d och \u201davsluta\u201d, under alternativ kan du l\u00e4gga inst\u00e4llningarna f\u00f6r tecken, bredd och h\u00f6jd fr\u00e5n tidigare del-uppgifter.</li> </ul>"},{"location":"content/modul-3/uppg3/#uppgift-13","title":"Uppgift 13","text":"<p>Mer geometriska figurer. Denna uppgift kan med f\u00f6rdel g\u00f6ras som en utveckling av den f\u00f6rra uppgiften.</p> <p>Utveckla ditt geometriprogram s\u00e5 att det kan rita ut lite olika typer av trianglar. Anv\u00e4ndaren ska kunna ange h\u00f6jd och tecken f\u00f6r trianglarna. </p> <pre><code>*  \n* * \n* * * \n* * * * \n</code></pre> <pre><code>      a  \n    a a \n  a a a \na a a a \n</code></pre> <pre><code>      * \n    * * * \n  * * * * *\n* * * * * * *\n</code></pre> <p>Tips: \u00c4ndra villkoret i den inre for-loopen s\u00e5 att antalet symboler som skrivs ut f\u00f6r respektive rad \u00e4ndras. Man kan ocks\u00e5 ha flera inre for-loopar i den yttre loopen.</p>"},{"location":"content/modul-4/1-metoder/","title":"Metoder","text":"<p>En metod \u00e4r ett block med kod som kan \u00e5teranv\u00e4ndas, n\u00e4r en metod anv\u00e4nds kallas det f\u00f6r metodanrop, metoden anropas.</p> <p>Det finns f\u00f6rdefinierade metoder i C#, exempelvis Main(), WriteLine(), Parse() och ReadLine(). </p> <p>Ut\u00f6ver f\u00f6rdefinierade metoder finns det m\u00f6jlighet att skapa egendefinierade metoder i k\u00e4llkoden. Detta har flera f\u00f6rdelar, exempelvis \u00f6kad struktur, l\u00e4sbarhet och \u00e5teranv\u00e4ndning av kod. Det \u00e4r ocks\u00e5 l\u00e4ttare att fels\u00f6ka och g\u00f6ra f\u00f6rb\u00e4ttringar i ett program som \u00e4r uppbyggt av metoder som kan \u00e4ndras var f\u00f6r sig, j\u00e4mf\u00f6rt med ett program som utg\u00f6rs av en stor v\u00e4gg med spaghetti.</p> <p>Tips</p> <p>DRY (Don't Repeat Yourself) \u00e4r en princip inom programmering och g\u00e5r ut p\u00e5 just vad det l\u00e5ter som, skriv din k\u00e4llkod en g\u00e5ng, \u00e5teranv\u00e4nd med metoder. </p> <p>Notera att detta \u00e4r ett str\u00e4vansm\u00e5l i denna kursen, inte ett totalit\u00e4rt krav.</p> <p>Den grundl\u00e4ggande strukturen f\u00f6r en metod i C# ser ut som nedan. Notera att f\u00f6r metoder anv\u00e4nds PascalCase ist\u00e4llet f\u00f6r camelCase som namngivningsstandard.  <pre><code>static void MinMetod()\n{\n    // H\u00e4r skrivs all kod som utf\u00f6rs i metoden\n}\n</code></pre> Metoddeklarationen best\u00e5r av tre delar delar, som kan ses ovan - static - modifierare som avg\u00f6r hur metoden kan anropas, anv\u00e4nds f\u00f6r att kunna anv\u00e4nda metoden direkt. - void - metodens returtyp, void betyder att metoden inte returnerar n\u00e5got. - MinMetod() - metodens namn, namnge metoden beskrivande, och anv\u00e4nd PascalCase.</p> <p>Det \u00e4r ocks\u00e5 v\u00e4rt att notera att av organisatoriska sk\u00e4l placeras metoder utanf\u00f6r Main()-metoden, ovanf\u00f6r eller under, spelar ingen roll. <pre><code>namespace test\n{\n    internal class Program\n    {\n        static void Main(string[] args)\n        {\n            // H\u00e4r \u00e4r den vanliga Main()\n            // Programmet startar h\u00e4r!\n        }\n\n        static void MinMetod()\n        {\n            // H\u00e4r skrivs all kod som utf\u00f6rs i metoden\n        }\n    }\n}\n</code></pre></p>"},{"location":"content/modul-4/1-metoder/#metodanrop","title":"Metodanrop","text":"<p>Metoder anropas genom att skriva deras namn, exempelvis i Main()-metoden. Notera att koden fortfarande exekveras uppifr\u00e5n och ned, men n\u00e4r raden med metoden n\u00e5s s\u00e5 k\u00f6rs hela metoden innan programmet forts\u00e4tter ned\u00e5t. <pre><code>static void Main(string[] args)\n{\n    Console.WriteLine(\"Nu ska min egen metod k\u00f6ras!\");\n    MinMetod();\n    Console.WriteLine(\"Nu HAR min metod k\u00f6rts.\");\n}\n\nstatic void MinMetod()\n{\n    Console.WriteLine(\"Hej nu k\u00f6rs min metod!\");\n}\n</code></pre> Ovanst\u00e5ende exempel ger f\u00f6ljande utskrift.  <pre><code>Nu ska min egen metod k\u00f6ras!\nHej nu k\u00f6rs min metod!\nNu HAR min metod k\u00f6rts.\n</code></pre></p>"},{"location":"content/modul-4/1-metoder/#parametrar","title":"Parametrar","text":"<p>Metoder kan designas f\u00f6r att ta emot information och g\u00f6ra n\u00e5got relevant med informationen. Vilken information metoden ska ta emot best\u00e4ms i metoddeklarationen och kallas parametrar.  <pre><code>// Metoden GladH\u00e4lsning har parametern namn, av typen string\nstatic void GladH\u00e4lsning(string namn)\n{\n    Console.WriteLine($\"Trevligt att tr\u00e4ffas {namn}!\");\n}\n</code></pre></p> <p>En metod kan ha flera parametrar, s\u00e5 l\u00e4nge de inte \u00e4r exakt likadana.  <pre><code>static void AdderaTv\u00e5Tal(int a, int b)\n{\n    int summa = a + b;\n    Console.WriteLine($\"Summan \u00e4r {summa}.\");\n}\n</code></pre></p> <p>N\u00e4r en metod med en eller flera parametrar beh\u00f6ver n\u00e5gon l\u00e4mplig information anges, annars kan inte metoden anropas. Informationen som skickas in kallas argument. Argumenten kan antingen vara variabler eller riktiga v\u00e4rden. <pre><code>static void Main(string[] args)\n{\n    int tal = 10;\n    AdderaTv\u00e5Tal(tal, 20);\n}\n// K\u00f6rning av programmet ger utskriften: Summan \u00e4r 30.\n</code></pre></p>"},{"location":"content/modul-4/1-metoder/#returvarde","title":"Returv\u00e4rde","text":"<p>Metoder kan returnera ett v\u00e4rde. Vad en metod ska returnera anges i metoddeklarationen, genom att skriva en datatyp ist\u00e4llet f\u00f6r \"void\". Returv\u00e4rdet kan sedan antingen sparas till en variabel, eller anv\u00e4ndas direkt via metodanropet.</p> <p>Nedanst\u00e5ende exempel vidareutvecklar metoden AdderaTv\u00e5Tal(), till att returnera svaret ist\u00e4llet f\u00f6r att skriva ut det. <pre><code>static int AdderaTv\u00e5Tal(int a, int b)\n{\n    int summa = a + b;\n    return summa;\n}\n</code></pre> Detta inneb\u00e4r en f\u00f6r\u00e4ndring n\u00e4r metoden anropas. <pre><code>static void Main(string[] args)\n{\n    // Metodens returv\u00e4rde kan sparas i en variabel.\n    int summa = AdderaTv\u00e5Tal(10, 20);\n    // Metoden kan ocks\u00e5 anv\u00e4ndas direkt f\u00f6r sitt returv\u00e4rde.\n    Console.WriteLine(AdderaTv\u00e5Tal(5, 10)); // Utskrift: 15\n}\n</code></pre></p>"},{"location":"content/modul-4/1-metoder/#metodoverlagring","title":"Metod\u00f6verlagring","text":"<p>Vissa metoder kan anropas p\u00e5 olika s\u00e4tt. Exempelvis kan metoden Beep() fr\u00e5n klassen Console anropas antingen helt utan argument, eller genom att ange b\u00e5de frekvens och varaktighet. <pre><code>// Beep() anropas utan argument, g\u00e5r bra.\nConsole.Beep();\n// Beep() anropas med argumenten 700 och 2000, \n// f\u00f6r parametrarna frekvens och varaktighet. G\u00e5r ocks\u00e5 bra.\nConsole.Beep(700, 2000);\n</code></pre></p> <p>Hemligheten med att g\u00f6ra EN metod som kan anropas p\u00e5 olika s\u00e4tt \u00e4r att det helt enkelt inte g\u00e5r.</p> <p>Ist\u00e4llet g\u00f6r man flera metoder med samma namn, men olika parametrar. Detta kallas metod\u00f6verlagring, metoden \u00f6verlagras med olika versioner. I Visual Studio kan man ibland se exempelvis \"+2 overloads\" eller liknande, det h\u00e4nvisar till \u00f6verlagringar.</p> <p>Exempelvis skulle en metod f\u00f6r att addera tv\u00e5 tal kunna \u00f6verlagras med en metod som adderar tre tal, och d\u00e4rmed ge intrycket av att metoden ifr\u00e5ga klarar av b\u00e5de tv\u00e5 och tre tal. <pre><code>static int AdderaTal(int a, int b)\n{\n    return a + b;\n}\n\nstatic int AdderaTal(int a, int b, int c) \n{ \n    return a + b + c;\n}\n</code></pre></p> <p>Metoden AdderaTal() kan nu anropas antingen med tv\u00e5 eller tre argument. <pre><code>static void Main(string[] args)\n{\n    int summa1 = AdderaTal(5,6);\n    int summa2 = AdderaTal(5,6,7);\n\n    Console.WriteLine(summa1); // Utskrift: 11\n    Console.WriteLine(summa2); // Utskrift: 18\n}\n</code></pre></p>"},{"location":"content/modul-4/1-metoder/#rekursiva-metoder","title":"Rekursiva metoder","text":"<p>Rekursiva metoder \u00e4r ett tjusigt s\u00e4tt att beskriva metoder som anropar sig sj\u00e4lva. S\u00e5dana metoder m\u00e5ste ha ett basfall, s\u00e5 att de inte anropar sig sj\u00e4lva i all evighet, p\u00e5 samma s\u00e4tt som man inte vill fastna i o\u00e4ndliga loopar. <pre><code>static void Countdown(int number)\n{\n    // Skriv alltid ut vilket nummer vi \u00e4r p\u00e5\n    Console.WriteLine(number);\n\n    // Basfall n\u00e4r number \u00e4r lika med noll\n    if (number == 0)\n    {\n        Console.WriteLine(\"Klar!\");\n    }\n    else\n    {\n        // Anropa SIG SJ\u00c4LV, men med ett v\u00e4rde som \u00e4r 1 mindre\n        Countdown(number - 1);\n    }\n}\n</code></pre> N\u00e4r metoden \"Countdown()\" fr\u00e5n exemplet ovanf\u00f6r anropas f\u00e5s f\u00f6ljande utskrift. <pre><code>4\n3\n2\n1\n0\nKlar!\n</code></pre></p> <p>Tips</p> <p>Rekursiva metoder tas upp i den h\u00e4r kursen fr\u00e4mst i orienteringssyfte, man f\u00f6rv\u00e4ntas f\u00f6rst\u00e5 konceptet, men inte n\u00f6dv\u00e4ndigtvis anv\u00e4nda dem p\u00e5 en h\u00f6gre niv\u00e5 \u00e4n det givna exemplet ovan.</p>"},{"location":"content/modul-4/2-arrayer/","title":"Arrayer","text":"<p>En array \u00e4r en datastruktur som kan lagra flera v\u00e4rden av samma datatyp och \u00e4r ett effektivt s\u00e4tt att hantera m\u00e5nga relaterade v\u00e4rden samtidigt. </p> <p>Varje v\u00e4rde i en array kallas f\u00f6r ett element och \u00e4r indexerat med en position, d\u00e4r det f\u00f6rsta elementet har index 0. Indexeringen fungerar p\u00e5 samma s\u00e4tt som f\u00f6r tecken i str\u00e4ngar och andra samlingar.</p> <p>Arrayer \u00e4r snabba och effektiva, men de har ett fast antal platser som best\u00e4ms vid skapandet och kan d\u00e4rmed inte v\u00e4xa eller krympa efter behov.</p> <p>Arrayer kan g\u00f6ras i flera dimensioner, d\u00e4r en endimensionell array (1D) \u00e4r att likna vid en vanlig lista med saker, men med ett best\u00e4mt antal platser. En tv\u00e5dimensionell array (2D) \u00e4r mer att likna vid ett koordinatsystem, d\u00e4r b\u00e5de rad och kolumn spelar roll. Inledningsvis behandlas enbart endimensionella arrayer.</p> <p>(ATT G\u00d6RA: tips om namnet array? heta annat p\u00e5 svenska?)</p>"},{"location":"content/modul-4/2-arrayer/#deklaration","title":"Deklaration","text":"<p>N\u00e4r en array deklareras beh\u00f6vs b\u00e5de datatyp och variabelnamn. Hakparentes anv\u00e4nds f\u00f6r att specificera att det \u00e4r en array och inte en vanlig variabel.</p> <p>F\u00f6r att kunna anv\u00e4nda arrayen m\u00e5ste den initieras, det m\u00e5ste reserveras plats i minnet f\u00f6r ett givet antal v\u00e4rden av en viss datatyp, detta uppn\u00e5s via nyckelordet new. (Som tidigare anv\u00e4nts i samband med slumpade tal!)</p> <p>Precis som med vanliga variabler kan arrayer deklareras och initieras p\u00e5 lite olika s\u00e4tt.</p>"},{"location":"content/modul-4/2-arrayer/#deklarera-utan-storlek","title":"Deklarera utan storlek","text":"<pre><code>int[] tal; // En array som kan lagra v\u00e4rden av datatypen int.\n</code></pre>"},{"location":"content/modul-4/2-arrayer/#deklarera-och-initiera-med-storlek","title":"Deklarera och initiera med storlek","text":"<p>Varje element f\u00e5r sitt standardv\u00e4rde, i fallet med int s\u00e5 \u00e4r det 0. <pre><code>int[] tal = new int[5]; // En array som kan lagra 5 st heltal\n</code></pre></p>"},{"location":"content/modul-4/2-arrayer/#deklarera-och-initiera-med-storlek-och-varden","title":"Deklarera och initiera med storlek och v\u00e4rden","text":"<p>Kan numer ocks\u00e5 g\u00f6ras utan nyckelordet new, eller ja, kompilatorn sk\u00f6ter det \u00e5t oss. Demonstrerar b\u00e5de med string och int. B\u00e5da alternativen g\u00e5r bra, det undre \u00e4r smidigare d\u00e5 man slipper skriva lika mycket. <pre><code>// En int-array med 5 platser\nint[] tal = new int[] {1, 2, 3, 4, 5}; \n\n// En string-array med 3 platser\nstring[] tal = {\"hej\", \"p\u00e5\", \"dig\"};\n</code></pre></p> <p>Modern deklaration</p> <p>Notera att fr\u00e5n och med C# 12.0 (allts\u00e5 NET 8.0) s\u00e5 kan arrayer (och listor) \u00e4ven initieras med hakparenteser []. Tidigare enbart klammerparenteser {}.</p> <pre><code>int[] tal = [7, 8, 13]; // Bara nu\nint[] tal2 = {7, 8, 13}; // F\u00f6rr och nu\n</code></pre>"},{"location":"content/modul-4/2-arrayer/#anvanda-och-andra-varden","title":"Anv\u00e4nda och \u00e4ndra v\u00e4rden","text":"<p>Arrayens v\u00e4rden n\u00e5s genom dess index, d\u00e4r index b\u00f6rjar p\u00e5 0. Med hj\u00e4lp av index kan elementen i en array anv\u00e4ndas eller \u00e4ndras.</p> <pre><code>// Skapa en array med bokst\u00e4verna k a t t\nchar[] bokstaver = { 'k', 'a', 't', 't' };\n\n// Element kan skrivas ut\nConsole.WriteLine(bokstaver[1]); // Ger utskriften a.\n\n// Element kan sparas i en egen variabel\nchar tecken = bokstaver[2]; // F\u00e5r v\u00e4rdet t.\n\n// Element kan \u00e4ndras, tilldela positionen i arrayen ett nytt v\u00e4rde\nbokstaver[0] = 'H'; // H ist\u00e4llet f\u00f6r k, nytt ord. \n\n// G\u00e5 ocks\u00e5 att anv\u00e4nda range-operatorn .. f\u00f6r att f\u00e5 del av array\nchar[] nyArray = bokstaver[..2]; // F\u00e5r elementen: H a\n</code></pre> <p>Notera att det inte g\u00e5r att anropa ett element som inte finns, exempelvis s\u00e5 har en array med 5 platser index fr\u00e5n 0 till och med 4, se nedan. <pre><code>// En int-array med 5 platser\nint[] tal = new int[] {1, 2, 3, 4, 5}; \n\n// Trams\nConsole.WriteLine(bokstaver[9]); // Ger exekveringsfel med meddelande \"Index was outside the bounds of the array\".\n</code></pre></p> <p>Index bakl\u00e4nges</p> <p>Det g\u00e5r ocks\u00e5 att r\u00e4kna fr\u00e5n slutet i en samling med hj\u00e4lp av \"index from end\"-operatorn ^.</p> <pre><code>string[] textArray = [\"hej\", \"p\u00e5\", \"dig\", \"!\"];\nConsole.WriteLine(textArray[^2]); // Ger utskriften dig\n</code></pre>"},{"location":"content/modul-4/2-arrayer/#iterera-over-array","title":"Iterera \u00f6ver array","text":"<p>Arrayer anv\u00e4nds ofta tillsammans med loopar f\u00f6r att arbeta med alla element samtidigt. </p> <p>Iterera \u00f6ver en array \u00e4r allts\u00e5 samma sak som att \"loopa genom arrayen\", att g\u00e5 igenom arrayen och utf\u00f6ra samma kodsekvens f\u00f6r varje element.</p>"},{"location":"content/modul-4/2-arrayer/#for-loop","title":"For-loop","text":"<p>En for-loop kan anv\u00e4ndas, f\u00f6rdel h\u00e4r \u00e4r att man har tillg\u00e5ng till index via r\u00e4knevariabeln, exempelvis i. Notera att alla arrayer har egenskapen Length, som kan anv\u00e4ndas f\u00f6r att veta hur m\u00e5nga element arrayen har. <pre><code>// En int-array med 4 element\nint[] talArray = { 14, 20, 25, 17 };\n\n// Iterera \u00f6ver arrayen och skriv ut v\u00e4rdet f\u00f6r varje element\nfor (int i = 0; i &lt; talArray.Length; i++)\n{\n    // V\u00e4rdet f\u00f6r det aktuella indexet, och mellanslag efter\u00e5t\n    Console.Write(talArray[i] + \" \");\n}\n\n// Ger utskriften: 14, 20, 25, 17\n</code></pre></p>"},{"location":"content/modul-4/2-arrayer/#foreach-loop","title":"Foreach-loop","text":"<p>Ett alternativ \u00e4r foreach, som automatiskt g\u00e5r igenom alla element utan att beh\u00f6va anv\u00e4nda index. </p> <pre><code>// En int-array med 4 element\nint[] talArray = { 14, 20, 25, 17 };\n\n// Iterera \u00f6ver arrayen och skriv ut respektive v\u00e4rde\nforeach (int tal in talArray) \n{\n    // Som ovanst\u00e5ende exempel, v\u00e4rdet f\u00f6ljt av mellanslag\n    Console.Write(tal + \" \");\n}\n\n// Ger utskriften: 14, 20, 25, 17\n</code></pre>"},{"location":"content/modul-4/2-arrayer/#jamforelse-for-och-foreach","title":"J\u00e4mf\u00f6relse for och foreach","text":"<p>En for-loop anv\u00e4nder en r\u00e4knevariabel, ofta <code>i</code>, f\u00f6r att \u00e4ndra index, den kan allts\u00e5 bara anv\u00e4ndas p\u00e5 samlingar som \u00e4r indexerade. Foreach-loopen anv\u00e4nder inte index och kan d\u00e4rmed anv\u00e4ndas p\u00e5 alla samlingar. Foreach-loopen kan ocks\u00e5 s\u00e4gas ha lite h\u00f6gre l\u00e4sbarhet.</p> <p>Syftet med en foreach-loop \u00e4r att g\u00e5 igenom en samling och h\u00e4mta relevant information, inte att \u00e4ndra i den. En foreach-loop \u00e4r d\u00e4rmed read-only, det g\u00e5r allts\u00e5 inte att \u00e4ndra v\u00e4rdena. En for-loop d\u00e4remot kan utan problem \u00e4ndra i samlingen som itereras \u00f6ver.</p> <p>Exempel, samma array som tidigare exempel, men med m\u00e5ls\u00e4ttningen att alla tal som \u00e4r mindre \u00e4n 20 ska f\u00e5 5 adderat till sig, en f\u00f6r\u00e4ndring i arrayen.</p> <pre><code>int[] talArray = { 14, 20, 25, 17 };\n\nfor (int i = 0; i &lt; talArray.Length; i++)\n{\n    // Om talet \u00e4r mindre \u00e4n 20, s\u00e5 ta talet och l\u00e4gg till 5.\n    if (talArray[i] &lt; 20)\n    {\n        // Kan ocks\u00e5 g\u00f6ras med += operatorn\n        talArray[i] = talArray[i] + 5;\n    }\n}\n// Arrayens element efter loopen: 19, 20, 25, 22.\n// Notera hur de tv\u00e5 element som var l\u00e4gre \u00e4n 20 har tagits + 5.\n</code></pre> <p>Vilken loop ska anv\u00e4ndas?</p> <p>Ska information h\u00e4mtas och anv\u00e4ndas? Anv\u00e4nd foreach. </p> <p>Ska information \u00e4ndras, eller beh\u00f6vs index av n\u00e5gon anledning, exempelvis skriva ut tal? Anv\u00e4nd for.</p>"},{"location":"content/modul-4/2-arrayer/#egenskaper-och-metoder","title":"Egenskaper och metoder","text":"<p>Det finns en hel del egenskaper och metoder tillh\u00f6rande arrayer. Notera hur metoderna anropas p\u00e5 olika s\u00e4tt. Nedan presenteras ett urval av dessa.</p>"},{"location":"content/modul-4/2-arrayer/#egenskaperna-rank-och-length","title":"Egenskaperna Rank och Length","text":"<pre><code>// En 2D-array med tv\u00e5 rader och tre kolumner\nint[,] tdArray3 = { { 1, 2, 3 }, { 4, 5, 6 } };\n\n// Egenskapen Rank anger hur m\u00e5nga dimensioner en array har\nConsole.WriteLine(tdArray3.Rank); // Ger utskriften 2\n\n// Egenskapen Length anger hur m\u00e5nga element arrayen har totalt\nint elementCount = tdArray3.Length; // Variabeln f\u00e5r v\u00e4rdet 6\n</code></pre>"},{"location":"content/modul-4/2-arrayer/#contains","title":"Contains()","text":"<p>Metoden Contains() unders\u00f6ker om n\u00e5got av elementen i arrayen har ett givet v\u00e4rde, returnerar true/false. Anropas via arrayens variabelnamn. <pre><code>string[] tal = {\"hej\", \"p\u00e5\", \"dig\"};\n\nbool finnsDet = tal.Contains(\"p\u00e5\"); //Variabeln f\u00e5r v\u00e4rdet true\n</code></pre></p>"},{"location":"content/modul-4/2-arrayer/#getlength","title":"GetLength()","text":"<p>Metoden GetLength() returnerar hur m\u00e5nga element arrayen har i en given dimension. Anv\u00e4ndbart n\u00e4r arrayen har fler \u00e4n en dimension. <pre><code>// En 2D-array med tv\u00e5 rader och tre kolumner\nint[,] tdArray3 = { { 1, 2, 3 }, { 4, 5, 6 } };\n\n// Hur m\u00e5nga element i f\u00f6rsta dimensionen, rad\nConsole.WriteLine(tdArray3.GetLength(0)); // Ger utskriften 2\n\n// Hur m\u00e5nga element i andra dimensionen, kolumn\nint numOfColumns = tdArray3.GetLength(1); // Variabeln f\u00e5r v\u00e4rdet 3\n</code></pre></p>"},{"location":"content/modul-4/2-arrayer/#clear","title":"Clear()","text":"<p>Metoden Clear() g\u00f6r precis vad man kan t\u00e4nka sig, rensar inneh\u00e5llet fr\u00e5n en array. Notera att den anropas via klassen Array, till skillnad fr\u00e5n de tv\u00e5 tidigare metoderna. <pre><code>string[] ord = {\"hej\", \"p\u00e5\", \"dig\"};\n\n// Anroper metoden Clear(), skickar in v\u00e5r array som argument\nArray.Clear(ord);\n\n// Testar Contains() igen, men f\u00e5r false nu, arrayen \u00e4r rensad!\nbool finnsDet = ord.Contains(\"p\u00e5\"); //Variabeln f\u00e5r v\u00e4rdet false\n</code></pre></p>"},{"location":"content/modul-4/2-arrayer/#indexof-och-lastindexof","title":"IndexOf() och LastIndexOf()","text":"<p>Letar upp ett givet v\u00e4rde och returnerar dess index. Anropas via klassen Array. <pre><code>char[] bokstaver = { 'k', 'a', 't', 't' };\n\n// Hittar index f\u00f6r f\u00f6rsta t:et\nint first = Array.IndexOf(bokstaver, 't'); // F\u00e5r v\u00e4rdet 2\n\n// Hittar index f\u00f6r andra t:et\nint last = Array.LastIndexOf(bokstaver, 't'); // F\u00e5r v\u00e4rdet 3\n</code></pre></p>"},{"location":"content/modul-4/2-arrayer/#sort-och-reverse","title":"Sort() och Reverse()","text":"<pre><code>int[] tal = [5, 18, 93, 17];\n\n// Sorterar v\u00e4rdena i arrayen. \nArray.Sort(tal);\n\n// Byter ordning p\u00e5 v\u00e4rdena i arrayen.\nArray.Reverse(tal);\n\n// Skriver ut alla v\u00e4rden separerade av mellanslag.\nforeach (var item in tal)\n{\n    Console.Write($\"{item} \");\n}\n\n// Loopen ger utskriften: 93 18 17 5\n// Eftersom arrayen f\u00f6rst sorterades, och sen byttes ordning p\u00e5\n</code></pre> <p>Tips</p> <p>H\u00f6h\u00f6h\u00f6 metoden Resize() h\u00f6h\u00f6.</p>"},{"location":"content/modul-4/2-arrayer/#tvadimensionella-arrayer","title":"Tv\u00e5dimensionella Arrayer","text":"<p>Som bekant kan en tv\u00e5dimensionell array anv\u00e4ndas f\u00f6r att representera information som ett rutn\u00e4t/koordinatsystem/liknande. Ett annat perspektiv \u00e4r att informationen helt enkelt utg\u00f6rs av ett visst antal rader som alla \u00e4r lika l\u00e5nga. <pre><code>En 3x3 array, tre rader som alla \u00e4r tre element l\u00e5nga.\nAlt. \"Tre rader och tre kolumner\"\nX X X\nX X X\nX X X\n\nEn 2x4 array skulle kunna representeras enligt f\u00f6ljannde.\nAllts\u00e5 tv\u00e5 rader och fyra kolumner.\nX X X X\nX X X X\n</code></pre></p> <p>I en 1D-array, string, eller annan endimensionell samling s\u00e5 anv\u00e4ndas index f\u00f6r att h\u00e4nvisa till ett specifikt element. Det fungerar p\u00e5 motsvarande s\u00e4tt f\u00f6r 2D-arrayer, med till\u00e4gget att man m\u00e5ste ange index f\u00f6r B\u00c5DE rad och kolumn. Man kan allts\u00e5 t\u00e4nka sig ett radindex och ett kolumnindex, b\u00e5da b\u00f6rjar p\u00e5 0. Dessa anv\u00e4nds via hakparentes enligt: [rad, kolumn]. <pre><code>rad 0 1 2 &lt;- kolumn\n0   B X X\n1   X X X\n2   X A X\n\nV\u00e4rdet A har position [2,1]\nV\u00e4rdet B har position [0,0]\n</code></pre></p>"},{"location":"content/modul-4/2-arrayer/#deklaration_1","title":"Deklaration","text":"<p>2D-arrayer skapas enligt samma koncept som 1D-arrayer, med skillnaden att ett kommatecken anv\u00e4nds f\u00f6r att g\u00f6ra arrayen till 2D. <pre><code>// Bara namnet\nint[,] tdArray1;\n\n// En tom 3x4 array\nint[,] tdArray2 = new int[3,4];\n\n// En 2x3 array med v\u00e4rden\nint[,] tdArray3 = { { 1, 2, 3 }, { 4, 5, 6 } };\n</code></pre></p>"},{"location":"content/modul-4/2-arrayer/#anvandning-och-andring-av-varden","title":"Anv\u00e4ndning och \u00e4ndring av v\u00e4rden","text":"<p>Anv\u00e4ndning och \u00e4ndring av v\u00e4rden sker enligt samma princip som f\u00f6r 1D-arrayer, men enligt syntaxen [rad, kolumn]. <pre><code>// En 2x3 array med v\u00e4rden\nint[,] tdArray3 = { { 1, 2, 3 }, { 4, 5, 6 } };\n\nConsole.WriteLine(tdArray3[1,0]); // Ger utskriften 4\n</code></pre></p>"},{"location":"content/modul-4/2-arrayer/#iterera-med-nastlade-for-loopar-eller-foreach","title":"Iterera med n\u00e4stlade For-loopar eller foreach","text":"<p>Att g\u00e5 igenom alla v\u00e4rden i en 2D-array sker p\u00e5 motsvarande s\u00e4tt som f\u00f6r 1D-arrayer.</p>"},{"location":"content/modul-4/2-arrayer/#foreach","title":"Foreach","text":"<p>Foreach-loopen g\u00e5r helt enkelt igenom alla v\u00e4rden, oavsett hur m\u00e5nga rader respektive kolumner som finns. <pre><code>// En 2x3 array med v\u00e4rden\nint[,] tdArray3 = { { 1, 2, 3 }, { 4, 5, 6 } };\n\nforeach (int tal in tdArray3)\n{\n    Console.WriteLine(tal);\n}\n</code></pre></p>"},{"location":"content/modul-4/2-arrayer/#nastlade-for-loopar","title":"N\u00e4stlade for-loopar","text":"<p>F\u00f6r att g\u00e5 igenom alla v\u00e4rden i en 2D-array med hj\u00e4lp av for-loopar beh\u00f6ver man n\u00e4stla dem. I nedanst\u00e5ende \u00e4ndras varje v\u00e4rde i arrayen genom addition med 5. R\u00e4knevariablerna <code>i</code> och <code>j</code> motsvarar index f\u00f6r rad respektive kolumn. G\u00e5r sj\u00e4lvklart att byta namn fr\u00e5n i och j. <pre><code>// En 2x3 array med v\u00e4rden\nint[,] tdArray3 = { { 1, 2, 3 }, { 4, 5, 6 } };\n\n// Anv\u00e4nd .GetLength(0) f\u00f6r att hitta antal rader\nfor (int i = 0; i &lt; tdArray3.GetLength(0); i++)\n{\n    // Anv\u00e4nd .GetLength(1) f\u00f6r antal kolumner\n    for (int j = 0; j &lt; tdArray3.GetLength(1); j++)\n    {\n        // \u00d6ka varje v\u00e4rde med 5\n        tdArray3[i,j] = tdArray3[i,j] + 5;\n    }\n}\n</code></pre></p> <p>Tips</p> <p>F\u00f6r flerdimensionella arrayer fungerar det enligt samma koncept som tv\u00e5dimensionella, n\u00e4stla fler loopar och anv\u00e4nd .GetLength() f\u00f6r respektive l\u00e4ngd.</p> <p>Ev. ATT G\u00d6RA: Arrayer och metoder... hmm.. referenstyp? </p>"},{"location":"content/modul-4/begrepp4/","title":"Begrepp - Modul 4","text":""},{"location":"content/modul-4/begrepp4/#metoder","title":"Metoder","text":"<p>Metod: En kodsekvens som utf\u00f6r en specifik uppgift och kan anropas vid behov.</p> <p>DRY: \"Don't Repeat Yourself\" \u2013 en princip som uppmuntrar \u00e5teranv\u00e4ndning av kod ist\u00e4llet f\u00f6r duplicering.</p> <p>PascalCase: Namngivningsstil d\u00e4r varje ord inleds med en stor bokstav, t.ex. <code>MyMethodName</code>.</p> <p>camelCase: Namngivningsstil d\u00e4r f\u00f6rsta ordet \u00e4r gemener och varje efterf\u00f6ljande ord b\u00f6rjar med stor bokstav, t.ex. <code>myVariableName</code>.</p> <p>Metoddeklaration: Definition av en metod med namn, returtyp och eventuella parametrar.</p> <p>static: Nyckelord som g\u00f6r att metoden kan k\u00f6ras f\u00f6r sig sj\u00e4lv.</p> <p>void: En returtyp som indikerar att metoden inte returnerar n\u00e5got v\u00e4rde.</p> <p>Returtyp: Datatypen f\u00f6r v\u00e4rdet som metoden returnerar.</p> <p>Metodanrop: Anv\u00e4ndning av en metod genom att skriva dess namn och eventuella argument.</p> <p>Parametrar: Variabler i metoddeklarationen som tar emot argument vid anrop.</p> <p>Argument: V\u00e4rden som skickas till en metods parametrar vid anrop.</p> <p>Returv\u00e4rde: V\u00e4rdet som en metod returnerar.</p> <p>return: Kommando f\u00f6r att avsluta metoden och returnera ett v\u00e4rde.</p> <p>Metod\u00f6verlagring: Flera metoder med samma namn men olika parameterlistor i samma klass.</p> <p>Rekursiv metod: En metod som anropar sig sj\u00e4lv.</p>"},{"location":"content/modul-4/begrepp4/#arrayer","title":"Arrayer","text":"<p>Array: En samling av element av samma typ i ordnad f\u00f6ljd.</p> <p>Element: Ett enskilt v\u00e4rde i en array.</p> <p>Index: Positionen f\u00f6r ett element i arrayen, med start fr\u00e5n 0.</p> <p>Iterera \u00f6ver array: G\u00e5 igenom alla element i en array, med en loop.</p> <p>Length: Antalet element i en array.</p> <p>GetLength: Returnerar l\u00e4ngden av en viss dimension i en flerdimensionell array.</p>"},{"location":"content/modul-4/l%C3%B6sn4/","title":"L\u00f6sningsf\u00f6rslag - Modul 4","text":""},{"location":"content/modul-4/l%C3%B6sn4/#uppgift-1","title":"Uppgift 1","text":"<pre><code>class Program\n{\n    // Metod som skriver ut det minsta av tv\u00e5 ta\n    static void PrintSmallestNumber(int num1, int num2)\n    {\n        int min;\n        if (num1 &lt; num2)\n        {\n            min = num1;\n        }\n        else\n        {\n            min = num2;\n        }\n        Console.WriteLine($\"Det minsta talet \u00e4r {min}!\");\n    }\n\n    static void Main(string[] args)\n    {\n        // Testk\u00f6rning av metoden med exempelv\u00e4rden\n        PrintSmallestNumber(3, 7);\n    }\n}\n</code></pre>"},{"location":"content/modul-4/l%C3%B6sn4/#uppgift-2","title":"Uppgift 2","text":"<pre><code>class Program\n{\n    // Metod som ber\u00e4knar medelv\u00e4rdet av tre tal\n    static double CalculateAverage(int num1, int num2, int num3)\n    {\n        return (num1 + num2 + num3) / 3.0;\n    }\n\n    static void Main(string[] args)\n    {\n        // Testk\u00f6rning av metoden\n        double average = CalculateAverage(4, 5, 6);\n        Console.WriteLine($\"Medelv\u00e4rdet \u00e4r: {average}\");\n    }\n}\n</code></pre>"},{"location":"content/modul-4/l%C3%B6sn4/#uppgift-3","title":"Uppgift 3","text":"<pre><code>class Program\n{\n    static double CalculateVolume(double radius, double height)\n    {\n        return Math.PI * Math.Pow(radius, 2) * height;\n    }\n\n    static double CalculateSurfaceArea(double radius, double height)\n    {\n        return 2 * Math.PI * radius * height;\n    }\n\n    static void Main(string[] args)\n    {\n        Console.Write(\"Ange cylinderns radie: \");\n        double radius = Convert.ToDouble(Console.ReadLine());\n\n        Console.Write(\"Ange cylinderns h\u00f6jd: \");\n        double height = Convert.ToDouble(Console.ReadLine());\n\n        double volume = CalculateVolume(radius, height);\n        double surfaceArea = CalculateSurfaceArea(radius, height);\n\n        Console.WriteLine($\"Volymen \u00e4r {volume:f2} v.e. och mantelarean \u00e4r {surfaceArea:f2} a.e.\");\n    }\n}\n</code></pre>"},{"location":"content/modul-4/l%C3%B6sn4/#uppgift-4","title":"Uppgift 4","text":"<pre><code>class Program\n{\n    static void Main(string[] args)\n    {\n        string[] words = new string[3];\n\n        for (int i = 0; i &lt; words.Length; i++)\n        {\n            Console.Write($\"Ange ord {i + 1}: \");\n            words[i] = Console.ReadLine();\n        }\n\n        Console.WriteLine(\"Du angav f\u00f6ljande ord:\");\n        for (int i = 0; i &lt; words.Length; i++)\n        {\n            Console.WriteLine($\"{i + 1}. {words[i]}\");\n        }\n    }\n}\n</code></pre>"},{"location":"content/modul-4/l%C3%B6sn4/#uppgift-5","title":"Uppgift 5","text":"<pre><code>class Program\n{\n    static int CountPositiveNumbers(int[] numbers)\n    {\n        int count = 0;\n        foreach (int num in numbers)\n        {\n            if (num &gt; 0)\n                count++;\n        }\n        return count;\n    }\n\n    static void Main(string[] args)\n    {\n        int[] testArray = { -1, 2, 3, -4, 5 };\n        int positiveCount = CountPositiveNumbers(testArray);\n        Console.WriteLine($\"Antal positiva tal: {positiveCount}\");\n    }\n}\n</code></pre>"},{"location":"content/modul-4/l%C3%B6sn4/#uppgift-6","title":"Uppgift 6","text":"<pre><code>class Program\n{\n    static string ToggleCase(string input)\n    {\n        // Skapar en tom str\u00e4ng som ska byggas upp med bytta case\n        string result = \"\";  \n        for (int i = 0; i &lt; input.Length; i++)\n        {\n            // Kontrollera om tecknet \u00e4r gemen/versal\n            if (char.IsUpper(input[i]))\n            {\n                result += char.ToLower(input[i]);\n            }\n            else if (char.IsLower(input[i]))\n            {\n                result += char.ToUpper(input[i]);\n            }\n            else\n            {\n                // F\u00f6r \u00f6vriga tecken, t.ex. mellanslag, l\u00e4gg till dem \u00e4nd\u00e5\n                result += input[i]; \n            }\n        }\n        return result;\n    }\n\n    static void Main()\n    {\n        string toggled = ToggleCase(\"Hej p\u00e5 dig\");\n        Console.WriteLine(toggled);\n    }\n}\n</code></pre>"},{"location":"content/modul-4/l%C3%B6sn4/#uppgift-7","title":"Uppgift 7","text":"<pre><code>class Program\n{\n    static bool ContainsNumber(int[] numbers, int target)\n    {\n        foreach (int num in numbers)\n        {\n            if (num == target)\n            {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    static void Main(string[] args)\n    {\n        int[] array = { 1, 2, 3, 4, 5 };\n        bool result = ContainsNumber(array, 3);\n        Console.WriteLine($\"Finns talet 3 i arrayen? {result}\");\n    }\n}\n</code></pre>"},{"location":"content/modul-4/l%C3%B6sn4/#uppgift-8","title":"Uppgift 8","text":"<pre><code>class Program\n{\n    static void Main(string[] args)\n    {\n        // Blir r\u00e4tt kort main, anv\u00e4nder eg. bara v\u00e5ra metoder\n        int[] randomNumbers = GenerateRandomArray();\n\n        Console.WriteLine($\"Minsta tal: {FindMin(randomNumbers)}\");\n        Console.WriteLine($\"St\u00f6rsta tal: {FindMax(randomNumbers)}\");\n        Console.WriteLine($\"Medelv\u00e4rde: {CalculateAverage(randomNumbers)}\");\n        Console.WriteLine($\"Median: {CalculateMedian(randomNumbers)}\");\n        Console.WriteLine($\"Antal j\u00e4mna tal: {CountEvenNumbers(randomNumbers)}\");\n        Console.WriteLine($\"Antal udda tal: {CountOddNumbers(randomNumbers)}\");\n    }\n\n    // Metod f\u00f6r att generera en array med 20 slumpm\u00e4ssiga tal mellan 0 och 100\n    static int[] GenerateRandomArray()\n    {\n        Random rand = new Random();\n        int[] array = new int[20];\n        for (int i = 0; i &lt; array.Length; i++)\n        {\n            array[i] = rand.Next(0, 101); \n        }\n        return array;\n    }\n\n    // Metod f\u00f6r att hitta minsta talet i arrayen\n    static int FindMin(int[] numbers)\n    {\n        int min = numbers[0];\n        for (int i = 1; i &lt; numbers.Length; i++)\n        {\n            if (numbers[i] &lt; min)\n                min = numbers[i];\n        }\n        return min;\n    }\n\n    // Metod f\u00f6r att hitta st\u00f6rsta talet i arrayen\n    static int FindMax(int[] numbers)\n    {\n        int max = numbers[0];\n        for (int i = 1; i &lt; numbers.Length; i++)\n        {\n            if (numbers[i] &gt; max)\n                max = numbers[i];\n        }\n        return max;\n    }\n\n    // Metod f\u00f6r att ber\u00e4kna medelv\u00e4rdet av talen i arrayen\n    static double CalculateAverage(int[] numbers)\n    {\n        int sum = 0;\n        for (int i = 0; i &lt; numbers.Length; i++)\n        {\n            sum += numbers[i];\n        }\n        return (double)sum / numbers.Length;\n    }\n\n    // Metod f\u00f6r att ber\u00e4kna medianen av talen i arrayen\n    static double CalculateMedian(int[] numbers)\n    {\n        Array.Sort(numbers); // Sortera arrayen f\u00f6rst\n        int middle = numbers.Length / 2;\n\n        // Om l\u00e4ngden \u00e4r j\u00e4mn, ta medelv\u00e4rdet av de tv\u00e5 mittersta talen\n        if (numbers.Length % 2 == 0)\n        {\n            return (numbers[middle - 1] + numbers[middle]) / 2.0;\n        }\n        else\n        {\n            return numbers[middle];\n        }\n    }\n\n    // Metod f\u00f6r att r\u00e4kna antalet j\u00e4mna tal i arrayen\n    static int CountEvenNumbers(int[] numbers)\n    {\n        int count = 0;\n        for (int i = 0; i &lt; numbers.Length; i++)\n        {\n            if (numbers[i] % 2 == 0)\n            {\n                count++;\n            }\n        }\n        return count;\n    }\n\n    // Metod f\u00f6r att r\u00e4kna antalet udda tal i arrayen\n    static int CountOddNumbers(int[] numbers)\n    {\n        int count = 0;\n        for (int i = 0; i &lt; numbers.Length; i++)\n        {\n            if (numbers[i] % 2 != 0)\n            {\n                count++;\n            }\n        }\n        return count;\n    }\n}\n</code></pre>"},{"location":"content/modul-4/l%C3%B6sn4/#uppgift-9","title":"Uppgift 9","text":"<pre><code>class Program\n{\n    static void Main(string[] args)\n    {\n        Console.Write(\"Ange en mening: \");\n        string userInput = Console.ReadLine();\n\n        int numberOfVowels = CountVowels(userInput);\n        Console.WriteLine($\"Antal vokaler i meningen: {numberOfVowels}\");\n    }\n\n    // Metod som r\u00e4knar antalet vokaler i en str\u00e4ng\n    static int CountVowels(string input)\n    {\n        // Inkluderar b\u00e5de sm\u00e5 och stora vokaler\n        string vowels = \"aeiouy\u00e5\u00e4\u00f6AEIOUY\u00c5\u00c4\u00d6\"; \n        int vowelCount = 0;\n\n        for (int i = 0; i &lt; input.Length; i++)\n        {\n            // Kolla om tecknet finns i str\u00e4ngen och d\u00e5 \u00f6ka r\u00e4knaren med en\n            if (vowels.Contains(input[i]))\n            {\n                vowelCount++;\n            }\n        }\n        return vowelCount;\n    }\n\n}\n</code></pre>"},{"location":"content/modul-4/l%C3%B6sn4/#uppgift-10","title":"Uppgift 10","text":"<pre><code>class Program\n{\n    static void Main(string[] args)\n    {\n        int positiveNumber = GetPositiveInteger();\n        Console.WriteLine($\"Du angav talet: {positiveNumber}\");\n    }\n\n    static int GetPositiveInteger()\n    {\n        // Startv\u00e4rden\n        int number = 0;\n        bool isValid = false;\n\n        // K\u00f6r loopen n\u00e4r isValid \u00e4r false\n        while (!isValid) \n        {\n            Console.Write(\"Ange ett positivt heltal: \");\n            string input = Console.ReadLine();\n\n            // S\u00e4tt boolen till falsk om det inte g\u00e5r att parsea\n            isValid = int.TryParse(input, out number);\n\n            // S\u00e4tt boolen till falsk om det inte \u00e4r ett positivt tal\n            if (number &lt; 0)\n            {\n                isValid = false;\n            }\n\n            // Om boolen \u00e4r falsk skriv ut info\n            if (!isValid)\n            {\n                Console.WriteLine(\"Ogiltig inmatning. F\u00f6rs\u00f6k igen med ett positivt heltal.\");\n            }\n        }\n        return number;\n    }\n}\n</code></pre>"},{"location":"content/modul-4/l%C3%B6sn4/#uppgift-11","title":"Uppgift 11","text":"<pre><code>class Program\n{\n    static void Main(string[] args)\n    {\n        int[,] array = GenerateRandomArray();\n        bool continueRunning = true;\n\n        while (continueRunning)\n        {\n            // Skriv ut menyn och arrayen\n            Console.Clear();\n            Console.WriteLine(\"\\n--- Huvudmeny ---\");\n            PrintArray(array);\n            Console.WriteLine();\n            Console.WriteLine(\"1. Skriv ut summan av alla element\");\n            Console.WriteLine(\"2. Skriv ut st\u00f6rsta elementet\");\n            Console.WriteLine(\"3. Skriv ut summan f\u00f6r arrayens rader\");\n            Console.WriteLine(\"4. Skriv ut summan f\u00f6r arrayens kolumner\");\n            Console.WriteLine(\"5. Generera nya tal till arrayen\");\n            Console.WriteLine(\"6. Avsluta\");\n            Console.Write(\"V\u00e4lj ett alternativ (1-6): \");\n\n            string choice = Console.ReadLine();\n            switch (choice)\n            {\n                case \"1\":\n                    Console.WriteLine($\"Summan av alla element \u00e4r: {SumAllElements(array)}\");\n                    break;\n                case \"2\":\n                    Console.WriteLine($\"Det st\u00f6rsta elementet \u00e4r: {FindMaxElement(array)}\");\n                    break;\n                case \"3\":\n                    PrintRowSums(array);\n                    break;\n                case \"4\":\n                    PrintColumnSums(array);\n                    break;\n                case \"5\":\n                    array = GenerateRandomArray();\n                    Console.WriteLine(\"Nya tal har genererats till arrayen.\");\n                    break;\n                case \"6\":\n                    continueRunning = false;\n                    Console.WriteLine(\"Programmet avslutas.\");\n                    break;\n                default:\n                    Console.WriteLine(\"Ogiltigt val, f\u00f6rs\u00f6k igen.\");\n                    break;\n            }\n            Console.ReadLine();\n        }\n    }\n\n    // Metod som returnerar en array med slumpade tal 1-9\n    static int[,] GenerateRandomArray()\n    {\n        Random rand = new Random();\n        int[,] array = new int[3, 3];\n        for (int row = 0; row &lt; 3; row++)\n        {\n            for (int col = 0; col &lt; 3; col++)\n            {\n                array[row, col] = rand.Next(1, 10);\n            }\n        }\n        return array;\n    }\n\n    // Returnerar summan av alla element i en 2D int array\n    static int SumAllElements(int[,] array)\n    {\n        int sum = 0;\n        for (int row = 0; row &lt; 3; row++)\n        {\n            for (int col = 0; col &lt; 3; col++)\n            {\n                sum += array[row, col];\n            }\n        }\n        return sum;\n    }\n\n    // Returnerar det st\u00f6rsta v\u00e4rdet\n    static int FindMaxElement(int[,] array)\n    {\n        // B\u00f6rja med det f\u00f6rsta v\u00e4rdet, sen loopa igenom och j\u00e4mf\u00f6r varje v\u00e4rde\n        int max = array[0, 0];\n        for (int row = 0; row &lt; 3; row++)\n        {\n            for (int col = 0; col &lt; 3; col++)\n            {\n                // Om v\u00e4rdet \u00e4r st\u00f6rre \u00e4n tidigare max, spara v\u00e4rdet i max, s\u00e5 att det blir nya max\n                if (array[row, col] &gt; max)\n                {\n                    max = array[row, col];\n                }\n            }\n        }\n        return max;\n    }\n\n    // Skriver ut radsumma f\u00f6r respektive rad\n    static void PrintRowSums(int[,] array)\n    {\n        for (int row = 0; row &lt; 3; row++)\n        {\n            int rowSum = 0;\n            for (int col = 0; col &lt; 3; col++)\n            {\n                rowSum += array[row, col];\n            }\n            // Utskrift sker inne i for-loopen\n            Console.WriteLine($\"Summan av rad {row + 1} \u00e4r: {rowSum}\");\n        }\n    }\n\n    // Skriver ut kolumnsumma f\u00f6r resp kolumn\n    static void PrintColumnSums(int[,] array)\n    {\n        for (int col = 0; col &lt; 3; col++)\n        {\n            int colSum = 0;\n            for (int row = 0; row &lt; 3; row++)\n            {\n                colSum += array[row, col];\n            }\n            Console.WriteLine($\"Summan av kolumn {col + 1} \u00e4r: {colSum}\");\n        }\n    }\n\n    // Metod f\u00f6r att skriva ut arrayen i konsolen\n    static void PrintArray(int[,] array)\n    {\n        Console.WriteLine(\"Arrayen:\");\n        for (int row = 0; row &lt; 3; row++)\n        {\n            for (int col = 0; col &lt; 3; col++)\n            {\n                Console.Write(array[row, col] + \" \");\n            }\n            Console.WriteLine();\n        }\n    }\n}\n</code></pre>"},{"location":"content/modul-4/l%C3%B6sn4/#uppgift-12","title":"Uppgift 12","text":"<pre><code>class Program\n{\n    static void Main(string[] args)\n    {\n        // Exempel p\u00e5 en giltig 3x3-array\n        int[,] sudokuGrid = {\n        { 5, 3, 4 },\n        { 6, 7, 2 },\n        { 1, 9, 8 }\n        };\n\n        bool isValid = IsValidSudokuSection(sudokuGrid);\n        Console.WriteLine($\"\u00c4r arrayen en giltig del av en sudokul\u00f6sning? {isValid}\");\n    }\n\n    // Metod som kontrollerar om en 3x3-array \u00e4r en giltig del av en sudokul\u00f6sning\n    static bool IsValidSudokuSection(int[,] grid)\n    {\n        // Array med bools f\u00f6r att h\u00e5lla koll p\u00e5 vilka tal som \u00e4r \"hittade\" \n        // d.v.s. om vi loopar igenom och b\u00f6rjar med att hitta en 5:a, s\u00e5 markeras \n        // en av bools:en i denna array till true (n\u00e4rmare best\u00e4mt den p\u00e5 index 4)\n        bool[] seenNumbers = new bool[9]; \n\n        // Loopa igenom sudoku-arrayen med n\u00e4stlad loop\n        for (int row = 0; row &lt; 3; row++)\n        {\n            for (int col = 0; col &lt; 3; col++)\n            {\n                // Spara den aktuella siffran till variabel f\u00f6r l\u00e4sbarhet i if-satserna\n                int number = grid[row, col];\n\n                // Kontrollera om siffran ligger utanf\u00f6r intervallet, \n                // isf s\u00e5 returnera direkt false f\u00f6r hela metoden, d\u00e5 beh\u00f6ver vi inte\n                // kolla mer, eftersom vi har redan brutit mot the prime directive \n                if (number &lt; 1 || number &gt; 9)\n                {\n                    return false;\n                }\n\n                // Kontrollera om siffran redan setts, samma visa, avbryt och returnera falskt, vi kan inte ha dubletter\n                if (seenNumbers[number - 1])\n                {\n                    return false; // Ogiltig om siffran redan f\u00f6rekommer\n                }\n\n                // Markera siffran som hittad i arrayen med bools\n                seenNumbers[number - 1] = true;\n            }\n        }\n\n        // Om vi ens kommer ut hit i koden s\u00e5 har allts\u00e5 alla siffror passerat checkarna i for-looparna\n        // allts\u00e5 m\u00e5ste allt vara OK, returnera d\u00e4rmed true\n        return true; \n    }\n}\n</code></pre>"},{"location":"content/modul-4/l%C3%B6sn4/#uppgift-13","title":"Uppgift 13","text":"<pre><code>class Program\n{\n    static void Main(string[] args)\n    {\n        // Exempel p\u00e5 en 3x3-matris\n        int[,] matrix = {\n        { 1, 2, 3 },\n        { 4, 5, 6 },\n        { 7, 8, 9 }\n        };\n\n        int mainDiagonalSum = CalculateMainDiagonalSum(matrix);\n        int otherDiagonalSum = CalculateOtherDiagonalSum(matrix);\n\n        Console.WriteLine($\"Summan av huvuddiagonalen \u00e4r: {mainDiagonalSum}\");\n        Console.WriteLine($\"Summan av den andra diagonalen \u00e4r: {otherDiagonalSum}\");\n    }\n\n    // Metod f\u00f6r att ber\u00e4kna diagonalsumman fr\u00e5n \u00f6vre v\u00e4nstra till nedre h\u00f6gra h\u00f6rnet\n    static int CalculateMainDiagonalSum(int[,] array2D)\n    {\n        int sum = 0;\n        // Loopa igenom arrayen antal rader, summera talen som finns p\u00e5 \n        // positionerna 0,0 + 1,1 + 2,2 osv\n        for (int i = 0; i &lt; array2D.GetLength(0); i++)\n        {\n            sum += array2D[i, i];\n        }\n        return sum;\n    }\n\n    // Metod f\u00f6r att ber\u00e4kna diagonalsumman fr\u00e5n \u00f6vre h\u00f6gra till nedre v\u00e4nstra h\u00f6rnet\n    static int CalculateOtherDiagonalSum(int[,] array2D)\n    {\n        // Spara till variabel f\u00f6r l\u00e4sbarhet sen\n        int n = array2D.GetLength(0); \n        int sum = 0;\n\n        // Samma loop som ovan\n        for (int i = 0; i &lt; n; i++)\n        {\n            // H\u00e4r \u00e4r villkoret lite b\u00f6kigare, vi g\u00e5r uppifr\u00e5n h\u00f6ger ner till v\u00e4nster\n\n            // L\u00e5t s\u00e4ga att arrayen \u00e4r 3x3, dvs index fr\u00e5n 0 - 2, n kommer att bli 3, n = 3\n            // F\u00f6rsta varvet kommer i = 0, allts\u00e5 kommer positionen vi tittar p\u00e5 vara [0, 3-0-1] = [0,2]\n            // [0,2] st\u00e4mmer bra \u00f6verens med det h\u00f6gra h\u00f6rnet\n\n            // Andra varvet ger [1, 3-1-1] = [1,1], st\u00e4mmer bra, etc.\n            sum += array2D[i, n - i - 1];\n        }\n        return sum;\n    }\n}\n</code></pre>"},{"location":"content/modul-4/uppg4/","title":"\u00d6vningsuppgifter - Modul 4","text":""},{"location":"content/modul-4/uppg4/#uppgift-1","title":"Uppgift 1","text":"<p>Skriv en metod som tar in tv\u00e5 tal och skriver ut det minsta av de tv\u00e5 talen, i en mening, t.ex. \"Det minsta talet \u00e4r 3!\". Din metod ska inte anv\u00e4nda den f\u00f6rdefinierade metoden Math.Min().</p> <p>Testk\u00f6r din metod genom att anropa den i Main().</p>"},{"location":"content/modul-4/uppg4/#uppgift-2","title":"Uppgift 2","text":"<p>Skriv en metod som tar in tre tal och returnerar talens medelv\u00e4rde. Notera att returnera inneb\u00e4r att metoden ska ha en annan returtyp \u00e4n void. </p> <p>Testk\u00f6r din metod.</p>"},{"location":"content/modul-4/uppg4/#uppgift-3","title":"Uppgift 3","text":"<p>Skriv ett program som hj\u00e4lper anv\u00e4ndaren med sina cylindriska behov, mer precist ber\u00e4kning av volym och mantelarea.</p> <p>Programmet fr\u00e5ga anv\u00e4ndaren om radie och h\u00f6jd f\u00f6r cylindern.</p> <p>Programmet ber\u00e4kna volym och mantelarea med hj\u00e4lp av en metod f\u00f6r varje. Metoderna ska ha radie och h\u00f6jd som parametrar, och returnera volym respektive mantelarea.</p> <p>Programmet ska skriva ut informationen till anv\u00e4ndaren.</p>"},{"location":"content/modul-4/uppg4/#uppgift-4","title":"Uppgift 4","text":"<p>Skriv ett program som fr\u00e5gar anv\u00e4ndaren efter tre ord, ett ord i taget. </p> <p>Programmet ska sedan l\u00e4gga in informationen i en array av typen string med tre platser p\u00e5.</p> <p>Programmet ska sedan skriva ut informationen fr\u00e5n arrayen tillbaka till anv\u00e4ndaren med hj\u00e4lp av en loop, numrerat i ordningen som orden angavs i, exempelvis 1. Hej 2. p\u00e5 3. dig</p>"},{"location":"content/modul-4/uppg4/#uppgift-5","title":"Uppgift 5","text":"<p>Skriv en metod som tar in en array av heltal som parameter. </p> <p>Metoden ska sedan r\u00e4kna och returnera antalet positiva tal i arrayen som skickades in.</p> <p>Testa din metod med olika arrayer av heltal f\u00f6r att se att den fungerar.</p>"},{"location":"content/modul-4/uppg4/#uppgift-6","title":"Uppgift 6","text":"<p>Skriv en metod som tar emot en str\u00e4ng och byter \"case\" p\u00e5 varje bokstav, stora bokst\u00e4ver ska bli sm\u00e5 och sm\u00e5 ska bli stora. </p> <p>Exempelvis om metoden anropas med texten \"Hej p\u00e5 dig\" ska metoden returnera \"hEJ P\u00c5 DIG\".</p>"},{"location":"content/modul-4/uppg4/#uppgift-7","title":"Uppgift 7","text":"<p>Skriv en metod som tar emot en array av heltal och ett givet heltal. Metoden ska sedan unders\u00f6ka om heltalet ifr\u00e5ga finns i arrayen. Metoden ska returnera true om talet finns, och false om talet inte finns.</p> <p>Anv\u00e4nd INTE den f\u00f6rdefinierade metoden Contains(). Du ska uppfinna hjulet sj\u00e4lv ist\u00e4llet.</p>"},{"location":"content/modul-4/uppg4/#uppgift-8","title":"Uppgift 8","text":"<p>Skriv ett program som genererar en array med 20 slumpade tal mellan 0 och 100. </p> <p>Programmet ska ha metoder f\u00f6r att: - ber\u00e4kna minsta och st\u00f6rsta talet i arrayen. - ber\u00e4kna medelv\u00e4rdet av talen i arrayen. - ber\u00e4kna medianen av talen i arrayen. - Antal j\u00e4mna och antal udda tal i arrayen.</p> <p>Programmet ska sedan skriva ut ovan n\u00e4mnda data i konsolen till anv\u00e4ndaren, metoderna ska anv\u00e4ndas.</p>"},{"location":"content/modul-4/uppg4/#uppgift-9","title":"Uppgift 9","text":"<p>Skriv ett program som tar in en mening fr\u00e5n anv\u00e4ndaren. Programmet ska r\u00e4kna och returnera antalet vokaler i meningen.</p> <p>Detta ska utf\u00f6ras med hj\u00e4lp av en metod som tar en str\u00e4ng som parameter och returnerar antalet vokaler (a, e, i, o, u, y, \u00e5, \u00e4, \u00f6) i str\u00e4ngen. </p>"},{"location":"content/modul-4/uppg4/#uppgift-10","title":"Uppgift 10","text":"<p>Skriv en metod som fr\u00e5gar anv\u00e4ndaren efter ett positivt heltal. </p> <p>Metoden ska inte l\u00e5ta anv\u00e4ndaren skriva in n\u00e5got annat \u00e4n ett positivt heltal och helt enkelt fr\u00e5ga igen tills anv\u00e4ndaren g\u00f6r r\u00e4tt. Metoden ska sedan returnera heltalet ifr\u00e5ga.</p> <p>Tips: Den h\u00e4r metoden kan ju modifieras och klistras in i kommande projekt f\u00f6r att enkelt kontrollera anv\u00e4ndarinput i framtiden!</p>"},{"location":"content/modul-4/uppg4/#uppgift-11","title":"Uppgift 11","text":"<p>Skriv ett program med huvudmeny. I huvudmenyn ska man se menyalternativ och en utritad 3x3 array av datatypen int. Arrayen ska vara fylld med slumpvalda heltal mellan 0 och 10 fr\u00e5n b\u00f6rjan.</p> <p>Menyalternativen ska vara: - Skriv ut summan av alla element. - Skriv ut st\u00f6rsta elementet. - Skriv ut summan f\u00f6r arrayens rader. - Skriv ut summan f\u00f6r arrayens kolumner. - Generera nya tal till arrayen.</p> <p>Menyfunktionerna ska uppfyllas med hj\u00e4lp av metoder. </p> <p>Beh\u00f6ver inte vara begr\u00e4nsat till en metod f\u00f6r varje alternativ, om du anser att det blir vettigt att anv\u00e4nda flera metoder s\u00e5 g\u00f6r det.</p>"},{"location":"content/modul-4/uppg4/#uppgift-12","title":"Uppgift 12","text":"<p>Skriv en metod som unders\u00f6ker om en 3x3 array av heltal kan vara en del av en sudokul\u00f6sning, allts\u00e5 om varje siffra f\u00f6rekommer endast en g\u00e5ng och inga siffror under 1 eller \u00f6ver 9.</p> <p>Metoden ska returnera true om arrayen \u00e4r en giltig l\u00f6sning, och false om den inte \u00e4r det.</p> <p>Testa din metod f\u00f6r b\u00e5de giltiga och ogiltiga arrayer och kontrollera att den fungerar.</p>"},{"location":"content/modul-4/uppg4/#uppgift-13","title":"Uppgift 13","text":"<p>Skriv en metod som ber\u00e4knar diagonalsumman fr\u00e5n \u00f6vre v\u00e4nstra h\u00f6rnet till nedre h\u00f6gra h\u00f6rnet f\u00f6r en given kvadratisk 2D-array med heltal. </p> <p>Metoden ska allts\u00e5 ta emot en tv\u00e5dimensionell array och returnera diagonalsumman.</p> <p>Testa din metod.</p> <p>Skriv nu en motsvarande metod f\u00f6r den andra diagonalsumman.</p>"},{"location":"content/modul-5/1-listor/","title":"Listor","text":""},{"location":"content/modul-5/1-listor/#list","title":"List&lt;&gt;","text":"<p>I C# \u00e4r en List&lt;&gt; en generisk datastruktur som fungerar som en flexibel, dynamiskt stor samling av objekt. \"Generisk\" inneb\u00e4r att du kan best\u00e4mma vilken typ av data listan ska inneh\u00e5lla, till exempel heltal eller str\u00e4ngar. </p> <p>Listor erbjuder m\u00f6jligheter att l\u00e4gga till, ta bort och manipulera element p\u00e5 ett enkelt s\u00e4tt.</p> <p>Listor skiljer sig fr\u00e5n arrayer genom att de kan \u00e4ndra storlek efter att de skapats. Detta sker automatiskt n\u00e4r man l\u00e4gger till eller tar bort element fr\u00e5n listan. Man beh\u00f6ver allts\u00e5 inte veta hur m\u00e5nga element listan kommer inneh\u00e5lla n\u00e4r man deklarerar den.</p>"},{"location":"content/modul-5/1-listor/#deklarera-och-initiera-en-lista","title":"Deklarera och initiera en lista","text":"<p>F\u00f6r att skapa en lista m\u00e5ste du ange vilken typ av objekt listan ska inneh\u00e5lla. Detta anges inom olikhetstecken &lt;&gt;.</p> <pre><code>// Skapa en lista av heltal\nList&lt;int&gt; numbers = new List&lt;int&gt;();\n\n// Skapa en lista av str\u00e4ngar\nList&lt;string&gt; names = new List&lt;string&gt;();\n</code></pre> <p>Du kan \u00e4ven initiera en lista med v\u00e4rden direkt.</p> <pre><code>List&lt;int&gt; numbers = new List&lt;int&gt; { 1, 2, 3, 4, 5 };\n</code></pre> <p>Tips</p> <p>Anv\u00e4nd List&lt;&gt; n\u00e4r du beh\u00f6ver en flexibel samling d\u00e4r antalet element kan variera under programmets k\u00f6rtid. Listor erbjuder m\u00e5nga praktiska metoder som kan underl\u00e4tta programmeringen.</p>"},{"location":"content/modul-5/1-listor/#lagga-till-och-ta-bort-element","title":"L\u00e4gga till och ta bort element","text":""},{"location":"content/modul-5/1-listor/#lagga-till-element","title":"L\u00e4gga till element","text":"<p>Anv\u00e4nd metoden <code>Add()</code> f\u00f6r att l\u00e4gga till ett element.</p> <pre><code>numbers.Add(6); // L\u00e4gger till 6 i slutet av listan\n</code></pre> <p>Det g\u00e5r \u00e4ven att l\u00e4gga till flera element samtidigt, \u00e4ven dessa hamnar i slutet av listan.</p> <pre><code>numbers.AddRange(new List&lt;int&gt; { 7, 8, 9 });\n</code></pre>"},{"location":"content/modul-5/1-listor/#ta-bort-element","title":"Ta bort element","text":"<p>Du kan ta bort element med metoder som <code>Remove()</code>, <code>RemoveAt()</code> och <code>RemoveRange()</code>:</p> <pre><code>numbers.Remove(3);  // Tar bort f\u00f6rsta f\u00f6rekomsten av talet 3\nnumbers.RemoveAt(0); // Tar bort elementet p\u00e5 index 0\n\n// Tar bort ett antal element fr\u00e5n ett givet index\nList&lt;string&gt; letters = new List&lt;string&gt; { \"A\", \"B\", \"C\", \"D\", \"E\" };\nletters.RemoveRange(1, 2); // Tar bort \"B\" och \"C\" fr\u00e5n index 1\n// Efter\u00e5t inneh\u00e5ller listan: [\"A\", \"D\", \"E\"]\n</code></pre> <p>Metoden <code>Clear()</code> tar bort alla element fr\u00e5n listan:</p> <pre><code>numbers.Clear();\n</code></pre>"},{"location":"content/modul-5/1-listor/#iterera-over-en-lista","title":"Iterera \u00f6ver en lista","text":"<p>Du kan anv\u00e4nda olika loopar f\u00f6r att g\u00e5 igenom listans element:</p>"},{"location":"content/modul-5/1-listor/#for-loop","title":"For-loop","text":"<pre><code>for (int i = 0; i &lt; numbers.Count; i++)\n{\n    Console.WriteLine(numbers[i]);\n}\n</code></pre>"},{"location":"content/modul-5/1-listor/#foreach-loop","title":"Foreach-loop","text":"<pre><code>foreach (var number in numbers)\n{\n    Console.WriteLine(number);\n}\n</code></pre>"},{"location":"content/modul-5/1-listor/#vanliga-metoder-och-egenskaper","title":"Vanliga metoder och egenskaper","text":""},{"location":"content/modul-5/1-listor/#count","title":"Count","text":"<p>Returnerar antalet element i listan:</p> <pre><code>int antal = numbers.Count;\n</code></pre>"},{"location":"content/modul-5/1-listor/#contains","title":"Contains","text":"<p>Kontrollerar om ett visst v\u00e4rde finns i listan:</p> <pre><code>bool finns = numbers.Contains(3); // true om 3 finns i listan\n</code></pre>"},{"location":"content/modul-5/1-listor/#indexof-och-lastindexof","title":"IndexOf och LastIndexOf","text":"<p>Returnerar index f\u00f6r f\u00f6rsta respektive sista f\u00f6rekomsten av ett v\u00e4rde:</p> <pre><code>// Hittar index f\u00f6r f\u00f6rsta 3:an\nint index = numbers.IndexOf(3);\n\n// Hittar index f\u00f6r sista 3:an\nint lastIndex = numbers.LastIndexOf(3); \n</code></pre>"},{"location":"content/modul-5/1-listor/#insert","title":"Insert","text":"<p>L\u00e4gger till ett element p\u00e5 en specifik plats:</p> <pre><code>numbers.Insert(2, 99); // L\u00e4gger till 99 p\u00e5 index 2\n</code></pre>"},{"location":"content/modul-5/1-listor/#sort-och-reverse","title":"Sort och Reverse","text":"<p>Sorterar respektive v\u00e4nder ordningen i listan:</p> <pre><code>numbers.Sort();   // Sorterar listan i stigande ordning\nnumbers.Reverse(); // V\u00e4nder ordningen i listan\n</code></pre>"},{"location":"content/modul-5/1-listor/#exempelprogram","title":"Exempelprogram","text":"<p>F\u00f6ljande program demonstrerar flera vanliga operationer med en lista:</p> <pre><code>using System;\nusing System.Collections.Generic;\n\nclass Program\n{\n    static void Main()\n    {\n        // Skapa och initiera en lista\n        List&lt;string&gt; fruits = new List&lt;string&gt; { \"Apple\", \"Banana\", \"Cherry\" };\n\n        // L\u00e4gg till ett element\n        fruits.Add(\"Date\");\n\n        // Skriv ut alla element\n        foreach (var fruit in fruits)\n        {\n            Console.WriteLine(fruit);\n        }\n\n        // Kontrollera om ett element finns\n        if (fruits.Contains(\"Banana\"))\n        {\n            Console.WriteLine(\"Banana finns i listan!\");\n        }\n\n        // Ta bort ett element\n        fruits.Remove(\"Apple\");\n\n        // Skriv ut listan efter borttagning\n        Console.WriteLine(\"Efter borttagning:\");\n        foreach (var fruit in fruits)\n        {\n            Console.WriteLine(fruit);\n        }\n    }\n}\n</code></pre> <p>Utskrift:</p> <pre><code>Apple\nBanana\nCherry\nDate\nBanana finns i listan!\nEfter borttagning:\nBanana\nCherry\nDate\n</code></pre>"},{"location":"content/modul-5/2-dictionaries/","title":"Dictionaries","text":""},{"location":"content/modul-5/2-dictionaries/#dictionary","title":"Dictionary&lt;&gt;","text":"<p>I C# \u00e4r en Dictionary&lt;&gt; en samling som lagrar nyckel-v\u00e4rde-par. Det \u00e4r en generisk datastruktur d\u00e4r varje unikt nyckelobjekt (key) kopplas ihop med ett specifikt v\u00e4rdeobjekt (value). </p> <p>Dictionary \u00e4r mycket effektivt n\u00e4r det g\u00e4ller att s\u00f6ka efter v\u00e4rden baserat p\u00e5 nycklar. </p> <p>En dictionary \u00e4r inte indexerad, allts\u00e5 kan man inte arbeta med index f\u00f6r de olika elementen, utan arbetar med deras \"nycklar\" ist\u00e4llet.</p>"},{"location":"content/modul-5/2-dictionaries/#deklarera-och-initiera-en-dictionary","title":"Deklarera och initiera en Dictionary","text":"<p>F\u00f6r att skapa en dictionary anges datatyperna f\u00f6r b\u00e5de nycklar och v\u00e4rden inom olikhetstecken &lt;&gt;.</p> <pre><code>// Skapa en dictionary med str\u00e4ngar som nycklar och heltal som v\u00e4rden\n// Den f\u00f6rsta datatypen i &lt;&gt; anger nyckelns typ, och den andra anger v\u00e4rdets typ\nDictionary&lt;string, int&gt; ages = new Dictionary&lt;string, int&gt;();\n\n// Skapa och initiera en dictionary direkt\nDictionary&lt;int, string&gt; cities = new Dictionary&lt;int, string&gt;\n{\n    { 1, \"Stockholm\" },\n    { 2, \"G\u00f6teborg\" },\n    { 3, \"Malm\u00f6\" }\n};\n</code></pre> <p>Tips</p> <p>Anv\u00e4nd Dictionary&lt;&gt; n\u00e4r du beh\u00f6ver lagra data som kan s\u00f6kas upp snabbt med unika nycklar. Dictionary \u00e4r mycket effektiv f\u00f6r att hantera stora m\u00e4ngder data.</p>"},{"location":"content/modul-5/2-dictionaries/#lagga-till-och-atkomst-till-element","title":"L\u00e4gga till och \u00e5tkomst till element","text":""},{"location":"content/modul-5/2-dictionaries/#lagga-till-element","title":"L\u00e4gga till element","text":"<p>Anv\u00e4nd metoden <code>Add()</code> f\u00f6r att l\u00e4gga till nyckel-v\u00e4rde-par.</p> <pre><code>Dictionary&lt;string, int&gt; ages = new Dictionary&lt;string, int&gt;();\nages.Add(\"Alice\", 25); // L\u00e4gger till nyckeln \"Alice\" med v\u00e4rdet 25\n</code></pre> <p>Du kan \u00e4ven l\u00e4gga till element, eller uppdatera dess v\u00e4rde via dess nyckel.</p> <pre><code>// L\u00e4gger till eller uppdaterar nyckeln \"Bob\" till v\u00e4rdet 30\nages[\"Bob\"] = 30; \n</code></pre>"},{"location":"content/modul-5/2-dictionaries/#atkomst-till-varden","title":"\u00c5tkomst till v\u00e4rden","text":"<p>F\u00f6r att komma \u00e5t ett v\u00e4rde anv\u00e4nds nyckeln.</p> <pre><code>// Sparar v\u00e4rdet fr\u00e5n nycklen \"Alice\" i en int\nint age = ages[\"Alice\"]; // Ger v\u00e4rdet 25\n</code></pre>"},{"location":"content/modul-5/2-dictionaries/#kontrollera-om-en-nyckel-finns","title":"Kontrollera om en nyckel finns","text":"<p>Du kan kontrollera om en nyckel finns med metoden <code>ContainsKey()</code>:</p> <pre><code>if (ages.ContainsKey(\"Charlie\"))\n{\n    Console.WriteLine(\"Nyckeln 'Charlie' finns i dictionary!\");\n}\n</code></pre>"},{"location":"content/modul-5/2-dictionaries/#ta-bort-element","title":"Ta bort element","text":"<p>Anv\u00e4nd metoden <code>Remove()</code> f\u00f6r att ta bort ett nyckel-v\u00e4rde-par:</p> <pre><code>ages.Remove(\"Alice\"); // Tar bort nyckeln \"Alice\" och dess v\u00e4rde\n</code></pre>"},{"location":"content/modul-5/2-dictionaries/#iterera-over-en-dictionary","title":"Iterera \u00f6ver en Dictionary","text":"<p>Du kan iterera \u00f6ver en dictionary med en <code>foreach</code>-loop. Varje element i dictionary \u00e4r ett KeyValuePair. Notera att det inte g\u00e5r att anv\u00e4nda en <code>for</code>-loop eftersom dictionary saknar indexering:</p> <pre><code>foreach (var kvp in cities)\n{\n    Console.WriteLine($\"Nyckel: {kvp.Key}, V\u00e4rde: {kvp.Value}\");\n}\n</code></pre>"},{"location":"content/modul-5/2-dictionaries/#vanliga-metoder-och-egenskaper","title":"Vanliga metoder och egenskaper","text":""},{"location":"content/modul-5/2-dictionaries/#count","title":"Count","text":"<p>Returnerar antalet element i dictionary:</p> <pre><code>int antal = cities.Count;\n</code></pre>"},{"location":"content/modul-5/2-dictionaries/#trygetvalue","title":"TryGetValue","text":"<p>En s\u00e4krare metod f\u00f6r att h\u00e4mta v\u00e4rden:</p> <pre><code>if (ages.TryGetValue(\"Bob\", out int age))\n{\n    Console.WriteLine($\"Bobs \u00e5lder \u00e4r {age}.\");\n}\nelse\n{\n    Console.WriteLine(\"Bob finns inte i dictionary.\");\n}\n</code></pre>"},{"location":"content/modul-5/2-dictionaries/#keys-och-values","title":"Keys och Values","text":"<p>Returnerar alla nycklar respektive v\u00e4rden som en samling, exempelvis en array eller lista.</p> <pre><code>int[] keys = cities.Keys.ToArray(); // Konverterar nycklarna till en array\nList&lt;string&gt; values = cities.Values.ToList(); // Konverterar v\u00e4rdena till en lista\n\nforeach (int key in keys)\n{\n    Console.WriteLine($\"Nyckel: {key}\");\n}\n\nforeach (string value in values)\n{\n    Console.WriteLine($\"V\u00e4rde: {value}\");\n}\n</code></pre>"},{"location":"content/modul-5/2-dictionaries/#exempelprogram","title":"Exempelprogram","text":"<p>F\u00f6ljande program demonstrerar flera vanliga operationer med en dictionary.</p> <pre><code>using System;\nusing System.Collections.Generic;\n\nclass Program\n{\n    static void Main()\n    {\n        // Skapa och initiera en dictionary\n        Dictionary&lt;string, int&gt; ages = new Dictionary&lt;string, int&gt;\n        {\n            { \"Alice\", 25 },\n            { \"Bob\", 30 },\n            { \"Charlie\", 35 }\n        };\n\n        // L\u00e4gg till ett element\n        ages[\"Diana\"] = 40;\n\n        // Iterera \u00f6ver dictionary\n        foreach (var kvp in ages)\n        {\n            Console.WriteLine($\"Namn: {kvp.Key}, \u00c5lder: {kvp.Value}\");\n        }\n\n        // Kontrollera om en nyckel finns\n        if (ages.ContainsKey(\"Alice\"))\n        {\n            Console.WriteLine(\"Alice finns i dictionary!\");\n        }\n\n        // Ta bort ett element\n        ages.Remove(\"Bob\");\n\n        // Skriv ut efter borttagning\n        Console.WriteLine(\"Efter borttagning:\");\n        foreach (var kvp in ages)\n        {\n            Console.WriteLine($\"Namn: {kvp.Key}, \u00c5lder: {kvp.Value}\");\n        }\n    }\n}\n</code></pre> <p>Utskrift:</p> <pre><code>Namn: Alice, \u00c5lder: 25\nNamn: Bob, \u00c5lder: 30\nNamn: Charlie, \u00c5lder: 35\nNamn: Diana, \u00c5lder: 40\nAlice finns i dictionary!\nEfter borttagning:\nNamn: Alice, \u00c5lder: 25\nNamn: Charlie, \u00c5lder: 35\nNamn: Diana, \u00c5lder: 40\n</code></pre>"},{"location":"content/modul-5/3-ref-v%C3%A4rdetyp/","title":"Referenstyp och v\u00e4rdetyp","text":"<p>I C# kan datatyper delas in i tv\u00e5 huvudkategorier, v\u00e4rdetyper och referenstyper. </p>"},{"location":"content/modul-5/3-ref-v%C3%A4rdetyp/#vardetyp","title":"V\u00e4rdetyp","text":"<p>En v\u00e4rdetyp lagrar sitt faktiska v\u00e4rde direkt i minnet d\u00e4r variabeln deklareras. Om en v\u00e4rdetyp kopieras (t.ex. till en annan variabel) skapas en ny, oberoende kopia av v\u00e4rdet. Till v\u00e4rdetyperna r\u00e4knas de enkla datatyperna t.ex. <code>int</code>, <code>double</code>, <code>float</code>, <code>bool</code>, <code>char</code> (structs och enums, mer specifikt).</p> <p>Exempel f\u00f6r v\u00e4rdetyp n\u00e4r en variabel tilldelas v\u00e4rde fr\u00e5n en annan variabel. <pre><code>int a = 10;\nint b = a; // b f\u00e5r en kopia av v\u00e4rdet i a\nb = 20;\n\nConsole.WriteLine(a); // Utskrift: 10 (a \u00e4r of\u00f6r\u00e4ndrad)\nConsole.WriteLine(b); // Utskrift: 20\n</code></pre> Eftersom <code>b</code> fick en kopia av <code>a</code>, \u00e4ndras inte <code>a</code> om vi \u00e4ndrar <code>b</code>.</p>"},{"location":"content/modul-5/3-ref-v%C3%A4rdetyp/#referenstyp","title":"Referenstyp","text":"<p>En referenstyp lagrar en referens (adressen) till ett objekt i minnet, snarare \u00e4n sj\u00e4lva objektet. Om en referenstyp kopieras skapas en ny referens till samma objekt, inte en oberoende kopia av objektet. Till referenstyperna r\u00e4knas bland annat alla arrayer och klasser.</p> <pre><code>int[] arr1 = { 1, 2, 3 };\nint[] arr2 = arr1; // arr2 pekar p\u00e5 samma objekt som arr1\n\narr2[0] = 99;\n\nConsole.WriteLine(arr1[0]); // Utskrift: 99 (arr1 p\u00e5verkas)\nConsole.WriteLine(arr2[0]); // Utskrift: 99\n</code></pre> <p>B\u00e5de <code>arr1</code> och <code>arr2</code> pekar p\u00e5 samma objekt i minnet, s\u00e5 \u00e4ndringar via en referens \u00e5terspeglas i den andra.</p> <p>Notera att <code>string</code> \u00e4r en klass, och d\u00e4rmed av referenstyp. D\u00e4remot  fungerar den som en v\u00e4rdetyp eftersom den \u00e4r of\u00f6r\u00e4nderlig (immutable). Det betyder att varje \u00e4ndring av en <code>string</code> skapar en ny instans i minnet, vilket skiljer sig fr\u00e5n hur andra referenstyper beter sig.</p>"},{"location":"content/modul-5/3-ref-v%C3%A4rdetyp/#skillnader-mellan-vardetyp-och-referenstyp","title":"Skillnader mellan v\u00e4rdetyp och referenstyp","text":"<p>En v\u00e4rdetyp lagrar sitt faktiska v\u00e4rde direkt i minnet d\u00e4r variabeln deklareras. N\u00e4r en v\u00e4rdetyp kopieras, skapas en oberoende kopia av v\u00e4rdet. Det inneb\u00e4r att \u00e4ndringar i en kopia inte p\u00e5verkar den ursprungliga variabeln. Exempel p\u00e5 v\u00e4rdetyper \u00e4r <code>int</code>, <code>double</code>, och <code>bool</code>.</p> <p>En referenstyp lagrar d\u00e4remot en referens (adressen) till ett objekt i minnet, snarare \u00e4n sj\u00e4lva objektet. N\u00e4r en referenstyp kopieras, skapas en ny referens till samma objekt, inte en oberoende kopia av objektet. Det inneb\u00e4r att \u00e4ndringar via en referens \u00e5terspeglas i andra referenser som pekar p\u00e5 samma objekt. Exempel p\u00e5 referenstyper \u00e4r <code>string</code>, <code>List&lt;&gt;</code>, och arrayer.</p> <p>Tips</p> <p>En f\u00f6rdel med referenstyper \u00e4r att de kan g\u00f6ra det enklare att arbeta med metoder som modifierar data. </p> <p>Om en metod tar emot en referens till en array eller lista, kan metoden \u00e4ndra inneh\u00e5llet direkt utan att beh\u00f6va returnera en ny kopia. Detta \u00e4r effektivt vid arbete med stora datastrukturer.</p>"},{"location":"content/modul-5/3-ref-v%C3%A4rdetyp/#skapa-en-unik-kopia-av-en-array","title":"Skapa en unik kopia av en array","text":"<p>Om du beh\u00f6ver skapa en oberoende kopia av en array kan detta g\u00f6ras p\u00e5 olika s\u00e4tt. Nedan f\u00f6ljer tv\u00e5 vanliga metoder.</p>"},{"location":"content/modul-5/3-ref-v%C3%A4rdetyp/#1-anvanda-clone","title":"1. Anv\u00e4nda <code>Clone()</code>","text":"<p>Metoden <code>Clone()</code> skapar en ytlig kopia av arrayen. Detta inneb\u00e4r att elementv\u00e4rdena kopieras, men om arrayen inneh\u00e5ller referenstyper pekar kopian p\u00e5 samma objekt.</p> <pre><code>int[] original = { 10, 20, 30 };\n\n// Anv\u00e4nd Clone(), typecasta till en int-array\nint[] shallowCopy = (int[])original.Clone();\n\n// Tilldela f\u00f6rsta elementet i kopian v\u00e4rdet 99\nshallowCopy[0] = 99;\n\nConsole.WriteLine(original[0]); // Utskrift: 10\nConsole.WriteLine(shallowCopy[0]); // Utskrift: 99\n</code></pre>"},{"location":"content/modul-5/3-ref-v%C3%A4rdetyp/#2-iterera-och-kopiera-varden-manuellt","title":"2. Iterera och kopiera v\u00e4rden manuellt","text":"<p>Genom att iterera \u00f6ver arrayen och kopiera varje element skapas en djup kopia.</p> <pre><code>int[] original = { 10, 20, 30 };\nint[] deepCopy = new int[original.Length];\n\n// G\u00e5 igenom arrayen och s\u00e4tt v\u00e4rdet p\u00e5 kopian till respektive v\u00e4rde fr\u00e5n f\u00f6rsta arrayen\nfor (int i = 0; i &lt; original.Length; i++)\n{\n    deepCopy[i] = original[i];\n}\n\n// S\u00e4tt v\u00e4rdet p\u00e5 f\u00f6rsta elementet i kopian till 99\ndeepCopy[0] = 99;\n\nConsole.WriteLine(original[0]); // Utskrift: 10\nConsole.WriteLine(deepCopy[0]); // Utskrift: 99\n</code></pre>"},{"location":"content/modul-5/3-ref-v%C3%A4rdetyp/#viktigt-att-tanka-pa","title":"Viktigt att t\u00e4nka p\u00e5","text":"<p>Referenstyper kan leda till of\u00f6rutsedda \u00e4ndringar i kod om flera referenser pekar p\u00e5 samma objekt. Anv\u00e4nd kopieringsmetoder som <code>Clone()</code> eller iterera manuellt om du beh\u00f6ver oberoende kopior.</p> <p>Tips</p> <p>V\u00e4rdetyper \u00e4r som att ge n\u00e5gon en kopia av ett papper, medan referenstyper \u00e4r som att ge personen en lives\u00e4ndning av det ursprungliga pappret, som d\u00e5 allts\u00e5 \u00e4ndras i realtid.</p> <p>S\u00e5h\u00e4r i efterhand \u00e4r jag inte imponerad av min egen liknelse...</p>"},{"location":"content/modul-5/begrepp5/","title":"Begrepp - Modul 5","text":""},{"location":"content/modul-5/begrepp5/#list","title":"List","text":"<p>Lista: En samling objekt som kan inneh\u00e5lla olika antal element och kan f\u00f6r\u00e4ndras dynamiskt. </p> <p>Generisk datastruktur: En datastruktur som kan hantera objekt av olika typer utan att beh\u00f6va skapa separata strukturer f\u00f6r varje typ.</p> <p>Element: Ett enskilt objekt som lagras i listan, t.ex. en str\u00e4ng, ett heltal eller ett objekt.</p> <p>Add(): En metod f\u00f6r att l\u00e4gga till ett element l\u00e4ngst ner i en lista.</p>"},{"location":"content/modul-5/begrepp5/#dictionary","title":"Dictionary","text":"<p>KeyValuePair: En datatyp som representerar en kombination av en nyckel och dess associerade v\u00e4rde.</p> <p>Nyckel: Ett unikt identifierande v\u00e4rde som anv\u00e4nds f\u00f6r att hitta motsvarande v\u00e4rde i ett nyckel/v\u00e4rde-par i en <code>Dictionary</code>.</p> <p>V\u00e4rde: Det data som \u00e4r kopplat till en nyckel i en <code>Dictionary</code>.</p> <p>Foreach: En loop som anv\u00e4nds f\u00f6r att iterera \u00f6ver alla nyckel/v\u00e4rde-par i en <code>Dictionary</code>.</p> <p>ContainsKey(): En metod som anv\u00e4nds f\u00f6r att kontrollera om en viss nyckel finns i en <code>Dictionary</code>.</p> <p>TryGetValue(): F\u00f6rs\u00f6ker h\u00e4mta v\u00e4rdet som motsvarar en nyckel och returnerar en bool som anger om det lyckades.</p>"},{"location":"content/modul-5/begrepp5/#referenstyp-och-vardetyp","title":"Referenstyp och v\u00e4rdetyp","text":"<p>V\u00e4rdetyp: En datatyp d\u00e4r variabeln direkt lagrar sitt v\u00e4rde i minnet, t.ex. <code>int</code>, <code>double</code>, och <code>bool</code>. De lagras p\u00e5 stacken.</p> <p>Referenstyp: En datatyp d\u00e4r variabeln lagrar en referens till ett v\u00e4rde som finns p\u00e5 heapen, t.ex. <code>string</code>, <code>array</code> och objekt av klasser.</p> <p>Of\u00f6r\u00e4nderlig (immutable): Ett objekt vars tillst\u00e5nd inte kan \u00e4ndras efter det att det skapats, t.ex. en <code>string</code> i C#.</p> <p>Clone(): En metod som skapar en kopia av ett objekt. Den nya kopian \u00e4r en separat instans och p\u00e5verkas inte av f\u00f6r\u00e4ndringar p\u00e5 originalet.</p>"},{"location":"content/modul-5/l%C3%B6sn5/","title":"L\u00f6sningsf\u00f6rslag - Modul 5","text":"<p>Saknas.</p>"},{"location":"content/modul-5/uppg5/","title":"\u00d6vningsuppgifter - Modul 5","text":"<p>Ej tillverkade.</p>"},{"location":"content/modul-6/1-klasser-objekt-intro/","title":"Klasser och objekt - introduktion","text":""},{"location":"content/modul-6/1-klasser-objekt-intro/#vad-ar-en-klass-och-ett-objekt","title":"Vad \u00e4r en klass och ett objekt?","text":"<p>En klass \u00e4r en mall f\u00f6r att skapa objekt. Den definierar vilka egenskaper (data) och beteenden (metoder) ett objekt ska ha.</p> <p>En klass kan liknas vid en ritning f\u00f6r n\u00e5got \u2013 exempelvis en bil. Ritningen beskriver att en bil har en f\u00e4rg, en motor och kan k\u00f6ra. Men sj\u00e4lva bilarna existerar inte f\u00f6rr\u00e4n de skapas baserat p\u00e5 ritningen.</p> <p>Ett objekt \u00e4r en faktisk instans av en klass. - En klass definierar hur n\u00e5got ska fungera, medan objekten \u00e4r de konkreta exemplaren av den klassen. - Om klassen \u00e4r en ritning f\u00f6r en bil, s\u00e5 \u00e4r varje objekt en faktisk bil med sina egna egenskaper, t.ex. en r\u00f6d bil och en bl\u00e5 bil.</p>"},{"location":"content/modul-6/1-klasser-objekt-intro/#fordelar-med-klasser-och-objekt","title":"F\u00f6rdelar med klasser och objekt","text":"<ul> <li>Struktur och organisering \u2013 Klasser hj\u00e4lper till att h\u00e5lla koden mer organiserad och \u00e5teranv\u00e4ndbar.</li> <li>Modularitet \u2013 Separata klasser f\u00f6r olika delar av ett program g\u00f6r utveckling och underh\u00e5ll enklare.</li> <li>\u00c5teranv\u00e4ndbarhet \u2013 N\u00e4r en klass \u00e4r definierad kan flera objekt skapas fr\u00e5n den, vilket g\u00f6r koden mer flexibel.</li> <li>Inkapsling \u2013 Klasser m\u00f6jligg\u00f6r att interna detaljer d\u00f6ljs och endast relevant information exponeras.</li> </ul>"},{"location":"content/modul-6/1-klasser-objekt-intro/#filstruktur-och-namngivning","title":"Filstruktur och namngivning","text":"<p>Det \u00e4r praxis att skapa en ny fil f\u00f6r varje ny klass f\u00f6r att h\u00e5lla koden strukturerad och l\u00e4tt att hantera.</p> <p>Varje klass ska ha samma namn som filen, med inledande versal. Exempel: filen <code>Bil.cs</code> inneh\u00e5ller klassen <code>Bil</code>.</p> <p>Metoder i klassen ska ocks\u00e5 b\u00f6rja med stor bokstav, enligt PascalCase-konventionen.   <pre><code>public void S\u00e4ttHastighet(int nyHastighet) \n{ \n  // Metodens kod h\u00e4r inne...\n}\n</code></pre></p> <p>Sammanfattning</p> <ul> <li>En klass \u00e4r en mall f\u00f6r att skapa objekt.</li> <li>Ett objekt \u00e4r en instans av en klass och har sina egna egenskaper.</li> <li>Klasser bidrar till en mer organiserad, modulariserad och \u00e5teranv\u00e4ndbar kod.</li> <li>Det \u00e4r praxis att skapa en ny fil per klass, och PascalCase anv\u00e4nds f\u00f6r namngivning.</li> </ul>"},{"location":"content/modul-6/1-klasser-objekt-intro/#klassmedlemmar","title":"Klassmedlemmar","text":"<p>En klass kan inneh\u00e5lla b\u00e5de variabler (f\u00e4lt) och metoder, som tillsammans kallas klassmedlemmar. Variabler anv\u00e4nds f\u00f6r att lagra information om objektet, medan metoder definierar dess beteenden.</p> <p>F\u00f6r att skydda data och f\u00f6rhindra oavsiktliga \u00e4ndringar s\u00e4tts f\u00e4lt som private. Metoder kan d\u00e4remot vara public om de beh\u00f6ver anv\u00e4ndas utanf\u00f6r klassen, vilket m\u00f6jligg\u00f6r en kontrollerad \u00e5tkomst till objektets data.</p> <p>Detta leder till en viktig princip inom objektorienterad programmering: inkapsling.</p> <p>Inkapsling inneb\u00e4r att vissa delar av en klass \u00e4r dolda fr\u00e5n resten av programmet. Genom att anv\u00e4nda private f\u00f6r variabler kan obeh\u00f6rig \u00e5tkomst f\u00f6rhindras, vilket skyddar data och minskar risken f\u00f6r oavsiktliga f\u00f6r\u00e4ndringar.</p> <p>Att begr\u00e4nsa \u00e5tkomsten till variabler g\u00f6r koden mer robust och l\u00e4ttare att underh\u00e5lla. Ist\u00e4llet f\u00f6r att direkt \u00e4ndra v\u00e4rden anv\u00e4nds metoder f\u00f6r att styra hur data manipuleras, vilket g\u00f6r det m\u00f6jligt att l\u00e4gga till logik, som exempelvis validering, innan en \u00e4ndring till\u00e5ts.</p> <pre><code>class Bil\n{\n    private int hastighet; // Kan bara \u00e4ndras inuti klassen\n\n    public void S\u00e4ttHastighet(int nyHastighet)\n    {\n        if (nyHastighet &gt; 0)\n            hastighet = nyHastighet;\n    }\n\n    public int H\u00e4mtaHastighet()\n    {\n        return hastighet;\n    }\n}\n</code></pre> <p>Om <code>hastighet</code> f\u00f6rs\u00f6ker n\u00e5s direkt utanf\u00f6r klassen, uppst\u00e5r ett fel: <pre><code>Bil minBil = new Bil();\n// minBil.hastighet = 120;  // FEL: hastighet \u00e4r privat!\n</code></pre></p> <p>Normalt sett lagras variabler individuellt f\u00f6r varje objekt. Men ibland vill man att en variabel eller metod ska delas av alla instanser \u2013 d\u00e5 anv\u00e4nds <code>static</code>.</p> <p>Sammanfattning</p> <ul> <li>En klass kan ha variabler (f\u00e4lt) f\u00f6r att lagra information och metoder f\u00f6r att definiera beteenden.</li> <li><code>private</code> skyddar variabler fr\u00e5n direkt \u00e5tkomst utanf\u00f6r klassen.</li> <li><code>public</code> g\u00f6r att metoder eller variabler kan anropas externt.</li> <li>Inkapsling bidrar till att kontrollera hur objekt hanteras och \u00e4ndras.</li> </ul>"},{"location":"content/modul-6/1-klasser-objekt-intro/#skapa-och-anvanda-en-instans-i-main","title":"Skapa och Anv\u00e4nda en Instans i <code>Main()</code>","text":"<p>Efter att en klass \u00e4r definierad kan en instans/ett objekt skapas och anv\u00e4ndas i <code>Main()</code>. Notera att nyckelordet <code>new</code> anv\u00e4nds f\u00f6r detta.</p> <pre><code>class Program\n{\n    static void Main()\n    {\n        // G\u00f6r ett nytt objekt, en instans, av klassen Bil\n        Bil minBil = new Bil(); \n\n        // Anropar metoden via objektet\n        minBil.S\u00e4ttHastighet(120);\n\n        Console.WriteLine(\"Bilens hastighet: \" +  minBil.H\u00e4mtaHastighet()); // Ger utskriften \"Bilens hastighet: 120\"\n    }\n}\n</code></pre>"},{"location":"content/modul-6/2-konstruktorer/","title":"Konstruktorer","text":"<p>ATT G\u00d6RA: Se \u00f6ver klasser och objekt....</p>"},{"location":"content/modul-6/2-konstruktorer/#vad-ar-en-konstruktor","title":"Vad \u00e4r en konstruktor?","text":"<p>En konstruktor \u00e4r en speciell metod i en klass som anropas automatiskt n\u00e4r ett objekt skapas. Dess huvudsakliga syfte \u00e4r att s\u00e4tta startv\u00e4rden f\u00f6r objektets variabler och s\u00e4kerst\u00e4lla att objektet \u00e4r i ett giltigt tillst\u00e5nd direkt vid skapandet.</p> <p>Varje klass i C# har alltid en standardkonstruktor, \u00e4ven om den inte skrivs ut. Denna konstruktor \u00e4r tom och g\u00f6r ingenting, men den g\u00f6r det m\u00f6jligt att skapa instanser av klassen utan att beh\u00f6va ange n\u00e5gra parametrar.</p> <pre><code>class Bil\n{\n    private int hastighet;\n    private string f\u00e4rg;\n\n    // Standardkonstruktor - men vi har lagt till tilldelning f\u00f6r f\u00e4rg och hastighet\n    public Bil()\n    {\n        hastighet = 50;\n        f\u00e4rg = \"Vit\";\n    }\n\n    // Konstruktor med endast f\u00e4rg\n    public Bil(string f\u00e4rg)\n    {\n        hastighet = 50; // Standardhastighet\n        this.f\u00e4rg = f\u00e4rg;\n    }\n\n    // Konstruktor med b\u00e5de hastighet och f\u00e4rg\n    public Bil(int hastighet, string f\u00e4rg)\n    {\n        this.hastighet = hastighet;\n        this.f\u00e4rg = f\u00e4rg;\n    }\n}\n\n// Anv\u00e4ndning av konstruktorerna ute i Main()\nclass Program\n{\n    static void Main()\n    {\n        Bil bil1 = new Bil(); // Standardv\u00e4rden\n        Bil bil2 = new Bil(\"Bl\u00e5\"); // Standardhastighet, men bl\u00e5 f\u00e4rg\n        Bil bil3 = new Bil(120, \"R\u00f6d\"); // Anpassade v\u00e4rden\n    }\n}\n</code></pre> <p>I m\u00e5nga fall vill vi dock f\u00f6rhindra att objekt skapas utan vissa viktiga v\u00e4rden. T\u00e4nk dig en bil utan en f\u00e4rg eller en hastighet \u2013 det skulle vara ologiskt! Genom att skapa en egen konstruktor kan vi s\u00e4kerst\u00e4lla att alla objekt f\u00e5r en korrekt startupps\u00e4ttning av data direkt vid skapandet.</p> <p>En konstruktor \u00e4r en speciell metod i en klass som anropas automatiskt n\u00e4r ett objekt skapas. Dess huvudsakliga syfte \u00e4r att s\u00e4tta startv\u00e4rden f\u00f6r objektets variabler och s\u00e4kerst\u00e4lla att objektet \u00e4r i ett giltigt tillst\u00e5nd direkt vid skapandet.</p>"},{"location":"content/modul-6/2-konstruktorer/#exempel-utan-konstruktor","title":"Exempel utan konstruktor","text":"<p>Utan en konstruktor m\u00e5ste varje objekt initialiseras manuellt: <pre><code>class Bil\n{\n    private int hastighet;\n    private string f\u00e4rg;\n\n    public void S\u00e4ttHastighet(int nyHastighet)\n    {\n        hastighet = nyHastighet;\n    }\n\n    public void S\u00e4ttF\u00e4rg(string nyF\u00e4rg)\n    {\n        f\u00e4rg = nyF\u00e4rg;\n    }\n}\n\nclass Program\n{\n    static void Main()\n    {\n        Bil minBil = new Bil();\n        minBil.S\u00e4ttHastighet(100);\n        minBil.S\u00e4ttF\u00e4rg(\"R\u00f6d\");\n    }\n}\n</code></pre></p>"},{"location":"content/modul-6/2-konstruktorer/#exempel-med-konstruktor","title":"Exempel med konstruktor","text":"<p>N\u00e4r en konstruktor har parametrar som har samma namn som klassens f\u00e4lt anv\u00e4nds <code>this</code> f\u00f6r att skilja dem \u00e5t. <code>this</code> refererar till klassens egna variabler och g\u00f6r att vi kan tilldela f\u00e4lt r\u00e4tt v\u00e4rden utan att det blir otydligt.</p> <p>En konstruktor g\u00f6r att objektet f\u00e5r sina startv\u00e4rden direkt vid skapandet: <pre><code>class Bil\n{\n    private int hastighet;\n    private string f\u00e4rg;\n\n    // Konstruktor\n    public Bil(int hastighet, string f\u00e4rg)\n    {\n        // `this` anv\u00e4nds f\u00f6r att referera till klassens egna f\u00e4lt\n        this.hastighet = hastighet;\n        this.f\u00e4rg = f\u00e4rg;\n    }\n}\n\nclass Program\n{\n    static void Main()\n    {\n        Bil minBil = new Bil(100, \"R\u00f6d\");\n    }\n}\n</code></pre></p> <p>[!tip] Tips Om parametrarna har andra namn \u00e4n f\u00e4lten, t.ex. <code>hastighetIn</code> ist\u00e4llet f\u00f6r <code>hastighet</code>, beh\u00f6vs inte <code>this</code>. Men det \u00e4r en vanlig praxis att anv\u00e4nda <code>this</code> n\u00e4r parametern har samma namn som f\u00e4ltet, f\u00f6r att h\u00e5lla koden tydlig och konsekvent.</p> <p>[!summary] Sammanfattning - En konstruktor anropas automatiskt n\u00e4r ett objekt skapas. - Den anv\u00e4nds f\u00f6r att ge objektet startv\u00e4rden direkt vid skapandet. - Konstruktorer minskar risken f\u00f6r inkonsekventa objekt.</p>"},{"location":"content/modul-6/2-konstruktorer/#standardvarden-och-felkontroll","title":"Standardv\u00e4rden och felkontroll","text":"<p>En konstruktor kan ocks\u00e5 anv\u00e4ndas f\u00f6r att f\u00f6rhindra ogiltiga v\u00e4rden genom att s\u00e4tta standardv\u00e4rden.</p> <pre><code>class Bil\n{\n    private int hastighet;\n    private string f\u00e4rg;\n\n    public Bil(int hastighet, string f\u00e4rg)\n    {\n        // S\u00e4tt standardv\u00e4rden om indata \u00e4r ogiltig\n        if (hastighet &gt; 0)\n        {\n            this.hastighet = hastighet;\n        }\n        else\n        {\n            this.hastighet = 50;\n        }\n        // Samma koncept f\u00f6r f\u00e4rg\n        if (!string.IsNullOrEmpty(f\u00e4rg))\n        {\n            this.f\u00e4rg = f\u00e4rg;\n        }\n        else\n        {\n            this.f\u00e4rg = \"Vit\";\n        }\n    }\n}\n</code></pre>"},{"location":"content/modul-6/2-konstruktorer/#konstruktoroverlagring","title":"Konstruktor\u00f6verlagring","text":"<p>C# till\u00e5ter \u00f6verlagrade konstrukt\u00f6rer, vilket inneb\u00e4r att en klass kan ha flera olika konstrukt\u00f6rer med olika parametrar. Detta g\u00f6r det m\u00f6jligt att skapa objekt p\u00e5 olika s\u00e4tt beroende p\u00e5 vad som \u00e4r k\u00e4nt vid skapandet.</p> <pre><code>class Bil\n{\n    private int hastighet;\n    private string f\u00e4rg;\n\n    // Standardkonstruktor\n    public Bil()\n    {\n        hastighet = 50;\n        f\u00e4rg = \"Vit\";\n    }\n\n    // Konstruktor med endast f\u00e4rg\n    public Bil(string f\u00e4rg)\n    {\n        hastighet = 50; // Standardhastighet\n        this.f\u00e4rg = f\u00e4rg;\n    }\n\n    // Konstruktor med b\u00e5de hastighet och f\u00e4rg\n    public Bil(int hastighet, string f\u00e4rg)\n    {\n        this.hastighet = hastighet;\n        this.f\u00e4rg = f\u00e4rg;\n    }\n}\n\nclass Program\n{\n    static void Main()\n    {\n        Bil bil1 = new Bil(); // Standardv\u00e4rden\n        Bil bil2 = new Bil(\"Bl\u00e5\"); // Standardhastighet, men bl\u00e5 f\u00e4rg\n        Bil bil3 = new Bil(120, \"R\u00f6d\"); // Anpassade v\u00e4rden\n    }\n}\n</code></pre>"},{"location":"content/modul-6/2-konstruktorer/#this-och-kedjade-konstruktorer","title":"<code>this</code> och kedjade konstrukt\u00f6rer","text":"<p>Nyckelordet <code>this</code> anv\u00e4nds inom en klass f\u00f6r att referera till klassens egna medlemmar. Det anv\u00e4nds ocks\u00e5 f\u00f6r att anropa en annan konstruktor inom samma klass.</p> <pre><code>class Bil\n{\n    private int hastighet;\n    private string f\u00e4rg;\n\n    // Standardkonstruktor\n    public Bil() : this(50, \"Vit\") \n    {\n        // Anropar huvudkonstruktorn med defaultv\u00e4rden\n    }\n\n    // Huvudkonstruktor\n    public Bil(int hastighet, string f\u00e4rg)\n    {\n        this.hastighet = hastighet;\n        this.f\u00e4rg = f\u00e4rg;\n    }\n}\n</code></pre> <p>[!summary] Sammanfattning - <code>this</code> anv\u00e4nds f\u00f6r att referera till klassens egna variabler. - <code>this()</code> kan anropa en annan konstruktor i samma klass, vilket minskar koddupplikation.</p>"},{"location":"content/modul-6/2-konstruktorer/#statiska-medlemmar-i-klasser","title":"Statiska medlemmar i klasser","text":"<p>Ibland vill man att en variabel eller metod inte ska tillh\u00f6ra ett specifikt objekt, utan klassen i sig. D\u00e5 anv\u00e4nds nyckelordet <code>static</code>. Ett exempel \u00e4r en r\u00e4knare som h\u00e5ller koll p\u00e5 hur m\u00e5nga objekt som har skapats.</p> <pre><code>class Bil\n{\n    private static int antalBilar = 0; // Statisk variabel f\u00f6r att r\u00e4kna antalet bilar\n    private string f\u00e4rg;\n\n    public Bil(string f\u00e4rg)\n    {\n        this.f\u00e4rg = f\u00e4rg;\n        antalBilar++; // \u00d6kar varje g\u00e5ng en ny bil skapas\n    }\n\n    public static int H\u00e4mtaAntalBilar()\n    {\n        return antalBilar;\n    }\n}\n\nclass Program\n{\n    static void Main()\n    {\n        Bil bil1 = new Bil(\"R\u00f6d\");\n        Bil bil2 = new Bil(\"Bl\u00e5\");\n\n        Console.WriteLine(\"Antal skapade bilar: \" + Bil.H\u00e4mtaAntalBilar()); \n        // Utskrift: Antal skapade bilar: 2\n    }\n}\n</code></pre> <p>Eftersom <code>antalBilar</code> \u00e4r statisk (<code>static</code>), delas v\u00e4rdet mellan alla instanser. Man kan h\u00e4mta antalet skapade bilar utan att beh\u00f6va skapa ett objekt.</p>"},{"location":"content/modul-6/2-konstruktorer/#statiska-klasser-for-globala-installningar","title":"Statiska klasser f\u00f6r globala inst\u00e4llningar","text":"<p>I st\u00f6rre projekt anv\u00e4nds ofta statiska klasser f\u00f6r att lagra globala inst\u00e4llningar eller gemensamma funktioner. Exempelvis kan en klass inneh\u00e5lla konstanter eller metoder som anv\u00e4nds \u00f6verallt i programmet utan att beh\u00f6va skapa ett objekt.</p> <p>En klass beh\u00f6ver inte vara statisk f\u00f6r att ha statiska medlemmar. Om en klass \u00e4r <code>static</code>, g\u00e5r det inte att skapa objekt av den, vilket g\u00f6r den anv\u00e4ndbar f\u00f6r globala inst\u00e4llningar och hj\u00e4lpfunktioner.</p> <pre><code>static class Konfiguration\n{\n    public static readonly int MaxAnv\u00e4ndare = 100;\n}\n\nclass Program\n{\n    static void Main()\n    {\n        Console.WriteLine(\"Max antal anv\u00e4ndare: \" + Konfiguration.MaxAnv\u00e4ndare);\n    }\n}\n</code></pre> <p>Eftersom klassen \u00e4r <code>static</code>, kan dess medlemmar anv\u00e4ndas globalt utan att skapa en instans.</p> <p>[!tip] Exempel fr\u00e5n .NET En av de mest anv\u00e4nda statiska klasserna i .NET \u00e4r <code>Math</code>. Exempel: <pre><code>double rot = Math.Sqrt(16); // Returnerar 4\ndouble pi = Math.PI; // Konstanten \u03c0\n</code></pre></p> <p>[!summary] Sammanfattning - <code>static</code> g\u00f6r att en variabel eller metod tillh\u00f6r klassen ist\u00e4llet f\u00f6r enskilda objekt. - Statisk data delas mellan alla instanser. - Statiska metoder kan anropas direkt p\u00e5 klassen, utan att skapa ett objekt.</p>"},{"location":"content/modul-6/3-properties/","title":"Properties i C","text":""},{"location":"content/modul-6/3-properties/#vad-ar-en-property","title":"Vad \u00e4r en Property?","text":"<p>Tidigare har vi anv\u00e4nt metoder f\u00f6r att h\u00e4mta och s\u00e4tta v\u00e4rden. D\u00e4r man m\u00e5ste skriva separata <code>Get</code>- och <code>Set</code>-metoder, vilket g\u00f6r koden l\u00e4ngre.</p> <p>En property (egenskap) \u00e4r en mekanism i C# f\u00f6r att hantera \u00e5tkomst till en privat variabel i en klass. Properties anv\u00e4nds f\u00f6r att kontrollera hur data l\u00e4ses och skrivs, vilket \u00e4r en viktig del av inkapsling i objektorienterad programmering.</p> <p>En property best\u00e5r av en getter och en setter: <pre><code>class Bil\n{\n    // Privat f\u00e4lt\n    private int hastighet; \n\n    // Property\n    public int Hastighet \n    {\n        get { return hastighet; }\n        set \n        {\n            if (value &gt; 0) // Validering av v\u00e4rdet\n                hastighet = value;\n        }\n    }\n}\n</code></pre> Det finns f\u00f6rdelar med properties, exempelvis: </p> <ul> <li>Kortare och mer l\u00e4sbar kod \u2013 eliminerar behovet av separata getter- och setter-metoder.</li> <li>Inkapsling och kontroll \u2013 ser till att v\u00e4rden alltid s\u00e4tts och h\u00e4mtas enligt de regler vi definierat.</li> <li>Inbyggd validering \u2013 ist\u00e4llet f\u00f6r att skapa en separat metod f\u00f6r att validera data, kan det g\u00f6ras direkt i <code>set</code>-blocket.</li> </ul> <p>Tips</p> <p>Ja, jag f\u00f6rst\u00e5r att att det inte \u00e4r mer l\u00e4sbart f\u00f6rsta g\u00e5ngen man ser det... </p>"},{"location":"content/modul-6/3-properties/#exempel-pa-hur-en-property-anvands-i-main","title":"Exempel p\u00e5 hur en Property anv\u00e4nds i <code>Main()</code>","text":"<p>N\u00e4r en property har definierats kan den anv\u00e4ndas direkt i <code>Main()</code> f\u00f6r att s\u00e4tta och l\u00e4sa v\u00e4rden: <pre><code>class Program\n{\n    static void Main()\n    {\n        Bil minBil = new Bil();\n        minBil.Hastighet = 100; // Anv\u00e4nder propertyn f\u00f6r att s\u00e4tta v\u00e4rdet\n        Console.WriteLine(\"Bilens hastighet: \" + minBil.Hastighet); // L\u00e4ser v\u00e4rdet\n    }\n}\n</code></pre> Man anv\u00e4nder propertyn som en vanlig variabel, men med validering inbyggd!</p> <p>Namngivning</p> <p>En property b\u00f6r alltid ha stor bokstav i b\u00f6rjan och motsvara namnet p\u00e5 det privata f\u00e4ltet.</p>"},{"location":"content/modul-6/3-properties/#auto-properties","title":"Auto-Properties","text":"<p>Om ingen validering eller extra logik beh\u00f6vs, kan man anv\u00e4nda auto-properties, vilket g\u00f6r koden mer kompakt: <pre><code>class Bil\n{\n    public int Hastighet { get; set; } // Auto-property\n}\n</code></pre></p> <p>C# skapar automatiskt ett privat f\u00e4lt i bakgrunden, s\u00e5 att vi slipper skriva ut det manuellt.</p> <p>[!tip] N\u00e4r ska auto-properties anv\u00e4ndas? Om ingen validering beh\u00f6vs, \u00e4r auto-properties ett b\u00e4ttre alternativ \u00e4n att skapa ett privat f\u00e4lt + full property.</p>"},{"location":"content/modul-6/3-properties/#anropa-properties-i-konstruktorn","title":"Anropa Properties i Konstruktorn","text":"<p>F\u00f6r att skydda data med validering b\u00f6r propertyn alltid anv\u00e4ndas i konstruktorn ist\u00e4llet f\u00f6r att s\u00e4tta f\u00e4ltet direkt. </p> <ul> <li>Det s\u00e4kerst\u00e4ller att valideringen fr\u00e5n <code>set</code>-blocket \u00e5teranv\u00e4nds.</li> <li>Dubbel kod undviks och objektet skapas korrekt fr\u00e5n b\u00f6rjan.</li> </ul> <p>Genom att anv\u00e4nda propertyn i konstruktorn s\u00e4kerst\u00e4lls att valideringen anv\u00e4nds korrekt.</p> <p>Exempel \u2013 anv\u00e4nder propertyn i konstruktorn: <pre><code>class Bil\n{\n    // Privat f\u00e4lt\n    private int hastighet;\n\n    // Vanlig property, validering f\u00f6r set\n    public int Hastighet\n    {\n        get { return hastighet; }\n        set\n        {\n            if (value &gt; 0)\n                hastighet = value;\n        }\n    }\n\n    // Konstruktorn, tar inkommande v\u00e4rde och tilldelar till property\n    public Bil(int hastighetIn)\n    {\n        Hastighet = hastighetIn; // Anv\u00e4nder propertyn f\u00f6r att s\u00e4kerst\u00e4lla validering\n    }\n}\n</code></pre></p> <p>[!summary] Sammanfattning - Anv\u00e4nd alltid propertyn i konstruktorn, inte det privata f\u00e4ltet. - Detta s\u00e4kerst\u00e4ller att eventuell validering anv\u00e4nds konsekvent.</p>"},{"location":"content/modul-6/3-properties/#properties-utan-bade-get-och-set","title":"Properties utan b\u00e5de Get och Set","text":"<p>En property beh\u00f6ver inte alltid ha b\u00e5de <code>get</code> och <code>set</code>. </p>"},{"location":"content/modul-6/3-properties/#1-read-only-properties-endast-get","title":"1. Read-Only Properties (endast <code>get</code>)","text":"<p>Om ett v\u00e4rde aldrig ska \u00e4ndras utanf\u00f6r klassen, kan vi ha en property med bara <code>get</code>: <pre><code>class Bil\n{\n    public string F\u00e4rg { get; } // Auto-property med endast 'get', kan bara s\u00e4ttas i konstruktorn \n\n    public Bil(string f\u00e4rg)\n    {\n                F\u00e4rg = f\u00e4rg; // Propertyn kan endast s\u00e4ttas vid objektets skapande\n    }\n}\n</code></pre> Anv\u00e4nds f\u00f6r: ID:n, skapelsedatum, konstanta v\u00e4rden per objekt.</p>"},{"location":"content/modul-6/3-properties/#2-write-only-properties-endast-set","title":"2. Write-Only Properties (endast <code>set</code>)","text":"<p>Om en property bara ska kunna ta emot v\u00e4rden men inte l\u00e4sas ut, kan vi anv\u00e4nda bara <code>set</code>: <pre><code>class S\u00e4kerData\n{\n    private string l\u00f6senord; // Privat f\u00e4lt lagrar v\u00e4rdet internt\n\n        public string L\u00f6senord // Property med endast 'set', kan inte l\u00e4sas ut\n    {\n        set { l\u00f6senord = value; }\n    }\n}\n</code></pre> Anv\u00e4nds f\u00f6r: L\u00f6senord, k\u00e4nslig information d\u00e4r data bara ska kunna s\u00e4ttas.</p>"},{"location":"content/modul-6/3-properties/#private-set-skydda-properties-fran-att-andras-utanfor-klassen","title":"<code>private set;</code> \u2013 Skydda Properties fr\u00e5n att \u00e4ndras utanf\u00f6r klassen","text":"<p>En property kan ha en privat setter, vilket inneb\u00e4r att v\u00e4rdet kan s\u00e4ttas inuti klassen, men \u00e4r endast l\u00e4sbart utanf\u00f6r klassen. Detta anv\u00e4nds ofta f\u00f6r data som s\u00e4tts vid objektets skapande men inte ska kunna \u00e4ndras efter\u00e5t.</p> <p><pre><code>class Bil\n{\n    public int Id { get; private set; } // Kan bara s\u00e4ttas inom klassen\n\n    public Bil(int id)\n    {\n        Id = id;\n    }\n}\n</code></pre> Objekt kan tilldelas ett unikt ID, men ingen annan kod kan \u00e4ndra det efter att objektet skapats. G\u00e5r dock bra att titta p\u00e5 ID via <code>get</code>.</p> <p>[!tip] N\u00e4r anv\u00e4nds <code>private set;</code>? Det anv\u00e4nds ofta f\u00f6r ID-nummer och andra v\u00e4rden som ska s\u00e4ttas en g\u00e5ng vid skapande men aldrig \u00e4ndras efter\u00e5t. Om en property ska kunna s\u00e4ttas internt i klassen men bara l\u00e4sas externt, kan vi anv\u00e4nda <code>private set;</code>:</p> <p>[!summary] Sammanfattning - <code>get</code> utan <code>set</code> g\u00f6r en property read-only. - <code>set</code> utan <code>get</code> g\u00f6r en property write-only. - <code>private set;</code> g\u00f6r att propertyn bara kan s\u00e4ttas inuti klassen.</p>"},{"location":"content/modul-6/begrepp6/","title":"Begrepp - Modul 6","text":""},{"location":"content/modul-6/begrepp6/#allmant","title":"Allm\u00e4nt","text":"<p>Klass: En mall som definierar vilka egenskaper och metoder ett objekt ska ha.</p> <p>Objekt: En instans av en klass som har egna unika egenskaper och kan utf\u00f6ra handlingar definierade i klassen.</p> <p>Instans: En konkret representation av en klass som skapats med <code>new</code>.</p>"},{"location":"content/modul-6/begrepp6/#konstruktorer","title":"Konstruktorer","text":"<p>Konstruktor: En metod i en klass som anropas automatiskt vid skapandet av ett objekt och anv\u00e4nds f\u00f6r att s\u00e4tta startv\u00e4rden.</p> <p>Standardkonstruktor: En konstruktor utan parametrar som skapas automatiskt om ingen definieras.</p> <p>Konstruktor\u00f6verlagring: Att en klass kan ha flera konstruktorer med olika parametrar f\u00f6r att m\u00f6jligg\u00f6ra olika s\u00e4tt att skapa objekt.</p> <p>Inkapsling: Principen att skydda data genom att begr\u00e4nsa direkt \u00e5tkomst och ist\u00e4llet exponera kontrollerade metoder.</p> <p>Klassmedlemmar: De variabler (f\u00e4lt) och metoder som ing\u00e5r i en klass.</p> <p>F\u00e4lt (Field): En variabel som lagrar data inom en klass.</p> <p><code>private</code>: Begr\u00e4nsar \u00e5tkomst till endast inom den egna klassen.</p> <p><code>public</code>: Till\u00e5ter att variabler och metoder kan n\u00e5s utanf\u00f6r klassen.</p> <p><code>static</code>: Betyder att en variabel eller metod tillh\u00f6r klassen snarare \u00e4n enskilda objekt.</p> <p><code>this</code>: Refererar till det aktuella objektet och anv\u00e4nds f\u00f6r att skilja p\u00e5 klassens f\u00e4lt och parametrar med samma namn.</p> <p><code>private set;</code>: G\u00f6r att en property endast kan s\u00e4ttas inuti klassen.</p>"},{"location":"content/modul-6/begrepp6/#properties","title":"Properties","text":"<p>Property: En metodliknande mekanism som anv\u00e4nds f\u00f6r att kontrollera \u00e5tkomst till privata f\u00e4lt.</p> <p><code>get</code>: Anv\u00e4nds f\u00f6r att l\u00e4sa v\u00e4rdet av en property.</p> <p><code>set</code>: Anv\u00e4nds f\u00f6r att \u00e4ndra v\u00e4rdet av en property, ofta med validering.</p> <p>Auto-Property: En kortare syntax d\u00e4r C# automatiskt skapar ett privat f\u00e4lt i bakgrunden.</p> <p>Read-Only Property: En property med endast <code>get</code>, vilket g\u00f6r att v\u00e4rdet kan s\u00e4ttas en g\u00e5ng men inte \u00e4ndras.</p> <p>Write-Only Property: En property med endast <code>set</code>, vilket g\u00f6r att v\u00e4rdet kan s\u00e4ttas men inte l\u00e4sas.</p> <p>Statiska klasser: Klasser som inte kan instansieras och endast inneh\u00e5ller statiska medlemmar.</p> <p>Statiska medlemmar: Variabler eller metoder som delas mellan alla instanser av en klass ist\u00e4llet f\u00f6r att vara unika f\u00f6r varje objekt.</p>"},{"location":"content/modul-6/l%C3%B6sn6/","title":"L\u00f6sningsf\u00f6rslag - Modul 6","text":""},{"location":"content/modul-6/l%C3%B6sn6/#uppgift-1-skapa-och-anvanda-objekt","title":"Uppgift 1: Skapa och anv\u00e4nda objekt","text":"<pre><code>class Person\n{\n    private string namn; // Privat f\u00e4lt f\u00f6r att lagra personens namn\n    private int \u00e5lder; // Privat f\u00e4lt f\u00f6r att lagra personens \u00e5lder\n\n    // Metod f\u00f6r att s\u00e4tta personens namn\n    public void SetNamn(string nyttNamn)\n    {\n        namn = nyttNamn;\n    }\n\n    // Metod f\u00f6r att s\u00e4tta personens \u00e5lder (m\u00e5ste vara positivt)\n    public void Set\u00c5lder(int ny\u00c5lder)\n    {\n        if (ny\u00c5lder &gt; 0)\n            \u00e5lder = ny\u00c5lder;\n    }\n\n    // Metod f\u00f6r att h\u00e4mta personens namn\n    public string GetNamn()\n    {\n        return namn;\n    }\n\n    // Metod f\u00f6r att h\u00e4mta personens \u00e5lder\n    public int Get\u00c5lder()\n    {\n        return \u00e5lder;\n    }\n}\n\nclass Program\n{\n    static void Main()\n    {\n        Person p = new Person();\n        p.SetNamn(\"Anna\");\n        p.Set\u00c5lder(25);\n        Console.WriteLine($\"Namn: {p.GetNamn()}, \u00c5lder: {p.Get\u00c5lder()}\");\n    }\n}\n</code></pre>"},{"location":"content/modul-6/l%C3%B6sn6/#uppgift-2-properties","title":"Uppgift 2: Properties","text":"<pre><code>class Bil\n{\n    private int hastighet; // Privat f\u00e4lt f\u00f6r att lagra bilens hastighet\n\n    // Property f\u00f6r att l\u00e4sa och s\u00e4tta bilens hastighet, med validering\n    public int Hastighet\n    {\n        get { return hastighet; }\n        set \n        {\n            if (value &gt;= 0)\n                hastighet = value;\n        }\n    }\n}\n\nclass Program\n{\n    static void Main()\n    {\n        Bil b = new Bil();\n        b.Hastighet = 120;\n        Console.WriteLine(\"Hastighet: \" + b.Hastighet);\n    }\n}\n</code></pre>"},{"location":"content/modul-6/l%C3%B6sn6/#uppgift-3-metoder-och-inkapsling","title":"Uppgift 3: Metoder och inkapsling","text":"<pre><code>class Bankkonto\n{\n    private int saldo = 0;\n\n    // Metod f\u00f6r att s\u00e4tta in pengar p\u00e5 kontot\n    public void Ins\u00e4ttning(int belopp)\n    {\n        if (belopp &gt; 0)\n            saldo += belopp;\n    }\n\n    // Metod f\u00f6r att ta ut pengar fr\u00e5n kontot, men inte mer \u00e4n saldot\n    public void Uttag(int belopp)\n    {\n        if (belopp &gt; 0 &amp;&amp; belopp &lt;= saldo)\n            saldo -= belopp;\n    }\n\n    // Metod f\u00f6r att h\u00e4mta aktuellt saldo\n    public int GetSaldo()\n    {\n        return saldo;\n    }\n}\n\nclass Program\n{\n    static void Main()\n    {\n        Bankkonto konto = new Bankkonto();\n        konto.Ins\u00e4ttning(500);\n        konto.Uttag(200);\n        Console.WriteLine(\"Saldo: \" + konto.GetSaldo());\n    }\n}\n</code></pre>"},{"location":"content/modul-6/l%C3%B6sn6/#uppgift-4-statisk-medlem","title":"Uppgift 4: Statisk medlem","text":"<pre><code>class Bil\n{\n    private static int antalBilar = 0;\n    private string modell;\n\n    public Bil(string modell)\n    {\n        this.modell = modell;\n        antalBilar++;\n    }\n\n    public static int AntalBilar()\n    {\n        return antalBilar;\n    }\n}\n\nclass Program\n{\n    static void Main()\n    {\n        Bil b1 = new Bil(\"Volvo\");\n        Bil b2 = new Bil(\"BMW\");\n        Console.WriteLine(\"Antal bilar skapade: \" + Bil.AntalBilar());\n    }\n}\n</code></pre>"},{"location":"content/modul-6/l%C3%B6sn6/#uppgift-5-konstruktoroverlagring","title":"Uppgift 5: Konstruktor\u00f6verlagring","text":"<pre><code>// Klass som representerar en produkt\nclass Produkt\n{\n    public string Namn { get; set; } \n    public int Pris { get; set; } \n\n    // Standardkonstruktor som s\u00e4tter standardv\u00e4rden\n    public Produkt()\n    {\n        Namn = \"Ok\u00e4nd\";\n        Pris = 0;\n    }\n\n    // Konstruktor som tar emot namn och pris som parametrar\n    public Produkt(string namn, int pris)\n    {\n        Namn = namn;\n        Pris = pris;\n    }\n}\n\nclass Program\n{\n    static void Main()\n    {\n        Produkt p1 = new Produkt();\n        Produkt p2 = new Produkt(\"Dator\", 12000);\n        Console.WriteLine($\"Produkt: {p1.Namn}, Pris: {p1.Pris}\");\n        Console.WriteLine($\"Produkt: {p2.Namn}, Pris: {p2.Pris}\");\n    }\n}\n</code></pre>"},{"location":"content/modul-6/l%C3%B6sn6/#uppgift-6-kedjade-konstruktorer","title":"Uppgift 6: Kedjade konstruktorer","text":"<pre><code>class Lampa\n{\n    public string F\u00e4rg { get; set; } \n    public int Ljusstyrka { get; set; } \n\n    // Standardkonstruktor som s\u00e4tter standardv\u00e4rden\n    public Lampa() : this(\"Vit\", 100) { }\n\n    // Konstruktor som endast tar emot f\u00e4rg och anv\u00e4nder standard ljusstyrka\n    public Lampa(string f\u00e4rg) : this(f\u00e4rg, 100) { }\n\n    // Konstruktor som tar emot b\u00e5de f\u00e4rg och ljusstyrka, tilldelar via autoproperty\n    public Lampa(string f\u00e4rg, int ljusstyrka)\n    {\n        F\u00e4rg = f\u00e4rg;\n        Ljusstyrka = ljusstyrka;\n    }\n}\n\nclass Program\n{\n    static void Main()\n    {\n        Lampa l1 = new Lampa();\n        Lampa l2 = new Lampa(\"Bl\u00e5\");\n        Console.WriteLine($\"Lampa 1 - F\u00e4rg: {l1.F\u00e4rg}, Ljusstyrka: {l1.Ljusstyrka}\");\n        Console.WriteLine($\"Lampa 2 - F\u00e4rg: {l2.F\u00e4rg}, Ljusstyrka: {l2.Ljusstyrka}\");\n    }\n}\n</code></pre>"},{"location":"content/modul-6/uppg6/","title":"\u00d6vningsuppgifter - Modul 6","text":""},{"location":"content/modul-6/uppg6/#uppgift-1-skapa-och-anvanda-objekt","title":"Uppgift 1: Skapa och anv\u00e4nda objekt","text":"<p>Skriv en klass <code>Person</code> som har tv\u00e5 privata f\u00e4lt: <code>namn</code> (string) och <code>\u00e5lder</code> (int). </p> <ul> <li>Skapa metoder <code>SetNamn()</code> och <code>Set\u00c5lder()</code> f\u00f6r att s\u00e4tta v\u00e4rdena.</li> <li>Skapa metoder <code>GetNamn()</code> och <code>Get\u00c5lder()</code> f\u00f6r att h\u00e4mta v\u00e4rdena.</li> <li>Skapa ett objekt av klassen i <code>Main()</code> och testa att s\u00e4tta och h\u00e4mta v\u00e4rdena.</li> </ul>"},{"location":"content/modul-6/uppg6/#uppgift-2-properties","title":"Uppgift 2: Properties","text":"<p>Skriv en klass <code>Bil</code> som har en property <code>Hastighet</code> (int). </p> <ul> <li>Implementera <code>get</code> och <code>set</code>, d\u00e4r <code>set</code> inte till\u00e5ter negativa v\u00e4rden.</li> <li>Skapa ett objekt av <code>Bil</code> i <code>Main()</code> och testa att \u00e4ndra hastigheten.</li> </ul>"},{"location":"content/modul-6/uppg6/#uppgift-3-metoder-och-inkapsling","title":"Uppgift 3: Metoder och inkapsling","text":"<p>Skapa en klass <code>Bankkonto</code> som har:</p> <ul> <li>Ett privat f\u00e4lt <code>saldo</code> (int).</li> <li>En metod <code>Ins\u00e4ttning(int belopp)</code> som \u00f6kar saldot.</li> <li>En metod <code>Uttag(int belopp)</code> som minskar saldot, men inte till\u00e5ter att det blir negativt.</li> <li>En metod <code>GetSaldo()</code> som returnerar saldot.</li> </ul> <p>Testa klassen genom att skapa ett bankkonto och utf\u00f6ra n\u00e5gra ins\u00e4ttningar och uttag i <code>Main()</code>.</p>"},{"location":"content/modul-6/uppg6/#uppgift-4-statisk-medlem","title":"Uppgift 4: Statisk medlem","text":"<p>Skapa en klass <code>Bil</code> d\u00e4r:</p> <ul> <li>Ett statiskt f\u00e4lt <code>antalBilar</code> h\u00e5ller reda p\u00e5 hur m\u00e5nga bilar som skapats.</li> <li>Konstruktorerna ska \u00f6ka <code>antalBilar</code> varje g\u00e5ng en ny bil skapas.</li> <li>En statisk metod <code>AntalBilar()</code> returnerar v\u00e4rdet p\u00e5 <code>antalBilar</code>.</li> <li>Testa genom att skapa flera objekt och anropa <code>AntalBilar()</code>.</li> </ul>"},{"location":"content/modul-6/uppg6/#uppgift-5-konstruktoroverlagring","title":"Uppgift 5: Konstruktor\u00f6verlagring","text":"<p>Skriv en klass <code>Produkt</code> med:</p> <ul> <li>En konstruktor <code>Produkt()</code> som s\u00e4tter standardv\u00e4rden.</li> <li>En konstruktor <code>Produkt(string namn, int pris)</code> d\u00e4r anv\u00e4ndaren kan skicka in v\u00e4rden.</li> <li>Skapa olika objekt av klassen i <code>Main()</code> och skriv ut deras v\u00e4rden.</li> </ul>"},{"location":"content/modul-6/uppg6/#uppgift-6-kedjade-konstruktorer","title":"Uppgift 6: Kedjade konstruktorer","text":"<p>Skapa en klass <code>Lampa</code> som har:</p> <ul> <li>En konstruktor <code>Lampa()</code> som s\u00e4tter standardv\u00e4rden.</li> <li>En konstruktor <code>Lampa(string f\u00e4rg)</code> som anropar <code>this()</code> f\u00f6r att \u00e5teranv\u00e4nda standardv\u00e4rden och \u00e4ndra f\u00e4rg.</li> <li>Testa genom att skapa objekt med b\u00e5da konstruktorerna och skriva ut deras v\u00e4rden.</li> </ul>"}]}