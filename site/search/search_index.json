{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to MkDocs","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"error/","title":"Ej tillg\u00e4ngligt","text":"<p>Inneh\u00e5llet du s\u00f6ker har inte lagts upp \u00e4n. </p> <p>Jag t\u00e4nker v\u00e4l att jag g\u00f6r det n\u00e5gon g\u00e5ng.</p>"},{"location":"content/modul-1/1-datorer-och-programmering/","title":"Datorer och Programmering","text":""},{"location":"content/modul-1/1-datorer-och-programmering/#datorprogram","title":"Datorprogram","text":"<p>N\u00e4r man talar om datorer, inkluderar detta inte bara vanliga persondatorer eller b\u00e4rbara datorer, utan ocks\u00e5 mobiler och surfplattor. Datorer anv\u00e4nds \u00e4ven som komponenter i olika tekniska apparater s\u00e5som mikrov\u00e5gsugnar, tv\u00e4ttmaskiner, leksaker, bilar, trafikljus, hissar och robotgr\u00e4sklippare.</p> <p>Datorer \u00e4r numera en sj\u00e4lvklar del av v\u00e5ra liv och f\u00f6r att dessa ska fungera beh\u00f6ver de programmeras av m\u00e4nniskor. Programmering handlar om att skriva instruktioner som en dator kan f\u00f6rst\u00e5 och utf\u00f6ra. Instruktionerna kallas k\u00e4llkod (kod) eller program (datorprogram) och skrivs i ett programmeringsspr\u00e5k.</p> <p>N\u00e4r ett program utf\u00f6rs (k\u00f6rs) i en dator s\u00e4ger man att programmet exekveras.</p>"},{"location":"content/modul-1/1-datorer-och-programmering/#hur-fungerar-en-dator","title":"Hur fungerar en dator?","text":"<p>Enkelt uttryckt \u00e4r en dator en \"maskin\" som f\u00f6ljer tydliga instruktioner och har till uppgift att: Ta in information (indata), behandla och lagra informationen samt presentera informationen igen (utdata).</p> <p>En dator kan egentligen bara en sak, n\u00e4mligen skilja p\u00e5 tv\u00e5 tillst\u00e5nd, str\u00f6m p\u00e5 och av. Dessa tillst\u00e5nd brukar kallas f\u00f6r ettor och nollor. All information i en dator lagras som ettor och nollor.</p> <p>En dator kan f\u00f6renklat ses som att den \u00e4r uppbyggd av f\u00f6ljande delar: </p>"},{"location":"content/modul-1/1-datorer-och-programmering/#indata","title":"Indata","text":"<p>Att ge information till en dator kan ske med t.ex. tangentbord, mus eller mikrofon. En dator i en robotgr\u00e4sklippare kan f\u00e5 information fr\u00e5n olika sensorer som t.ex. k\u00e4nner av om n\u00e5got \u00e4r i v\u00e4gen.  </p>"},{"location":"content/modul-1/1-datorer-och-programmering/#processor","title":"Processor","text":"<p>\u00c4ven k\u00e4nt som CPU (Central Processing Unit), datorns \"hj\u00e4rna\", d\u00e4r alla instruktioner utf\u00f6rs, dvs d\u00e4r programmet k\u00f6rs (exekveras). Den kan hantera ett visst antal instruktioner. Olika datorer kan ha olika typer av processorer.  </p>"},{"location":"content/modul-1/1-datorer-och-programmering/#minne","title":"Minne","text":"<p>Programmet som ska k\u00f6ras l\u00e4ggs i datorns minne. Det \u00e4r h\u00e4rifr\u00e5n processorn h\u00e4mtar instruktioner. Processorn kan \u00e4ven anv\u00e4nda minnet f\u00f6r att lagra information medans programmet k\u00f6rs.  </p>"},{"location":"content/modul-1/1-datorer-och-programmering/#utdata","title":"Utdata","text":"<p>Att visa information fr\u00e5n en dator kan ske till t.ex. en sk\u00e4rm, h\u00f6gtalare eller skrivare. En dator i en robotgr\u00e4sklippare kan ha t.ex. en lite sk\u00e4rm (display) eller blinkade lysdioder.  </p>"},{"location":"content/modul-1/1-datorer-och-programmering/#program","title":"Program","text":"<p>Ett program \u00e4r en f\u00f6ljd av instruktioner, d\u00e4r varje instruktion representeras av ett antal ettor och nollor. Datorn \u00e4r oerh\u00f6rt snabb p\u00e5 att skilja p\u00e5 dessa ettor och nollor, vilket m\u00f6jligg\u00f6r skapandet av olika typer av program.</p> <p>N\u00e4r ett program \u00e4r skrivet som en serie av ettor och nollor kallas det f\u00f6r maskinkod. Ett program m\u00e5ste vara i maskinkod f\u00f6r att datorns h\u00e5rdvara (t.ex. processor, minne) ska kunna f\u00f6rst\u00e5 programmet och k\u00f6ra det. Maskinkoden ser olika ut beroende p\u00e5 vilken typ av processor datorn har och d\u00e4rf\u00f6r kan inte maskinkod flyttas till en dator med en annan processortyp. Ordet h\u00e5rdvara (fr\u00e5n engelskans hardware) \u00e4r ett samlingsnamn f\u00f6r datorns fysiska delar, dvs alla de saker man kan ta p\u00e5. </p> <p>Datorn f\u00f6rst\u00e5r ju bara maskinkod (ettor och nollor), men det \u00e4r ett spr\u00e5k som \u00e4r sv\u00e5rt f\u00f6r oss m\u00e4nniskor. D\u00e4rf\u00f6r har programmeringsspr\u00e5k skapats som \u00e4r enklare f\u00f6r oss m\u00e4nniskor att skriva och l\u00e4sa, och som sedan kan \u00f6vers\u00e4ttas till maskinkod. </p> <p>Program som skrivs med hj\u00e4lp av ett programmeringsspr\u00e5k kallas f\u00f6r k\u00e4llkod. Ofta anv\u00e4nds det f\u00f6rkortade kod, n\u00e4r man menar k\u00e4llkod. </p>"},{"location":"content/modul-1/1-datorer-och-programmering/#kompilering-interpretering","title":"Kompilering &amp; Interpretering","text":"<p>N\u00e4r man skriver k\u00e4llkod m\u00e5ste man anv\u00e4nda ett specifikt programmeringsspr\u00e5k och f\u00f6lja dess syntax, som \u00e4r reglerna f\u00f6r hur koden ska skrivas. De flesta programmeringsspr\u00e5k \u00e4r p\u00e5 engelska.</p> <p>F\u00f6r att datorn ska kunna k\u00f6ra koden m\u00e5ste den \u00f6vers\u00e4ttas till maskinkod. Det finns tv\u00e5 s\u00e4tt att g\u00f6ra detta: kompilering och interpretering. Kompilerade spr\u00e5k \u00f6vers\u00e4tter koden i f\u00f6rv\u00e4g, medan interpreterade spr\u00e5k \u00f6vers\u00e4tter den i realtid n\u00e4r programmet k\u00f6rs.</p>"},{"location":"content/modul-1/1-datorer-och-programmering/#kompilerade-sprak","title":"Kompilerade spr\u00e5k","text":"<p>Exempel p\u00e5 kompilerade spr\u00e5k \u00e4r C#, Java, C, C++ och Objective-C. Kompilatorn \u00f6vers\u00e4tter koden till maskinkod innan den k\u00f6rs.</p> <p>F\u00f6rdelar:</p> <ul> <li>Snabb exekvering.</li> <li>Tidiga uppt\u00e4ckter av syntaxfel.</li> </ul> <p>Nackdelar:</p> <ul> <li>Extra steg med kompilering.</li> <li>Krav p\u00e5 specifik processortyp.</li> </ul> <p>Kompilerade spr\u00e5k anv\u00e4nds n\u00e4r effektivitet och fels\u00e4kerhet \u00e4r viktigt.</p>"},{"location":"content/modul-1/1-datorer-och-programmering/#interpreterade-sprak","title":"Interpreterade spr\u00e5k","text":"<p>Exempel p\u00e5 interpreterade spr\u00e5k \u00e4r Python, JavaScript, PHP och Ruby. Interpreteraren \u00f6vers\u00e4tter och tolkar koden under exekvering.</p> <p>F\u00f6rdelar:</p> <ul> <li>Portabilitet.</li> <li>Ingen kompileringsprocess.</li> </ul> <p>Nackdelar:</p> <ul> <li>L\u00e5ngsammare exekvering.</li> <li>Risk f\u00f6r syntaxfel vid k\u00f6rning.</li> </ul>"},{"location":"content/modul-1/1-datorer-och-programmering/#lag-och-hognivasprak","title":"L\u00e5g- och h\u00f6gniv\u00e5spr\u00e5k","text":"<p>Det finns m\u00e5nga olika programmeringsspr\u00e5k att v\u00e4lja mellan, som till exempel Python, C#, C++, Java, Javascript och C. </p> <p>Varje spr\u00e5k har sina egna f\u00f6rdelar och \u00e4r bra p\u00e5 olika saker. Till exempel \u00e4r C ofta anv\u00e4ndbart f\u00f6r att styra maskiner och apparater, medan Java \u00e4r k\u00e4nt f\u00f6r att vara bra f\u00f6r att skapa stora datorprogram. N\u00e4r det g\u00e4ller spelutveckling \u00e4r C++ ett popul\u00e4rt val, medan C# anv\u00e4nds f\u00f6r att utveckla olika typer av applikationer och spel, och HTML, CSS och Javascript ofta anv\u00e4nds f\u00f6r att skapa webbsidor p\u00e5 n\u00e4tet.</p>"},{"location":"content/modul-1/1-datorer-och-programmering/#lagnivasprak","title":"L\u00e5gniv\u00e5spr\u00e5k","text":"<p>Historiskt sett n\u00e4r datorer programmerades anv\u00e4ndes l\u00e5gniv\u00e5spr\u00e5k, d\u00e4r koden var mycket detaljerad och v\u00e4ldigt n\u00e4ra det spr\u00e5k som datorn pratar (maskinkod). Det kr\u00e4vde exakt specificerade instruktioner, vilket gav full kontroll \u00f6ver programmet. L\u00e5gniv\u00e5spr\u00e5k anv\u00e4nds idag fr\u00e4mst f\u00f6r sm\u00e5 inbyggda system, exempelvis mikrov\u00e5gsugnar. Exempel p\u00e5 l\u00e5gniv\u00e5spr\u00e5k \u00e4r assembler.</p>"},{"location":"content/modul-1/1-datorer-och-programmering/#hognivasprak","title":"H\u00f6gniv\u00e5spr\u00e5k","text":"<p>N\u00e4sta steg i utvecklingen var mer avancerade programmeringsspr\u00e5k, s.k. h\u00f6gniv\u00e5spr\u00e5k. I dessa skrivs programmet p\u00e5 ett s\u00e4tt som \u00e4r l\u00e4ttare att f\u00f6rst\u00e5 f\u00f6r m\u00e4nniskor.  I h\u00f6gniv\u00e5spr\u00e5k fokuserar man p\u00e5 att beskriva vad som ska g\u00f6ras ist\u00e4llet f\u00f6r exakt hur det ska g\u00f6ras. \u00a0H\u00f6gniv\u00e5spr\u00e5k m\u00e5ste konverteras till maskinkod med hj\u00e4lp av en interpretator eller kompilator, beroende p\u00e5 vilket programmeringsspr\u00e5k som anv\u00e4nds. Det \u00e4r kompilatorn eller interpretatorn som styr hur koden utf\u00f6rs p\u00e5 detaljniv\u00e5.</p> <p>De vanligaste spr\u00e5ken har fler likheter \u00e4n olikheter, och alla inneh\u00e5ller instruktioner f\u00f6r:</p> <ul> <li>Sekvens - Instruktioner som sker i tur och ordning.</li> <li>Villkor - Styr vilka instruktioner som ska utf\u00f6ras.</li> <li>Repetition - Upprepning av instruktioner.</li> </ul>"},{"location":"content/modul-1/1-datorer-och-programmering/#vad-ar-c","title":"Vad \u00e4r C#?","text":"<p>C# (uttalas \"C sharp\") \u00e4r ett programmeringsspr\u00e5k som utvecklats av Microsoft och introducerades \u00e5r 2000.</p> <p>C# skapades med m\u00e5let att vara ett modernt, kraftfullt och l\u00e4ttanv\u00e4nt spr\u00e5k f\u00f6r att utveckla olika typer av program och applikationer f\u00f6r Microsoft-plattformar som Windows. Men med tiden har spr\u00e5ket blivit alltmer plattformsoberoende och numer kan man skriva och k\u00f6ra sina program p\u00e5 olika operativsystem som Windows, Linux och macOS. </p> <p>Ett av de mest intressanta dragen med C# \u00e4r dess n\u00e4ra koppling till Microsofts .NET-plattform. Detta betyder att C#-program kan dra nytta av .NET:s stora ekosystem av bibliotek och verktyg f\u00f6r att snabbt och effektivt bygga robusta och skalbara applikationer.</p> <p>C# har blivit ett popul\u00e4rt programmeringsspr\u00e5k tack vare dess anv\u00e4ndarv\u00e4nlighet, kraftfulla funktioner och breda anv\u00e4ndningsomr\u00e5den, vilket inkluderar allt fr\u00e5n desktopapplikationer till webbutveckling och spelprogrammering. F\u00f6r nyb\u00f6rjare \u00e4r C# ett utm\u00e4rkt val f\u00f6r att l\u00e4ra sig grunderna i programmering samtidigt som det erbjuder tillr\u00e4ckligt med funktionalitet f\u00f6r att hantera mer avancerade projekt.</p>"},{"location":"content/modul-1/1-datorer-och-programmering/#c-jamfort-med-cc","title":"C# j\u00e4mf\u00f6rt med C/C++","text":"<p>C# \u00e4r ett h\u00f6gniv\u00e5spr\u00e5k med moderna funktioner och starkt st\u00f6d f\u00f6r objektorienterad programmering, vilket g\u00f6r det enklare att utveckla och underh\u00e5lla program j\u00e4mf\u00f6rt med C och C++. Medan C och C++ \u00e4r n\u00e4rmare knutna till datorns h\u00e5rdvara och erbjuder mer direkt kontroll, ger C# en h\u00f6gre abstraktionsniv\u00e5 och plattformsoberoende genom Microsofts .NET-plattform.</p>"},{"location":"content/modul-1/1-datorer-och-programmering/#ide-integrated-development-environment","title":"IDE - Integrated Development Environment","text":"<p>\u00c4ven k\u00e4nt som \"programmet som man skriver kod i.\"</p> <p>En IDE, eller Integrated Development Environment, \u00e4r en programvara som erbjuder utvecklare en komplett milj\u00f6 f\u00f6r att skriva, testa, fels\u00f6ka och distribuera program. Den kombinerar vanligtvis textredigerare med andra funktioner s\u00e5som kodkomplettering och fels\u00f6kning.</p> <p>Vi kommer att anv\u00e4nda Visual Studio Community Edition f\u00f6r att skriva och utveckla C#-program. Visual Studio \u00e4r en kraftfull och popul\u00e4r IDE utvecklad av Microsoft och erbjuder ett brett utbud av funktioner och verktyg som underl\u00e4ttar utvecklingsprocessen. Community Edition \u00e4r gratis f\u00f6r studenter och enskilda utvecklare.</p> <p>F\u00f6rutom Visual Studio finns det ocks\u00e5 andra popul\u00e4ra IDE:er s\u00e5som Rider och Visual Studio Code. Ut\u00f6ver detta kan man ocks\u00e5 hitta webbaserade IDE:er online, exempelvis Replit. </p>"},{"location":"content/modul-1/2-variabler/","title":"Variabler","text":"<p>Ibland n\u00e4r man r\u00e4knar ut n\u00e5got kan man inte utf\u00f6ra hela ber\u00e4kningen p\u00e5 en g\u00e5ng, utan g\u00f6r det i steg, r\u00e4knar ut en sak i taget och skriver ned sina delresultat f\u00f6r att sedan kunna ber\u00e4kna slutresultatet.</p> <p>P\u00e5 motsvarande s\u00e4tt kan ber\u00e4kningar i ett datorprogram utf\u00f6ras stegvis, och information m\u00e5ste sparas f\u00f6r att kunna anv\u00e4ndas senare. Informationen sparas i variabler, namngivna objekt vars v\u00e4rde kan variera. </p> <p>Ett s\u00e4tt att t\u00e4nka p\u00e5 en variabel \u00e4r som en l\u00e5da som man kan l\u00e4gga v\u00e4rden i. Ett program kan inneh\u00e5lla m\u00e5nga variabler s\u00e5 varje variabel har ett eget namn. </p> <p>N\u00e4r man deklarerar (skapar) en variabel beh\u00f6ver man ange dess datatyp och dess namn. Om man sedan ger variabeln ett v\u00e4rde kallas det f\u00f6r tilldelning. Man tilldelar variabeln ett v\u00e4rde med hj\u00e4lp av ett likhetstecken, variabeln \u00e4r alltid p\u00e5 v\u00e4nster sida.</p> <p><pre><code>// Deklarerar en variabel av datatypen int.\nint age;  \n// Tilldelar v\u00e4rdet 18 till variabeln age.\nage = 18;\n</code></pre> </p> <p>Detta kan utf\u00f6ras p\u00e5 en rad, om man redan fr\u00e5n b\u00f6rjan vet vad v\u00e4rdet ska vara. Detta kallas f\u00f6r initiering. <pre><code>// Initierar variabeln myName.\nstring myName = \"Emil\"; \n</code></pre></p> <p>Flera variabler av samma datatyp kan deklareras i samma sats (p\u00e5 samma rad). Detta g\u00e4ller \u00e4ven tilldelning. <pre><code>// Deklarerar tre variabler av typen int.\nint a, b, c; \n\n// Tilldelar de tre variablerna v\u00e4rdet 5.\na = b = c = 5; \n</code></pre></p> <p>Variablers v\u00e4rde kan \u00e4ndras under programmets k\u00f6rtid. <pre><code>string myName = \"Emil\";\n\n// Tilldelar variabeln ett nytt v\u00e4rde.\nmyName = \"Anna\"; \n\n// Skriver ut variabelns v\u00e4rde.\nConsole.WriteLine(myName); // Ger utskriften Anna.\n</code></pre></p> <p>Variabler kan tilldelas v\u00e4rden fr\u00e5n andra variabler. <pre><code>// Initierar a till 2. Tilldelar b v\u00e4rdet fr\u00e5n a, allts\u00e5 tv\u00e5.\nint a = 2;\nint b = a; \n\n// Tilldelar b sitt eget v\u00e4rde plus 10, allts\u00e5 12.\nb = b + 10; \n</code></pre></p>"},{"location":"content/modul-1/2-variabler/#variabelnamn","title":"Variabelnamn","text":"<p>Ge alltid variabler tydliga f\u00f6rklarande namn, s\u00e5 att det tydligt framg\u00e5r vad variabeln ska anv\u00e4ndas till. Ett namn kan inneh\u00e5lla bokst\u00e4ver och siffror, men inte b\u00f6rja p\u00e5 en siffra. Det \u00e4r skillnad p\u00e5 sm\u00e5 och stora bokst\u00e4ver. </p> <p>Det finns m\u00e5nga olika s\u00e4tt att namnge variabler. I C# anv\u00e4nds camelCase f\u00f6r vanliga variabler. Inledande gemen (liten bokstav), d\u00e4r varje nytt ord i variabeln inleds med versal (stor bokstav). Inga mellanslag eller understreck. </p> <p>Det finns \u00e4ven en del ord som \u00e4r reserverade av C#, som inte kan anv\u00e4ndas som variabelnamn, dessa kallas nyckelord.</p> <pre><code>int maxValue;  // JA\nint MaxValue;  // NEJ, stor bokstav i b\u00f6rjan\nint maxvalue;  // NEJ, saknar stor bokstav p\u00e5 andra ordet\nint max_value; // NEJ, understreck\nint max value; // ERROR, inga mellanslag\nint int;       // ERROR, int \u00e4r ett reserverat nyckelord\n</code></pre> <p>Riktlinjer f\u00f6r namngivning av variabler:</p> <ul> <li> <p>I den h\u00e4r kursen f\u00e5r du v\u00e4lja sj\u00e4lv om du anv\u00e4nder svenska eller engelska variabelnamn. Men var konsekvent genom ditt projekt. Antingen \u00e4r alla variabelnamn i projektet p\u00e5 svenska, eller p\u00e5 engelska.</p> </li> <li> <p>Ha hellre ett lite l\u00e4ngre och beskrivande namn \u00e4n en mer eller mindre obegriplig f\u00f6rkortning. Ditt framtida jag kommer tacka dig n\u00e4r denne  l\u00e4ser kod du skrivit.</p> </li> <li> <p>Anv\u00e4nd camelCase.</p> </li> </ul>"},{"location":"content/modul-1/3-datatyper/","title":"Datatyper","text":"<p>Olika typer av variabler kan lagra olika typer av v\u00e4rden. Det \u00e4r lite som att man inte b\u00f6r t\u00f6mma saft i kakburken, eller f\u00f6rs\u00f6ka l\u00e4gga kakorna i saftflaskan. Dessa typer kallas datatyper.\u00a0</p> <p>Variablers datatyp talar om f\u00f6r kompilatorn vilka operationer som kan utf\u00f6ras f\u00f6r den aktuella variabeln. Olika datatyper tar ocks\u00e5 olika stor plats i minnet, s\u00e5 genom korrekt anv\u00e4ndande av datatyper kan man optimera minnesanv\u00e4ndningen. </p>"},{"location":"content/modul-1/3-datatyper/#primitiva-datatyper-i-c","title":"Primitiva datatyper i C#","text":"<p>Primitiva datatyper \u00e4r de grundl\u00e4ggande datatyperna som anv\u00e4nds f\u00f6r att lagra v\u00e4rden i ett program, och utg\u00f6r grunden f\u00f6r att skapa mer komplexa datatyper. Dessa kan skilja sig \u00e5t lite beroende p\u00e5 programmeringsspr\u00e5k. </p> <p>Tabellen nedan tar upp vanligt f\u00f6rekommande primitiva datatyper i C#.</p> Datatyp Beskrivning Storlek Intervall int Heltal 32 bits \\(-2{^3}{^1}\\) till \\(2{^3}{^1}-1\\) long Heltal 64 bits \\(-2{^6}{^3}\\) till \\(2{^6}{^3}-1\\) float Flyttal 32 bits \\(-3,4\\cdot10{^3}{^8}\\) till \\(3,4\\cdot10{^3}{^8}\\) double Flyttal, dubbel precision 64 bits \\(\\pm5,0\\cdot10{^3}{^2}{^4}\\) till \\(\\pm1,7\\cdot10{^3}{^0}{^8}\\) decimal Flyttal, h\u00f6g precision 128 bits 28 g\u00e4llande siffror string Sekvens av tecken 16 bits/tecken Ej applicerbart char Enskilt tecken 16 bits Ett enskilt tecken bool Boolean 8 bits Sant eller falskt"},{"location":"content/modul-1/3-datatyper/#flyttal","title":"Flyttal","text":"<p>Ett flyttal \u00e4r en datatyp som anv\u00e4nds f\u00f6r att representera decimaltal. Till skillnad fr\u00e5n heltal \u00e4r flyttal en approximation av ett decimaltal och kan d\u00e4rf\u00f6r inte representera alla decimaler exakt, utan ger en uppskattning av det verkliga v\u00e4rdet. Detta inneb\u00e4r att flyttal kan ha begr\u00e4nsad precision, vilket kan leda till avrundningsfel i ber\u00e4kningar. </p> <p>Nedan f\u00f6ljer ett exempel p\u00e5 s\u00e5dant avrundningsfel, som i grund och botten \u00e4r baserat p\u00e5 att datorn inte f\u00f6rst\u00e5r o\u00e4ndlig decimalutveckling. <pre><code>// V\u00e4rdet p\u00e5 variablen num borde vara 0,3.\ndouble num = 0.1 + 0.2; \n// Det kommer skrivas ut som 0,30000000000000004.\nConsole.WriteLine(num);\n</code></pre></p>"},{"location":"content/modul-1/3-datatyper/#char","title":"char","text":"<p>Namnet kommer fr\u00e5n engelskans character, och datatypen anv\u00e4nds f\u00f6r att representera enskilda tecken, exempelvis en bokstav. </p> <p>Datorn lagrar som bekant bara ettor och nollor, s\u00e5 varje tecken har en egen sifferkod, enligt en given teckentabell. Exempelvis ASCII och Unicode. </p> <p>Allts\u00e5 \u00e4r varje bokstav egentligen bara ett heltal f\u00f6r datorn. Exempelvis enligt b\u00e5da ovan n\u00e4mnda exempel s\u00e5 \u00e4r sifferkoden f\u00f6r lilla a lika med 97. Notera att f\u00f6r stora A \u00e4r den 65. <pre><code>// Man kan direkt spara en char som en integer\nint myInt = 'A';\nConsole.WriteLine(myInt); // Ger utskriften \"65\".\n\n// Sifferkoden kan anv\u00e4ndas f\u00f6r att \"casta\" en int till char.\nchar myChar = (char)97;\nConsole.WriteLine(myChar); // Ger utskriften \"a\".\n</code></pre></p>"},{"location":"content/modul-1/3-datatyper/#string","title":"string","text":"<p>En string \u00e4r en serie tecken, chars, efter varandra. Man kan komma \u00e5t enskilda tecken via dess index. <pre><code>string myString = \"Hejsan!\";\nConsole.WriteLine(myString[1]); // Ger utskriften \"e\".\n</code></pre></p>"},{"location":"content/modul-1/4-operatorer/","title":"Operatorer","text":"<p>Operatorer inom programmering fungerar som inom matematiken, ett skrivs\u00e4tt som symboliserar en viss funktion. Ett exempel p\u00e5 en operator \u00e4r plustecknet. I exemplet \"2 + 3\" inneb\u00e4r plustecknet att man ska addera v\u00e4rdet av de tv\u00e5 operanderna, allts\u00e5 tv\u00e5 och tre. </p> <p>Operatorer inom programmering kan delas in i olika kategorier baserat p\u00e5 deras funktion. </p>"},{"location":"content/modul-1/4-operatorer/#matematiska-operatorer","title":"Matematiska operatorer","text":"<p>\u00c4ven k\u00e4nt som aritmetiska operatorer.</p>"},{"location":"content/modul-1/4-operatorer/#addition-eller-konkatenering","title":"+\u2003Addition eller konkatenering","text":"<p>Plustecknet fungerar olika i olika situationer.  <pre><code>// Addition, l\u00e4gga ihop tal\nint a = 3 + 4; // a f\u00e5r v\u00e4rdet 7.\n\n// Konkatenering, om en eller fler av operanderna \u00e4r string \nstring b = \"Hej\" + \"d\u00e5\";  // b f\u00e5r v\u00e4rdet \"Hejd\u00e5\".\nstring c = \"Hej\" + 19;    // c f\u00e5r v\u00e4rdet \"Hej19\".\nstring d = \"3\" + 4;       // d f\u00e5r v\u00e4rdet 34.\n</code></pre></p>"},{"location":"content/modul-1/4-operatorer/#-subtraktion","title":"-\u2003Subtraktion","text":"<pre><code>int a = 10 - 7; // a f\u00e5r v\u00e4rdet 3.\n\n// Minustecknet kan ocks\u00e5 anv\u00e4ndas f\u00f6r att multiplicera med -1.\nint b = -a; // b f\u00e5r v\u00e4rdet -3.\n</code></pre>"},{"location":"content/modul-1/4-operatorer/#multiplikation","title":"*\u2003Multiplikation","text":"<pre><code>int a = 3 * 2; // a f\u00e5r v\u00e4rdet 6.\n</code></pre>"},{"location":"content/modul-1/4-operatorer/#division","title":"/\u2003Division","text":"<p>Om man utf\u00f6r heltalsdivision, allts\u00e5 man delar ett heltal med ett annat heltal blir resultatet alltid ett heltal, decimalerna trunkeras(sk\u00e4rs) bort. <pre><code>int a = 12 / 3;    // a f\u00e5r v\u00e4rdet 4.\ndouble b = 5 / 2;  // b f\u00e5r v\u00e4rdet 2. \u00c4ven om det sparas i en double.\n\n// Om EN av operanderna \u00e4r i decimalform blir ocks\u00e5 svaret med decimaler.\ndouble c = 5.0 / 2; // c f\u00e5r v\u00e4rdet 2.5 \n</code></pre></p>"},{"location":"content/modul-1/4-operatorer/#modulus","title":"%\u2003Modulus","text":"<p>Modulusber\u00e4kning ger resten vid division.  <pre><code>int a = 7 % 3; // a f\u00e5r v\u00e4rdet 1. Eftersom 3 g\u00e5r tv\u00e5 g\u00e5nger i 7.\nint b = 8 % 4; // b f\u00e5r v\u00e4rdet 0. D\u00e5 divisionen g\u00e5r j\u00e4mnt ut.\n</code></pre></p>"},{"location":"content/modul-1/4-operatorer/#tilldelande-operatorer","title":"Tilldelande operatorer","text":""},{"location":"content/modul-1/4-operatorer/#tilldelning","title":"=\u2003Tilldelning","text":"<p>Likhetstecknet anv\u00e4nds som tilldelningsoperator, allts\u00e5 att s\u00e4tta ett v\u00e4rde p\u00e5 en variabel. <pre><code>int a = 5;\nstring b = \"Hej\";\nbool c = True;\n</code></pre></p>"},{"location":"content/modul-1/4-operatorer/#addera-och-tilldela","title":"+=\u2003Addera och tilldela","text":"<pre><code>int a = 12; // a tilldelas v\u00e4rdet 12 fr\u00e5n b\u00f6rjan.\n\n// \u00d6ka v\u00e4rdet p\u00e5 a med 8, vanlig tilldelning.\na = a + 8; // a f\u00e5r v\u00e4rdet 20. \n\n// \u00d6kar ocks\u00e5 v\u00e4rdet p\u00e5 variabeln a med 8, f\u00f6rkortat skrivs\u00e4tt.\na += 8; // a f\u00e5r v\u00e4rdet 28.\n</code></pre>"},{"location":"content/modul-1/4-operatorer/#-subtrahera-och-tilldela","title":"-=\u2003Subtrahera och tilldela","text":"<pre><code>int a = 12; // a tilldelas v\u00e4rdet 12 fr\u00e5n b\u00f6rjan.\n\na -= 10; // a f\u00e5r v\u00e4rdet 2. a = a - 10.\n</code></pre>"},{"location":"content/modul-1/4-operatorer/#-oka-eller-minska-med-ett","title":"++, --\u2003\u00d6ka eller minska med ett","text":"<p>Det \u00e4r vanligt f\u00f6rekommande att man beh\u00f6ver \u00f6ka eller minska variabelns v\u00e4rde med ett, det finns d\u00e5 en ytterligare f\u00f6rkortad tilldelningsoperator.  <pre><code>int a = 12; // a tilldelas v\u00e4rdet 12 fr\u00e5n b\u00f6rjan.\n\na++; // a f\u00e5r v\u00e4rdet 13. F\u00f6rtkortning av a = a + 1;\na--; // a f\u00e5r v\u00e4rdet 12 igen. F\u00f6rtkortning av a = a - 1;\n</code></pre> \u00d6kning respektive minskning med ett kan anv\u00e4nds antingen f\u00f6re eller efter variabeln vars v\u00e4rde ska p\u00e5verkas, detta avg\u00f6r vilket v\u00e4rde som returneras. <pre><code>int a = 10;\n\n// Skriver ut v\u00e4rdet p\u00e5 a, SEN \u00f6ka med 1.\nConsole.WriteLine(a++); // Ger utskriften 10. \n\n// \u00d6kar v\u00e4rdet p\u00e5 a med 1 F\u00d6RST, sen skriver ut v\u00e4rdet.\nConsole.WriteLine(++a); // Ger utskriften 12.\n</code></pre></p>"},{"location":"content/modul-1/4-operatorer/#multiplicera-och-tilldela","title":"*=\u2003Multiplicera och tilldela","text":"<pre><code>int a = 12; // a tilldelas v\u00e4rdet 12 fr\u00e5n b\u00f6rjan.\n\na *= 2; // a f\u00e5r v\u00e4rdet 24. a = 12 * 2.\n</code></pre>"},{"location":"content/modul-1/4-operatorer/#dividera-och-tilldela","title":"/=\u2003Dividera och tilldela","text":"<pre><code>int a = 12; // a tilldelas v\u00e4rdet 12 fr\u00e5n b\u00f6rjan.\n\na /= 2; // a f\u00e5r v\u00e4rdet 6. a = 12 / 2.\n</code></pre>"},{"location":"content/modul-1/4-operatorer/#modulus-och-tilldela","title":"%=\u2003Modulus och tilldela","text":"<pre><code>int a = 12; // a tilldelas v\u00e4rdet 12 fr\u00e5n b\u00f6rjan.\n\na %= 2; // a f\u00e5r v\u00e4rdet 0. Eftersom 12 % 2 = 0.\n</code></pre>"},{"location":"content/modul-1/4-operatorer/#jamforandeboolska-operatorer","title":"J\u00e4mf\u00f6rande/Boolska operatorer","text":"<p>J\u00e4mf\u00f6rande operatorer ger upphov till en boolskt v\u00e4rde, sant eller falskt. Dessa anv\u00e4nds oftast i villkorssatser, exempelvis if-satser, snarare \u00e4n att tilldelas eller skrivas ut direkt som i vissa exempel nedan.</p>"},{"location":"content/modul-1/4-operatorer/#mindre-an-storre-an","title":"&lt;,&gt;\u2003Mindre \u00e4n, st\u00f6rre \u00e4n","text":"<pre><code>bool a = 10 &gt; 6; // a f\u00e5r v\u00e4rdet true.\n\nint b = 5;\nConsole.WriteLine(b &lt; 3); // Ger utskriften False.\n</code></pre>"},{"location":"content/modul-1/4-operatorer/#mindre-an-eller-lika-med-storre-an-eller-lika-med","title":"&lt;=, &gt;=\u2003Mindre \u00e4n eller lika med, st\u00f6rre \u00e4n eller lika med","text":"<pre><code>bool a = 6 &gt;= 6; // a f\u00e5r v\u00e4rdet true.\n\nint b = 5;\nConsole.WriteLine(b &lt;= 3); // Ger utskriften False.\n</code></pre>"},{"location":"content/modul-1/4-operatorer/#lika-med","title":"==\u2003Lika med","text":"<pre><code>bool a = 3 == 4; // a f\u00e5r v\u00e4rdet False, eftersom 3 inte \u00e4r 4.\n</code></pre>"},{"location":"content/modul-1/4-operatorer/#skiljt-fran","title":"!=\u2003Skiljt fr\u00e5n","text":"<pre><code>Console.WriteLine(5 != 20); // Ger utskriften True.\n</code></pre>"},{"location":"content/modul-1/4-operatorer/#logiska-operatorer","title":"Logiska operatorer","text":""},{"location":"content/modul-1/4-operatorer/#and-och","title":"&amp;&amp;\u2003And (Och)","text":"<p>Och-operatorn ger resultatet True om b\u00e5da operanderna \u00e4r True, allts\u00e5 om det \u00e4r True p\u00e5 b\u00e5da sidorna om &amp;&amp;. <pre><code>int a = 12;\n\n// 5 \u00e4r st\u00f6rre \u00e4n 2 OCH 8 \u00e4r mindre \u00e4n a.\nConsole.WriteLine(5 &gt; 2 &amp;&amp; 8 &lt; a); // Ger utskriften True.\n\nConsole.WriteLine(a == 12 &amp;&amp; a &lt; 10); // ger utskriften False.\n</code></pre></p>"},{"location":"content/modul-1/4-operatorer/#or-eller","title":"||\u2003Or (Eller)","text":"<p>Eller-operatorn ger resultatet True om minst en av operanderna \u00e4r True. <pre><code>bool a = True; \n\n// a \u00e4r True ELLER 5 \u00e4r lika med 19. Beh\u00f6ver inte skriva a == true.\nConsole.WriteLine(a || 5 == 19); // Ger utskriften True. a \u00e4r true.\n\n// H\u00e4r anv\u00e4nds det boolska v\u00e4rdet false direkt \nConsole.WriteLine(false || 6 &gt; 0 ); // Ger utskriften False. B\u00e5da \u00e4r falska.\n\n//V\u00e4rdet fr\u00e5n en logisk operator kan ocks\u00e5 sparas i en variabel\nbool b = 5 &lt; 10 || a; // b f\u00e5r v\u00e4rdet true, b\u00e5da \u00e4r true.\n</code></pre></p>"},{"location":"content/modul-1/4-operatorer/#prioriteringsordning","title":"Prioriteringsordning","text":"<p>Inom programmering fungerar prioriteringsordning ganska likt matematiken, olika operatorer har olika prioritet, och de med h\u00f6gst prioritet utv\u00e4rderas f\u00f6rst. Ut\u00f6ver detta kan parenteser anv\u00e4ndas f\u00f6r att styra ordningen.</p> <p>Lite f\u00f6renklat kan prioriteringsordningen s\u00e4gas vara:</p>"},{"location":"content/modul-1/4-operatorer/#1-raknesatt","title":"1. R\u00e4knes\u00e4tt","text":"<p>R\u00e4knes\u00e4tten har ocks\u00e5 en inb\u00f6rdes prioriteringsordning precis som i matematiken. 1. Postfix ++ och -- 2. Prefix ++ och --, \u00e4ven andra unit\u00e4ra operatorer s\u00e5som - och ! 3. Multiplikation, Division och Modulus 4. Addition och Subtraktion</p> <pre><code>int a = 3 + 4 * 5; // a f\u00e5r v\u00e4rdet 23. Multiplikation h\u00f6gre prioritet.\n\nint b = 10;\nConsole.WriteLine(b++ * 2); // Ger utskriften 20. b blir 11 n\u00e4sta rad och fram\u00e5t.\n\nConsole.WriteLine(++b * 2); // Ger utskriften 24. b blir 12, sen g\u00e5nger 2.\n</code></pre>"},{"location":"content/modul-1/4-operatorer/#2-jamforelser","title":"2. J\u00e4mf\u00f6relser","text":"<p>Mindre \u00e4n, st\u00f6rre \u00e4n, lika med, etc.</p>"},{"location":"content/modul-1/4-operatorer/#3-logiska-operatorer","title":"3. Logiska operatorer","text":"<p>Innefattar AND och OR. Notera att AND har h\u00f6gre prioritet \u00e4n OR. <pre><code>// H\u00e4r utv\u00e4rderas \"false &amp;&amp; true\" till false, sen \"false || true\" till true. \nConsole.WriteLine(false &amp;&amp; true || true); // Ger utskriften True.\n</code></pre></p>"},{"location":"content/modul-1/4-operatorer/#4-tilldelningar","title":"4. Tilldelningar","text":"<p>B\u00e5de vanlig tilldelning med =, men ocks\u00e5 de tilldelande aritmetiska operatornerna exempelvis +=.</p>"}]}